// Generated by dart2js, the Dart to JavaScript compiler version: 1.5.8.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = {x: x};
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    if (fields instanceof Array)
      fields = fields[0];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["PIXI", "package:play_pixi/pixi.dart", , M, {
  "^": "",
  Loader_Loader$loaderByType: function(type, url, crossorigin) {
    var t1, t2;
    switch (type) {
      case "jpg":
      case "jpeg":
      case "png":
      case "gif":
      case "webp":
        t1 = new M.ImageLoader(null, [], url, crossorigin, null, null, false, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
        t2 = $.get$Loader_baseReg();
        t1.baseUrl = H.stringReplaceFirstUnchecked(url, t2, "");
        t1.PIXI$ImageLoader$texture = M.Texture_fromImage(url, crossorigin, null);
        return t1;
      case "json":
        t1 = new M.JsonLoader(null, url, crossorigin, null, null, false, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
        t2 = $.get$Loader_baseReg();
        t1.baseUrl = H.stringReplaceFirstUnchecked(url, t2, "");
        return t1;
      case "atlas":
        t1 = new M.AtlasLoader(null, null, 0, url, crossorigin, null, null, false, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
        t2 = $.get$Loader_baseReg();
        t1.baseUrl = H.stringReplaceFirstUnchecked(url, t2, "");
        return t1;
      case "anim":
        t1 = new M.SpineLoader(null, url, crossorigin, null, null, false, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
        t2 = $.get$Loader_baseReg();
        t1.baseUrl = H.stringReplaceFirstUnchecked(url, t2, "");
        return t1;
      case "xml":
      case "fnt":
        t1 = new M.BitmapFontLoader(null, url, crossorigin, null, null, false, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
        t2 = $.get$Loader_baseReg();
        t1.PIXI$BitmapFontLoader$baseUrl = H.stringReplaceFirstUnchecked(url, t2, "");
        return t1;
      default:
        throw H.wrapException(P.Exception_Exception(H.S(type) + " is an unsupported file type"));
    }
  },
  CanvasTinter_getTintedTexture: function(sprite, color) {
    var texture, step, rgbValues, t1, t2, t3, stringColor, canvas, tintImage;
    texture = sprite.texture;
    step = $.CanvasTinter_cacheStepsPerColorChannel;
    rgbValues = M.hex2rgb(color);
    if (0 >= rgbValues.length)
      return H.ioore(rgbValues, 0);
    t1 = P.min(255, J.$div$n(rgbValues[0], step) * step);
    t2 = rgbValues.length;
    if (0 >= t2)
      return H.ioore(rgbValues, 0);
    rgbValues[0] = t1;
    if (1 >= t2)
      return H.ioore(rgbValues, 1);
    t2 = P.min(255, J.$div$n(rgbValues[1], step) * step);
    t1 = rgbValues.length;
    if (1 >= t1)
      return H.ioore(rgbValues, 1);
    rgbValues[1] = t2;
    if (2 >= t1)
      return H.ioore(rgbValues, 2);
    t1 = P.min(255, J.$div$n(rgbValues[2], step) * step);
    if (2 >= rgbValues.length)
      return H.ioore(rgbValues, 2);
    rgbValues[2] = t1;
    t1 = J.floor$0$n(J.$mul$ns(rgbValues[0], 255));
    if (1 >= rgbValues.length)
      return H.ioore(rgbValues, 1);
    t2 = J.floor$0$n(J.$mul$ns(rgbValues[1], 255));
    if (2 >= rgbValues.length)
      return H.ioore(rgbValues, 2);
    t3 = J.$mul$ns(rgbValues[2], 255);
    if (typeof t3 !== "number")
      return H.iae(t3);
    color = C.JSNumber_methods.toInt$0(Math.floor((t1 << 16 >>> 0) + (t2 << 8 >>> 0) + t3));
    stringColor = "#" + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(color, 16), 6, "0");
    if (texture.get$tintCache() == null)
      texture.set$tintCache(P.LinkedHashMap_LinkedHashMap$_empty(null, null));
    if (texture.get$tintCache().$index(0, stringColor) != null)
      return texture.get$tintCache().$index(0, stringColor);
    canvas = W.CanvasElement_CanvasElement(null, null);
    $.get$CanvasTinter_tintMethod().call$3(texture, color, canvas);
    if ($.CanvasTinter_convertTintToImage) {
      tintImage = W.ImageElement_ImageElement(null, null, null);
      J.set$src$x(tintImage, J.toDataUrl$0$x(canvas));
      texture.get$tintCache().$indexSet(0, stringColor, tintImage);
    } else {
      texture.get$tintCache().$indexSet(0, stringColor, canvas);
      $.CanvasTinter_canvas = null;
    }
    return canvas;
  },
  CanvasTinter_tintWithMultiply: [function(texture, color, canvas) {
    var t1, context, frame, t2, t3, t4, t5, t6;
    t1 = J.getInterceptor$x(canvas);
    context = t1.getContext$1(canvas, "2d");
    frame = texture.get$frame();
    t1.set$width(canvas, frame.width);
    t1.set$height(canvas, frame.height);
    t1 = J.getInterceptor$x(context);
    t1.set$fillStyle(context, "#" + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(color, 16), 6, "0"));
    t1.fillRect$4(context, 0, 0, frame.width, frame.height);
    t1.set$globalCompositeOperation(context, "multiply");
    t2 = texture.get$baseTexture().source;
    t3 = frame.x;
    t4 = frame.y;
    t5 = frame.width;
    t6 = frame.height;
    t1.drawImageScaledFromSource$9(context, t2, t3, t4, t5, t6, 0, 0, t5, t6);
    t1.set$globalCompositeOperation(context, "destination-atop");
    t6 = texture.get$baseTexture().source;
    t5 = frame.x;
    t4 = frame.y;
    t3 = frame.width;
    t2 = frame.height;
    t1.drawImageScaledFromSource$9(context, t6, t5, t4, t3, t2, 0, 0, t3, t2);
  }, "call$3", "CanvasTinter_tintWithMultiply$closure", 6, 0, 0],
  CanvasTinter_tintWithPerPixel: [function(texture, color, canvas) {
    var t1, context, frame, t2, t3, t4, t5, t6, rgbValues, r, g, b, pixelData, pixels, i;
    t1 = J.getInterceptor$x(canvas);
    context = t1.getContext$1(canvas, "2d");
    frame = texture.get$frame();
    t1.set$width(canvas, frame.width);
    t1.set$height(canvas, frame.height);
    t1 = J.getInterceptor$x(context);
    t1.set$globalCompositeOperation(context, "copy");
    t2 = texture.get$baseTexture().source;
    t3 = frame.x;
    t4 = frame.y;
    t5 = frame.width;
    t6 = frame.height;
    t1.drawImage$9(context, t2, t3, t4, t5, t6, 0, 0, t5, t6);
    rgbValues = M.hex2rgb(color);
    t6 = rgbValues.length;
    if (0 >= t6)
      return H.ioore(rgbValues, 0);
    r = rgbValues[0];
    if (1 >= t6)
      return H.ioore(rgbValues, 1);
    g = rgbValues[1];
    if (2 >= t6)
      return H.ioore(rgbValues, 2);
    b = rgbValues[2];
    pixelData = t1.getImageData$4(context, 0, 0, frame.width, frame.height);
    pixels = J.get$data$x(pixelData);
    for (t2 = pixels.length, i = 0; i < t2; i += 4) {
      t3 = pixels[i];
      if (typeof r !== "number")
        return H.iae(r);
      pixels[i] = t3 * r;
      t3 = i + 1;
      if (t3 >= t2)
        return H.ioore(pixels, t3);
      t4 = pixels[t3];
      if (typeof g !== "number")
        return H.iae(g);
      pixels[t3] = t4 * g;
      t4 = i + 2;
      if (t4 >= t2)
        return H.ioore(pixels, t4);
      t3 = pixels[t4];
      if (typeof b !== "number")
        return H.iae(b);
      pixels[t4] = t3 * b;
    }
    t1.putImageData$3(context, pixelData, 0, 0);
  }, "call$3", "CanvasTinter_tintWithPerPixel$closure", 6, 0, 1],
  _CompileShader: function(gl, shaderSrc, shaderType) {
    var src, t1, shader;
    src = J.join$1$ax(shaderSrc, "\n");
    t1 = J.getInterceptor$x(gl);
    shader = t1.createShader$1(gl, shaderType);
    t1.shaderSource$2(gl, shader, src);
    t1.compileShader$1(gl, shader);
    if (t1.getShaderParameter$2(gl, shader, 35713) == null) {
      window;
      t1 = t1.getShaderInfoLog$1(gl, shader);
      if (typeof console != "undefined")
        console.log(t1);
      return;
    }
    return shader;
  },
  compileProgram: function(gl, vertexSrc, fragmentSrc) {
    var fragmentShader, vertexShader, t1, shaderProgram;
    fragmentShader = M._CompileShader(gl, fragmentSrc, 35632);
    vertexShader = M._CompileShader(gl, vertexSrc, 35633);
    t1 = J.getInterceptor$x(gl);
    shaderProgram = t1.createProgram$0(gl);
    t1.attachShader$2(gl, shaderProgram, vertexShader);
    t1.attachShader$2(gl, shaderProgram, fragmentShader);
    t1.linkProgram$1(gl, shaderProgram);
    if (t1.getProgramParameter$2(gl, shaderProgram, 35714) == null) {
      window;
      if (typeof console != "undefined")
        console.log("Could not initialise shaders");
    }
    return shaderProgram;
  },
  createWebGLTexture: function(texture, gl) {
    var t1;
    if (texture._hasLoaded) {
      t1 = J.getInterceptor$x(gl);
      texture._glTextures.$indexSet(0, gl, t1.createTexture$0(gl));
      t1.bindTexture$2(gl, 3553, texture._glTextures.$index(0, gl));
      t1.pixelStorei$2(gl, 37441, texture.premultipliedAlpha ? 1 : 0);
      t1.texImage2D$6(gl, 3553, 0, 6408, 6408, 5121, texture.source);
      texture.scaleMode;
      t1.texParameteri$3(gl, 3553, 10240, 9728);
      texture.scaleMode;
      t1.texParameteri$3(gl, 3553, 10241, 9728);
      if (!texture._powerOf2) {
        t1.texParameteri$3(gl, 3553, 10242, 33071);
        t1.texParameteri$3(gl, 3553, 10243, 33071);
      } else {
        t1.texParameteri$3(gl, 3553, 10242, 10497);
        t1.texParameteri$3(gl, 3553, 10243, 10497);
      }
      t1.bindTexture$2(gl, 3553, null);
      texture._dirty.$indexSet(0, gl, false);
    }
    return texture._glTextures.$index(0, gl);
  },
  updateWebGLTexture: function(texture, gl) {
    var t1;
    if (texture._glTextures.$index(0, gl) != null) {
      t1 = J.getInterceptor$x(gl);
      t1.bindTexture$2(gl, 3553, texture._glTextures.$index(0, gl));
      t1.pixelStorei$2(gl, 37441, texture.premultipliedAlpha ? 1 : 0);
      t1.texImage2D$6(gl, 3553, 0, 6408, 6408, 5121, texture.source);
      texture.scaleMode;
      t1.texParameteri$3(gl, 3553, 10240, 9728);
      texture.scaleMode;
      t1.texParameteri$3(gl, 3553, 10241, 9728);
      if (!texture._powerOf2) {
        t1.texParameteri$3(gl, 3553, 10242, 33071);
        t1.texParameteri$3(gl, 3553, 10243, 33071);
      } else {
        t1.texParameteri$3(gl, 3553, 10242, 10497);
        t1.texParameteri$3(gl, 3553, 10243, 10497);
      }
      texture._dirty.$indexSet(0, gl, false);
    }
  },
  autoDetectRenderer: function(width, height, view, transparent, antialias) {
    var t1;
    if (J.getContext3d$0$x(W.CanvasElement_CanvasElement(null, null)) != null)
      return M.WebGLRenderer$(width, height, view, transparent, antialias, false);
    else {
      t1 = new M.CanvasRenderer(true, false, null, true, 0, 0, false, false, false, 100, 100, null, null, null, false, null, null, null, null, null, null, null, null, null, null);
      t1.CanvasRenderer$5(width, height, view, transparent, false);
      return t1;
    }
  },
  hex2rgb: function(hex) {
    if (typeof hex !== "number")
      return hex.$shr();
    return [(C.JSInt_methods._shrOtherPositive$1(hex, 16) & 255) / 255, (C.JSInt_methods._shrOtherPositive$1(hex, 8) & 255) / 255, (hex & 255) / 255];
  },
  canUseNewCanvasBlendModes: function() {
    var canvas, context, t1;
    canvas = H.interceptedTypeCast(document.createElement("canvas", null), "$isCanvasElement");
    canvas.width = 1;
    canvas.height = 1;
    context = J.getContext$1$x(canvas, "2d");
    t1 = J.getInterceptor$x(context);
    t1.set$fillStyle(context, "#000");
    t1.fillRect$4(context, 0, 0, 1, 1);
    t1.set$globalCompositeOperation(context, "multiply");
    t1.set$fillStyle(context, "#fff");
    t1.fillRect$4(context, 0, 0, 1, 1);
    t1 = J.get$data$x(t1.getImageData$4(context, 0, 0, 1, 1));
    if (0 >= t1.length)
      return H.ioore(t1, 0);
    return t1[0] === 0;
  },
  Matrix: {
    "^": "Object;a,b,c,d,tx,ty,array",
    $index: function(_, i) {
      var t1 = this.array;
      if (i >>> 0 !== i || i >= 9)
        return H.ioore(t1, i);
      return t1[i];
    }
  },
  Point: {
    "^": "Object;x>,y>"
  },
  Rectangle: {
    "^": "Shape;x>,y>,width>,height>",
    contains$2: [function(_, x, y) {
      var x1, t1, y1;
      if (J.$le$n(this.width, 0) || J.$le$n(this.height, 0))
        return false;
      x1 = this.x;
      if (typeof x1 !== "number")
        return H.iae(x1);
      if (x >= x1) {
        t1 = this.width;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = x <= x1 + t1;
      } else
        t1 = false;
      if (t1) {
        y1 = this.y;
        if (typeof y1 !== "number")
          return H.iae(y1);
        if (y >= y1) {
          t1 = this.height;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = y <= y1 + t1;
        } else
          t1 = false;
        if (t1)
          return true;
      }
      return false;
    }, "call$2", "get$contains", 4, 0, 57]
  },
  Shape: {
    "^": "Object;"
  },
  DisplayObject: {
    "^": "Object;visible<,hitArea<,buttonMode<,_parent?,__hit@,__isOver@,__mouseIsDown?,__isDown@,click>,mousemove<,mousedown<,mouseout<,mouseover<,mouseup<,mouseupoutside<,touchmove<,touchstart<,touchend<,tap<,touchendoutside<,__touchData<,_interactive<,defaultCursor<,_worldTransform@",
    click$1: function($receiver, arg0) {
      return this.click.call$1(arg0);
    },
    mousedown$1: function(arg0) {
      return this.mousedown.call$1(arg0);
    },
    mouseup$1: function(arg0) {
      return this.mouseup.call$1(arg0);
    },
    mouseupoutside$1: function(arg0) {
      return this.mouseupoutside.call$1(arg0);
    },
    touchstart$1: function(arg0) {
      return this.touchstart.call$1(arg0);
    },
    touchend$1: function(arg0) {
      return this.touchend.call$1(arg0);
    },
    touchendoutside$1: function(arg0) {
      return this.touchendoutside.call$1(arg0);
    },
    set$interactive: function(value) {
      var t1;
      this._interactive = value;
      t1 = this._stage;
      if (t1 != null)
        t1.PIXI$Stage$_dirty = true;
    },
    get$worldVisible: function() {
      var item = this;
      do {
        if (!item.visible)
          return false;
        item = item._parent;
      } while (item != null);
      return true;
    },
    updateTransform$0: function() {
      var t1, $parent, parentTransform, worldTransform, px, py, t2, t3, a00, t4, a01, a10, a11, a02, a12, b00, b01, b10, b11;
      t1 = this.rotation;
      if (t1 !== this._rotationCache) {
        this._rotationCache = t1;
        this._sr = Math.sin(t1);
        t1 = this.rotation;
        this._cr = Math.cos(t1);
      }
      $parent = this._parent;
      parentTransform = $parent.get$_worldTransform();
      worldTransform = this.get$_worldTransform();
      t1 = this.pivot;
      px = t1.x;
      py = t1.y;
      t1 = this._cr;
      t2 = this.scale;
      t3 = t2.x;
      if (typeof t3 !== "number")
        return H.iae(t3);
      a00 = t1 * t3;
      t4 = this._sr;
      t2 = t2.y;
      if (typeof t2 !== "number")
        return H.iae(t2);
      a01 = -t4 * t2;
      a10 = t4 * t3;
      a11 = t1 * t2;
      t2 = this.position;
      t1 = t2.x;
      if (typeof px !== "number")
        return H.iae(px);
      a02 = J.$sub$n(J.$sub$n(t1, a00 * px), J.$mul$ns(py, a01));
      t2 = t2.y;
      if (typeof py !== "number")
        return H.iae(py);
      a12 = J.$sub$n(J.$sub$n(t2, a11 * py), px * a10);
      b00 = parentTransform.a;
      b01 = parentTransform.b;
      b10 = parentTransform.c;
      b11 = parentTransform.d;
      worldTransform.a = b00 * a00 + b01 * a10;
      worldTransform.b = b00 * a01 + b01 * a11;
      if (typeof a02 !== "number")
        return H.iae(a02);
      if (typeof a12 !== "number")
        return H.iae(a12);
      worldTransform.tx = b00 * a02 + b01 * a12 + parentTransform.tx;
      worldTransform.c = b10 * a00 + b11 * a10;
      worldTransform.d = b10 * a01 + b11 * a11;
      worldTransform.ty = b10 * a02 + b11 * a12 + parentTransform.ty;
      this._worldAlpha = this.alpha * $parent._worldAlpha;
    },
    getBounds$1: function(matrix) {
      return $.get$EmptyRectangle();
    },
    _setStageReference$1: function(stage) {
      this._stage = stage;
      if (this._interactive)
        stage.PIXI$Stage$_dirty = true;
    },
    _renderCachedSprite$1: function(renderSession) {
      var t1 = this._cachedSprite;
      t1.set$_worldAlpha(this._worldAlpha);
      if (renderSession.gl != null)
        t1._renderWebGL$1(renderSession);
      else
        t1._renderCanvas$1(renderSession);
    },
    _renderWebGL$1: function(renderSession) {
    },
    _renderCanvas$1: function(renderSession) {
    },
    get$x: function(_) {
      return this.position.x;
    },
    get$y: function(_) {
      return this.position.y;
    }
  },
  DisplayObjectContainer: {
    "^": "DisplayObject;children>,interactiveChildren?,_width,_height,position,scale,pivot,rotation,alpha,visible,hitArea,buttonMode,renderable,_parent,__hit,__isOver,__mouseIsDown,__isDown,_dirty,click,mousemove,mousedown,mouseout,mouseover,mouseup,mouseupoutside,touchmove,touchstart,touchend,tap,touchendoutside,__touchData,_stage,_worldAlpha,_interactive,defaultCursor,_worldTransform,_sr,_cr,filterArea,_bounds,_currentBounds,_mask,_cacheAsBitmap,_cachedSprite,_cacheIsDirty,_filterBlock,_filters,_rotationCache",
    get$width: function(_) {
      return J.$mul$ns(this.scale.x, this.getLocalBounds$0().width);
    },
    get$height: function(_) {
      return J.$mul$ns(this.scale.y, this.getLocalBounds$0().height);
    },
    addChildAt$2: function(child, index) {
      var t1, t2;
      if (index <= this.children.length) {
        t1 = child._parent;
        if (t1 != null) {
          t2 = t1.children;
          t1.removeChildAt$1(H.Lists_indexOf(t2, child, 0, t2.length));
        }
        child._parent = this;
        C.JSArray_methods.insert$2(this.children, index, child);
        t1 = this._stage;
        if (t1 != null)
          child._setStageReference$1(t1);
        return child;
      } else
        throw H.wrapException(P.Exception_Exception(child.toString$0(0) + "  The index " + index + " supplied is out of bounds " + this.children.length));
    },
    getChildAt$1: function(index) {
      var t1;
      if (index >= 0 && index < this.children.length) {
        t1 = this.children;
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      } else
        throw H.wrapException(P.Exception_Exception("Supplied index does not exist in the child list, or the supplied DisplayObject must be a child of the caller"));
    },
    removeChildAt$1: function(index) {
      var child = this.getChildAt$1(index);
      if (this._stage != null && !!J.getInterceptor(child).$isDisplayObjectContainer)
        child._removeStageReference$0();
      child.set$_parent(null);
      C.JSArray_methods.removeAt$1(this.children, index);
      return child;
    },
    updateTransform$0: function() {
      var t1, j, i;
      if (!this.visible)
        return;
      M.DisplayObject.prototype.updateTransform$0.call(this);
      if (this._cacheAsBitmap)
        return;
      for (t1 = this.children, j = t1.length, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].updateTransform$0();
      }
    },
    getBounds$1: function(matrix) {
      var t1, matrixCache, j, minX, minY, maxX, maxY, childBounds, childMaxX, childMaxY, childVisible, i, child, bounds;
      t1 = this.children;
      if (t1.length === 0)
        return $.get$EmptyRectangle();
      if (matrix != null) {
        matrixCache = this.get$_worldTransform();
        this.set$_worldTransform(matrix);
        this.updateTransform$0();
        this.set$_worldTransform(matrixCache);
      }
      for (j = t1.length, minX = 1 / 0, minY = 1 / 0, maxX = -1 / 0, maxY = -1 / 0, childBounds = null, childMaxX = null, childMaxY = null, childVisible = false, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        child = t1[i];
        if (!child.get$visible())
          continue;
        childBounds = child.getBounds$1(matrix);
        minX = J.$lt$n(minX, childBounds.x) ? minX : childBounds.x;
        minY = J.$lt$n(minY, childBounds.y) ? minY : childBounds.y;
        childMaxX = J.$add$ns(childBounds.width, childBounds.x);
        childMaxY = J.$add$ns(childBounds.height, childBounds.y);
        maxX = J.$gt$n(maxX, childMaxX) ? maxX : childMaxX;
        maxY = J.$gt$n(maxY, childMaxY) ? maxY : childMaxY;
        childVisible = true;
      }
      if (!childVisible)
        return $.get$EmptyRectangle();
      bounds = this._bounds;
      bounds.x = minX;
      bounds.y = minY;
      bounds.width = J.$sub$n(maxX, minX);
      bounds.height = J.$sub$n(maxY, minY);
      return bounds;
    },
    getBounds$0: function() {
      return this.getBounds$1(null);
    },
    getLocalBounds$0: function() {
      var matrixCache, t1, j, i, bounds;
      matrixCache = this.get$_worldTransform();
      this.set$_worldTransform($.get$IdentityMatrix());
      for (t1 = this.children, j = t1.length, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].updateTransform$0();
      }
      bounds = this.getBounds$0();
      this.set$_worldTransform(matrixCache);
      return bounds;
    },
    _setStageReference$1: function(stage) {
      var t1, j, i;
      this._stage = stage;
      if (this._interactive)
        stage.PIXI$Stage$_dirty = true;
      for (t1 = this.children, j = t1.length, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i]._setStageReference$1(stage);
      }
    },
    _removeStageReference$0: function() {
      var t1, j, i;
      for (t1 = this.children, j = t1.length, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i]._removeStageReference$0();
      }
      if (this._interactive)
        this._stage.PIXI$Stage$_dirty = true;
      this._stage = null;
    },
    _renderWebGL$1: function(renderSession) {
      var t1, j, i;
      if (!this.visible || this.alpha <= 0)
        return;
      if (this._cacheAsBitmap) {
        this._renderCachedSprite$1(renderSession);
        return;
      }
      for (t1 = this.children, j = t1.length, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i]._renderWebGL$1(renderSession);
      }
    },
    _renderCanvas$1: function(renderSession) {
      var t1, j, i;
      if (!this.visible || this.alpha === 0)
        return;
      if (this._cacheAsBitmap) {
        this._renderCachedSprite$1(renderSession);
        return;
      }
      for (t1 = this.children, j = t1.length, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i]._renderCanvas$1(renderSession);
      }
    },
    $isDisplayObjectContainer: true
  },
  MovieClip: {
    "^": "Sprite;textures,animationSpeed,loop,onComplete,_currentFrame,_playing,anchor,texture,updateFrame,PIXI$Sprite$_width,PIXI$Sprite$_height,_uvs,tintedTexture,buffer,tint,cachedTint,blendMode,children,interactiveChildren,_width,_height,position,scale,pivot,rotation,alpha,visible,hitArea,buttonMode,renderable,_parent,__hit,__isOver,__mouseIsDown,__isDown,_dirty,click,mousemove,mousedown,mouseout,mouseover,mouseup,mouseupoutside,touchmove,touchstart,touchend,tap,touchendoutside,__touchData,_stage,_worldAlpha,_interactive,defaultCursor,_worldTransform,_sr,_cr,filterArea,_bounds,_currentBounds,_mask,_cacheAsBitmap,_cachedSprite,_cacheIsDirty,_filterBlock,_filters,_rotationCache",
    updateTransform$0: function() {
      var t1, round, t2, t3;
      M.DisplayObjectContainer.prototype.updateTransform$0.call(this);
      if (!this._playing)
        return;
      t1 = this._currentFrame + this.animationSpeed;
      this._currentFrame = t1;
      round = C.JSNumber_methods.toInt$0(Math.ceil(t1));
      t1 = this._currentFrame;
      t2 = this.textures;
      t3 = t2.length;
      this._currentFrame = C.JSNumber_methods.$mod(t1, t3);
      if (this.loop || round < t3) {
        this.texture = t2[C.JSInt_methods.$mod(round, t3)];
        this.cachedTint = 16777215;
      } else if (round >= t3) {
        t1 = t3 - 1;
        this._playing = false;
        this._currentFrame = t1;
        round = C.JSNumber_methods.toInt$0(Math.ceil(t1));
        t1 = this.textures;
        this.texture = t1[C.JSInt_methods.$mod(round, t1.length)];
        this.cachedTint = 16777215;
      }
    }
  },
  Sprite: {
    "^": "DisplayObjectContainer;anchor,texture,updateFrame,PIXI$Sprite$_width,PIXI$Sprite$_height,_uvs<,tintedTexture,buffer,tint,cachedTint,blendMode,children,interactiveChildren,_width,_height,position,scale,pivot,rotation,alpha,visible,hitArea,buttonMode,renderable,_parent,__hit,__isOver,__mouseIsDown,__isDown,_dirty,click,mousemove,mousedown,mouseout,mouseover,mouseup,mouseupoutside,touchmove,touchstart,touchend,tap,touchendoutside,__touchData,_stage,_worldAlpha,_interactive,defaultCursor,_worldTransform,_sr,_cr,filterArea,_bounds,_currentBounds,_mask,_cacheAsBitmap,_cachedSprite,_cacheIsDirty,_filterBlock,_filters,_rotationCache",
    get$width: function(_) {
      return J.$mul$ns(this.scale.x, this.texture.get$frame().width);
    },
    set$width: function(_, value) {
      this.scale.x = J.$div$n(value, this.texture.get$frame().width);
      this.PIXI$Sprite$_width = value;
    },
    get$height: function(_) {
      return J.$mul$ns(this.scale.y, this.texture.get$frame().height);
    },
    set$height: function(_, value) {
      this.scale.y = J.$div$n(value, this.texture.get$frame().height);
      this.PIXI$Sprite$_height = value;
    },
    _setupTexture$0: function() {
      if (this.texture.get$baseTexture()._hasLoaded)
        this._onTextureUpdate$1(null);
      else
        J.addEventListener$2$x(this.texture, "update", this.get$_onTextureUpdate());
    },
    _onTextureUpdate$1: [function(e) {
      if (!J.$eq(this.PIXI$Sprite$_width, 0))
        this.scale.x = J.$div$n(this.PIXI$Sprite$_width, this.texture.get$frame().width);
      if (!J.$eq(this.PIXI$Sprite$_height, 0))
        this.scale.y = J.$div$n(this.PIXI$Sprite$_height, this.texture.get$frame().height);
    }, "call$1", "get$_onTextureUpdate", 2, 0, 58, 3],
    getBounds$1: function(matrix) {
      var width, height, t1, t2, t3, w0, w1, h0, h1, worldTransform, a, b, c, d, tx, ty, x1, t4, y1, t5, x2, y2, x3, y3, x4, y4, minX, minY, maxX, maxY, bounds;
      width = this.texture.get$frame().width;
      height = this.texture.get$frame().height;
      t1 = this.anchor;
      t2 = t1.x;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.getInterceptor$ns(width);
      w0 = t3.$mul(width, 1 - t2);
      w1 = t3.$mul(width, J.$negate$n(t1.x));
      t3 = t1.y;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = J.getInterceptor$ns(height);
      h0 = t2.$mul(height, 1 - t3);
      h1 = t2.$mul(height, J.$negate$n(t1.y));
      worldTransform = matrix == null ? this._worldTransform : matrix;
      a = worldTransform.a;
      b = worldTransform.c;
      c = worldTransform.b;
      d = worldTransform.d;
      tx = worldTransform.tx;
      ty = worldTransform.ty;
      if (typeof w1 !== "number")
        return H.iae(w1);
      t1 = a * w1;
      if (typeof h1 !== "number")
        return H.iae(h1);
      t2 = c * h1;
      x1 = t1 + t2 + tx;
      t3 = d * h1;
      t4 = b * w1;
      y1 = t3 + t4 + ty;
      if (typeof w0 !== "number")
        return H.iae(w0);
      t5 = a * w0;
      x2 = t5 + t2 + tx;
      t2 = b * w0;
      y2 = t3 + t2 + ty;
      if (typeof h0 !== "number")
        return H.iae(h0);
      t3 = c * h0;
      x3 = t5 + t3 + tx;
      t5 = d * h0;
      y3 = t5 + t2 + ty;
      x4 = t1 + t3 + tx;
      y4 = t5 + t4 + ty;
      minX = x1 < 1 / 0 ? x1 : 1 / 0;
      if (x2 < minX)
        minX = x2;
      if (x3 < minX)
        minX = x3;
      if (x4 < minX)
        minX = x4;
      minY = y1 < 1 / 0 ? y1 : 1 / 0;
      if (y2 < minY)
        minY = y2;
      if (y3 < minY)
        minY = y3;
      if (y4 < minY)
        minY = y4;
      maxX = x1 > -1 / 0 ? x1 : -1 / 0;
      if (x2 > maxX)
        maxX = x2;
      if (x3 > maxX)
        maxX = x3;
      if (x4 > maxX)
        maxX = x4;
      maxY = y1 > -1 / 0 ? y1 : -1 / 0;
      if (y2 > maxY)
        maxY = y2;
      if (y3 > maxY)
        maxY = y3;
      if (y4 > maxY)
        maxY = y4;
      bounds = this._bounds;
      bounds.x = minX;
      bounds.width = maxX - minX;
      bounds.y = minY;
      bounds.height = maxY - minY;
      this._currentBounds = bounds;
      return bounds;
    },
    getBounds$0: function() {
      return this.getBounds$1(null);
    },
    _renderWebGL$1: function(renderSession) {
      var t1, j, i;
      if (!this.visible || this.alpha <= 0)
        return;
      renderSession.spriteBatch.render$1(this);
      for (t1 = this.children, j = t1.length, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i]._renderWebGL$1(renderSession);
      }
    },
    _renderCanvas$1: function(renderSession) {
      var t1, t2, t3, t4, t5, t6, t7, dx, dy, j, i;
      if (!this.visible || this.alpha === 0)
        return;
      t1 = this.blendMode;
      if (t1 !== renderSession.currentBlendMode) {
        renderSession.currentBlendMode = t1;
        J.set$globalCompositeOperation$x(renderSession.context, $.blendModesCanvas.$index(0, t1));
      }
      if (this.texture.get$valid()) {
        J.set$globalAlpha$x(renderSession.context, this._worldAlpha);
        renderSession.roundPixels;
        t1 = renderSession.context;
        t2 = this._worldTransform;
        t3 = t2.a;
        t4 = t2.c;
        t5 = t2.b;
        t6 = t2.d;
        t7 = t2.tx;
        t2 = t2.ty;
        J.setTransform$6$x(t1, t3, t4, t5, t6, t7, t2);
        t1 = renderSession.scaleMode;
        t2 = this.texture.get$baseTexture().scaleMode;
        if (t1 == null ? t2 != null : t1 !== t2) {
          renderSession.scaleMode = this.texture.get$baseTexture().scaleMode;
          J.set$imageSmoothingEnabled$x(renderSession.context, false);
        }
        t1 = J.get$trim$s(this.texture);
        t2 = this.texture;
        t3 = this.anchor;
        if (t1 != null) {
          t1 = J.get$trim$s(t2);
          t1 = t1.get$x(t1);
          t2 = t3.x;
          t4 = J.get$trim$s(this.texture);
          dx = J.$sub$n(t1, J.$mul$ns(t2, t4.get$width(t4)));
        } else
          dx = J.$mul$ns(t3.x, J.$negate$n(t2.get$frame().width));
        t1 = J.get$trim$s(this.texture);
        t2 = this.texture;
        if (t1 != null) {
          t1 = J.get$trim$s(t2);
          t1 = t1.get$y(t1);
          t3 = t3.y;
          t2 = J.get$trim$s(this.texture);
          dy = J.$sub$n(t1, J.$mul$ns(t3, t2.get$height(t2)));
        } else
          dy = J.$mul$ns(t3.y, J.$negate$n(t2.get$frame().height));
        t1 = this.tint;
        if (t1 !== 16777215) {
          if (this.cachedTint !== t1) {
            this.cachedTint = t1;
            this.tintedTexture = M.CanvasTinter_getTintedTexture(this, t1);
          }
          J.drawImageScaledFromSource$9$x(renderSession.context, this.tintedTexture, 0, 0, this.texture.get$crop().width, this.texture.get$crop().height, dx, dy, this.texture.get$crop().width, this.texture.get$crop().height);
        } else
          J.drawImageScaledFromSource$9$x(renderSession.context, this.texture.get$baseTexture().source, this.texture.get$crop().x, this.texture.get$crop().y, this.texture.get$crop().width, this.texture.get$crop().height, dx, dy, this.texture.get$crop().width, this.texture.get$crop().height);
      }
      for (t1 = this.children, j = t1.length, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i]._renderCanvas$1(renderSession);
      }
    },
    $isSprite: true,
    static: {Sprite_fromFrame: function(frameId) {
        var texture, t1, t2, t3, t4, t5;
        texture = $.get$TextureCache().$index(0, frameId);
        if (texture == null)
          throw H.wrapException(P.Exception_Exception("The frameId \"" + frameId + "\" does not exist in the texture cache."));
        t1 = new M.Point(null, null);
        t1.x = 0;
        t1.y = 0;
        t2 = new M.Point(null, null);
        t2.x = 0;
        t2.y = 0;
        t3 = new M.Point(null, null);
        t3.x = 1;
        t3.y = 1;
        t4 = new M.Point(null, null);
        t4.x = 0;
        t4.y = 0;
        t5 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t1 = new M.Sprite(t1, null, false, 0, 0, null, null, null, 16777215, null, C.BlendModes_0, [], false, 0, 0, t2, t3, t4, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t5, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, new Float32Array(9)), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0);
        t1.texture = texture;
        t1._setupTexture$0();
        return t1;
      }}
  },
  Stage: {
    "^": "DisplayObjectContainer;PIXI$Stage$_dirty,_interactiveEventsAdded,hitArea:PIXI$Stage$hitArea<,backgroundColor,backgroundColorSplit,backgroundColorString,_worldTransform:PIXI$Stage$_worldTransform@,interactionManager,children,interactiveChildren,_width,_height,position,scale,pivot,rotation,alpha,visible,hitArea,buttonMode,renderable,_parent,__hit,__isOver,__mouseIsDown,__isDown,_dirty,click,mousemove,mousedown,mouseout,mouseover,mouseup,mouseupoutside,touchmove,touchstart,touchend,tap,touchendoutside,__touchData,_stage,_worldAlpha,_interactive,defaultCursor,_worldTransform,_sr,_cr,filterArea,_bounds,_currentBounds,_mask,_cacheAsBitmap,_cachedSprite,_cacheIsDirty,_filterBlock,_filters,_rotationCache",
    updateTransform$0: function() {
      var t1, j, i;
      this._worldAlpha = 1;
      for (t1 = this.children, j = t1.length, i = 0; i < j; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].updateTransform$0();
      }
      if (this.PIXI$Stage$_dirty) {
        this.PIXI$Stage$_dirty = false;
        this.interactionManager.dirty = true;
      }
      if (this._interactive)
        this.interactionManager.update$0();
    },
    Stage$2: function(backgroundColor, interactive) {
      var t1, t2, t3, t4, hex;
      this.PIXI$Stage$_dirty = true;
      this._stage = this;
      this.backgroundColor = backgroundColor;
      this.set$interactive(interactive);
      t1 = new M.Point(null, null);
      t1.x = 0;
      t1.y = 0;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t3 = new M.Point(null, null);
      t3.x = 0;
      t3.y = 0;
      t4 = new P.DateTime(Date.now(), false);
      t4.DateTime$_now$0();
      t4 = new M.InteractionManager(this, new M.InteractionData(t1, null, null), t2, t3, true, [], [], null, null, t4, null, "inherit", false, null);
      t4.isCocoonJS = J.contains$1$asx(window.navigator.appVersion, "CocoonJS");
      this.interactionManager = t4;
      this.backgroundColor = backgroundColor;
      this.backgroundColorSplit = M.hex2rgb(backgroundColor);
      hex = J.toRadixString$1$n(this.backgroundColor, 16);
      this.backgroundColorString = "#" + (C.JSString_methods.substring$2("000000", 0, 6 - hex.length) + hex);
    }
  },
  BoneData: {
    "^": "Object;name,parent,length>,x>,y>,rotation,scaleX,scaleY"
  },
  SlotData: {
    "^": "Object;name,boneData,r,g,b,a,attachmentName"
  },
  Skin: {
    "^": "Object;name,attachments"
  },
  Animation: {
    "^": "Object;name,timelines,duration"
  },
  Curves: {
    "^": "Object;curves"
  },
  Timeline: {
    "^": "Object;"
  },
  RotateTimeline: {
    "^": "Timeline;curves,frames,boneIndex"
  },
  TranslateTimeline: {
    "^": "Timeline;curves,frames,boneIndex",
    getFrameCount$0: function() {
      return this.frames.length / 3;
    },
    setFrame$6: function(frameIndex, time, x, y, a, b) {
      var t1, t2, t3;
      frameIndex *= 3;
      t1 = this.frames;
      t2 = t1.length;
      if (frameIndex >= t2)
        return H.ioore(t1, frameIndex);
      t1[frameIndex] = time;
      t3 = frameIndex + 1;
      if (t3 >= t2)
        return H.ioore(t1, t3);
      t1[t3] = x;
      t3 = frameIndex + 2;
      if (t3 >= t2)
        return H.ioore(t1, t3);
      t1[t3] = y;
    },
    setFrame$4: function(frameIndex, time, x, y) {
      return this.setFrame$6(frameIndex, time, x, y, null, null);
    }
  },
  ScaleTimeline: {
    "^": "Timeline;curves,frames,boneIndex",
    getFrameCount$0: function() {
      return this.frames.length / 3;
    },
    setFrame$6: function(frameIndex, time, x, y, a, b) {
      var t1, t2, t3;
      frameIndex *= 3;
      t1 = this.frames;
      t2 = t1.length;
      if (frameIndex >= t2)
        return H.ioore(t1, frameIndex);
      t1[frameIndex] = time;
      t3 = frameIndex + 1;
      if (t3 >= t2)
        return H.ioore(t1, t3);
      t1[t3] = x;
      t3 = frameIndex + 2;
      if (t3 >= t2)
        return H.ioore(t1, t3);
      t1[t3] = y;
    },
    setFrame$4: function(frameIndex, time, x, y) {
      return this.setFrame$6(frameIndex, time, x, y, null, null);
    }
  },
  ColorTimeline: {
    "^": "Timeline;slotIndex,curves,frames,boneIndex"
  },
  AttachmentTimeline: {
    "^": "Timeline;slotIndex,attachmentNames,curves,frames,boneIndex"
  },
  SkeletonData: {
    "^": "Object;bones,slots,skins,animations,defaultSkin",
    findBone$1: function(boneName) {
      var t1, n, i;
      for (t1 = this.bones, n = t1.length, i = 0; i < n; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i].name, boneName)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t1[i];
        }
      }
      return;
    },
    findBoneIndex$1: function(boneName) {
      var t1, n, i;
      for (t1 = this.bones, n = t1.length, i = 0; i < n; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i].name, boneName))
          return i;
      }
      return -1;
    },
    findSlotIndex$1: function(slotName) {
      var t1, n, i;
      for (t1 = this.slots, n = t1.length, i = 0; i < n; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i].name, slotName))
          return i;
      }
      return -1;
    }
  },
  Attachment: {
    "^": "Object;x>,y>,width>,height>"
  },
  RegionAttachment: {
    "^": "Attachment;name,offset,uvs,x,y,rotation,scaleX,scaleY,width,height,regionOffsetX,regionOffsetY,regionWidth,regionHeight,regionOriginalWidth,regionOriginalHeight,rendererObject"
  },
  SkeletonJson: {
    "^": "Object;attachmentLoader,scale",
    readSkeletonData$1: function(root) {
      var t1, skeletonData, t2, bones, t3, n, i, boneMap, t4, $parent, boneData, t5, slots, slotMap, slotData, color, skins, skinName, skinMap, skin, t6, t7, slotName, slotIndex, slotEntry, t8, t9, attachmentName, attachment, animations, animationName;
      t1 = [];
      skeletonData = new M.SkeletonData(t1, [], [], [], null);
      t2 = J.getInterceptor$asx(root);
      bones = t2.$index(root, "bones");
      t3 = J.getInterceptor$asx(bones);
      n = t3.get$length(bones);
      if (typeof n !== "number")
        return H.iae(n);
      i = 0;
      for (; i < n; ++i) {
        boneMap = t3.$index(bones, i);
        t4 = J.getInterceptor$asx(boneMap);
        if (t4.$index(boneMap, "parent") != null) {
          $parent = skeletonData.findBone$1(t4.$index(boneMap, "parent"));
          if ($parent == null)
            throw H.wrapException(C.JSString_methods.$add("Parent bone not found: ", t4.$index(boneMap, "parent")));
        } else
          $parent = null;
        boneData = new M.BoneData(t4.$index(boneMap, "name"), $parent, 0, 0, 0, 0, 1, 1);
        t5 = t4.$index(boneMap, "length") == null ? 0 : t4.$index(boneMap, "length");
        boneData.length = J.$mul$ns(t5, this.scale);
        t5 = t4.$index(boneMap, "x") == null ? 0 : t4.$index(boneMap, "x");
        boneData.x = J.$mul$ns(t5, this.scale);
        t5 = t4.$index(boneMap, "y") == null ? 0 : t4.$index(boneMap, "y");
        boneData.y = J.$mul$ns(t5, this.scale);
        boneData.rotation = t4.$index(boneMap, "rotation") == null ? 0 : t4.$index(boneMap, "rotation");
        boneData.scaleX = t4.$index(boneMap, "scaleX") == null ? 1 : t4.$index(boneMap, "scaleX");
        boneData.scaleY = t4.$index(boneMap, "scaleY") == null ? 1 : t4.$index(boneMap, "scaleY");
        t1.push(boneData);
      }
      slots = t2.$index(root, "slots");
      t1 = J.getInterceptor$asx(slots);
      n = t1.get$length(slots);
      if (typeof n !== "number")
        return H.iae(n);
      t3 = skeletonData.slots;
      i = 0;
      for (; i < n; ++i) {
        slotMap = t1.$index(slots, i);
        t4 = J.getInterceptor$asx(slotMap);
        boneData = skeletonData.findBone$1(t4.$index(slotMap, "bone"));
        if (boneData == null)
          throw H.wrapException(P.Exception_Exception("Slot bone not found: " + H.S(t4.$index(slotMap, "bone"))));
        slotData = new M.SlotData(t4.$index(slotMap, "name"), boneData, 1, 1, 1, 1, null);
        color = t4.$index(slotMap, "color");
        if (color != null) {
          t5 = J.getInterceptor$asx(color);
          if (!J.$eq(t5.get$length(color), 8))
            H.throwExpression(C.JSString_methods.$add("Color hexidecimal length must be 8, recieved: ", color));
          slotData.r = J.$div$n(H.Primitives_parseInt(J.toRadixString$1$n(H.Primitives_parseInt(t5.substring$2(color, 0, 2), null, null), 16), null, null), 255);
          if (!J.$eq(t5.get$length(color), 8))
            H.throwExpression(C.JSString_methods.$add("Color hexidecimal length must be 8, recieved: ", color));
          slotData.g = J.$div$n(H.Primitives_parseInt(J.toRadixString$1$n(H.Primitives_parseInt(t5.substring$2(color, 2, 2), null, null), 16), null, null), 255);
          if (!J.$eq(t5.get$length(color), 8))
            H.throwExpression(C.JSString_methods.$add("Color hexidecimal length must be 8, recieved: ", color));
          slotData.b = J.$div$n(H.Primitives_parseInt(J.toRadixString$1$n(H.Primitives_parseInt(t5.substring$2(color, 4, 2), null, null), 16), null, null), 255);
          if (!J.$eq(t5.get$length(color), 8))
            H.throwExpression(C.JSString_methods.$add("Color hexidecimal length must be 8, recieved: ", color));
          slotData.a = J.$div$n(H.Primitives_parseInt(J.toRadixString$1$n(H.Primitives_parseInt(t5.substring$2(color, 6, 2), null, null), 16), null, null), 255);
        }
        slotData.attachmentName = t4.$index(slotMap, "attachment");
        t3.push(slotData);
      }
      skins = t2.$index(root, "skins");
      for (t1 = J.get$iterator$ax(skins.get$keys()), t3 = skeletonData.skins, t4 = J.getInterceptor$asx(skins); t1.moveNext$0();) {
        skinName = t1.get$current();
        skinMap = t4.$index(skins, skinName);
        t5 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        skin = new M.Skin(skinName, t5);
        for (t6 = J.get$iterator$ax(skinMap.get$keys()), t7 = J.getInterceptor$asx(skinMap); t6.moveNext$0();) {
          slotName = t6.get$current();
          slotIndex = skeletonData.findSlotIndex$1(slotName);
          slotEntry = t7.$index(skinMap, slotName);
          for (t8 = J.get$iterator$ax(slotEntry.get$keys()), t9 = J.getInterceptor$asx(slotEntry); t8.moveNext$0();) {
            attachmentName = t8.get$current();
            attachment = this.readAttachment$3(skin, attachmentName, t9.$index(slotEntry, attachmentName));
            t5.$indexSet(0, "" + slotIndex + ":" + H.S(attachmentName), attachment);
          }
        }
        t3.push(skin);
        if (J.$eq(skin.name, "default"))
          skeletonData.defaultSkin = skin;
      }
      animations = t2.$index(root, "animations");
      for (t1 = J.get$iterator$ax(animations.get$keys()), t2 = J.getInterceptor$asx(animations); t1.moveNext$0();) {
        animationName = t1.get$current();
        this.readAnimation$3(animationName, t2.$index(animations, animationName), skeletonData);
      }
      return skeletonData;
    },
    readAttachment$3: function(skin, $name, map) {
      var t1, t2, type, attachment, t3, t4, t5, t6, t7, t8, t9, regionScaleX, regionScaleY, localX, localY, localX2, localY2, radians, _cos, _sin, localXCos, localXSin, localYCos, localYSin, localX2Cos, localX2Sin, localY2Cos, localY2Sin;
      t1 = J.getInterceptor$asx(map);
      if (t1.$index(map, "name") != null)
        $name = t1.$index(map, "name");
      t2 = $.get$AttachmentType();
      type = t2.$index(0, t1.$index(map, "type") == null ? "region" : t1.$index(map, "type"));
      t2 = $.get$AttachmentType().$index(0, "region");
      if (type == null ? t2 == null : type === t2) {
        attachment = new M.RegionAttachment(null, null, null, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, null);
        attachment.name = null;
        t2 = Array(8);
        attachment.offset = t2;
        attachment.uvs = Array(8);
        t3 = t1.$index(map, "x") == null ? 0 : t1.$index(map, "x");
        t3 = J.$mul$ns(t3, this.scale);
        attachment.x = t3;
        t4 = t1.$index(map, "y") == null ? 0 : t1.$index(map, "y");
        t4 = J.$mul$ns(t4, this.scale);
        attachment.y = t4;
        t5 = t1.$index(map, "scaleX") == null ? 1 : t1.$index(map, "scaleX");
        attachment.scaleX = t5;
        t6 = t1.$index(map, "scaleY") == null ? 1 : t1.$index(map, "scaleY");
        attachment.scaleY = t6;
        t7 = t1.$index(map, "rotation") == null ? 0 : t1.$index(map, "rotation");
        attachment.rotation = t7;
        t8 = t1.$index(map, "width") == null ? 32 : t1.$index(map, "width");
        t8 = J.$mul$ns(t8, this.scale);
        attachment.width = t8;
        t1 = t1.$index(map, "height") == null ? 32 : t1.$index(map, "height");
        t1 = J.$mul$ns(t1, this.scale);
        attachment.height = t1;
        t9 = J.$div$n(t8, 0);
        if (typeof t5 !== "number")
          return H.iae(t5);
        regionScaleX = t9 * t5;
        t9 = J.$div$n(t1, 0);
        if (typeof t6 !== "number")
          return H.iae(t6);
        regionScaleY = t9 * t6;
        localX = J.$negate$n(t8) / 2 * t5 + 0 * regionScaleX;
        localY = J.$negate$n(t1) / 2 * t6 + 0 * regionScaleY;
        localX2 = localX + 0 * regionScaleX;
        localY2 = localY + 0 * regionScaleY;
        radians = J.$div$n(J.$mul$ns(t7, 3.141592653589793), 180);
        _cos = Math.cos(radians);
        _sin = Math.sin(radians);
        if (typeof t3 !== "number")
          return H.iae(t3);
        localXCos = localX * _cos + t3;
        localXSin = localX * _sin;
        if (typeof t4 !== "number")
          return H.iae(t4);
        localYCos = localY * _cos + t4;
        localYSin = localY * _sin;
        localX2Cos = localX2 * _cos + t3;
        localX2Sin = localX2 * _sin;
        localY2Cos = localY2 * _cos + t4;
        localY2Sin = localY2 * _sin;
        t2[0] = localXCos - localYSin;
        t2[1] = localYCos + localXSin;
        t2[2] = localXCos - localY2Sin;
        t2[3] = localY2Cos + localXSin;
        t2[4] = localX2Cos - localY2Sin;
        t2[5] = localY2Cos + localX2Sin;
        t2[6] = localX2Cos - localYSin;
        t2[7] = localYCos + localX2Sin;
        t1 = new M.AtlasRegion(null, null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, null, null, null, null);
        attachment.rendererObject = t1;
        t1.name = $name;
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t1.scale = t2;
        t2.$indexSet(0, "x", t5);
        t1.scale.$indexSet(0, "y", t6);
        t1.rotation = J.$negate$n(t7) * 3.141592653589793 / 180;
        return attachment;
      }
      throw H.wrapException(P.Exception_Exception("Unknown attachment type: " + H.S(type)));
    },
    readAnimation$3: function($name, map, skeletonData) {
      var timelines, t1, bones, t2, t3, duration, frameIndex, valueMap, boneName, boneIndex, boneMap, t4, t5, timelineName, values, t6, t7, timeline, t8, t9, t10, n, i, frameIndex0, timelineScale, x, y, slots, slotName, slotMap, slotIndex, color, r, g, b, a;
      timelines = [];
      t1 = J.getInterceptor$asx(map);
      bones = t1.$index(map, "bones");
      for (t2 = J.get$iterator$ax(bones.get$keys()), t3 = J.getInterceptor$asx(bones), duration = 0, frameIndex = null, valueMap = null; t2.moveNext$0();) {
        boneName = t2.get$current();
        boneIndex = skeletonData.findBoneIndex$1(boneName);
        if (boneIndex === -1)
          throw H.wrapException(C.JSString_methods.$add("Bone not found: ", boneName));
        boneMap = t3.$index(bones, boneName);
        for (t4 = J.get$iterator$ax(boneMap.get$keys()), t5 = J.getInterceptor$asx(boneMap); t4.moveNext$0();) {
          timelineName = t4.get$current();
          values = t5.$index(boneMap, timelineName);
          t6 = J.getInterceptor(timelineName);
          if (t6.$eq(timelineName, "rotate")) {
            t6 = J.getInterceptor$asx(values);
            t7 = t6.get$length(values);
            timeline = new M.RotateTimeline(null, null, 0);
            t8 = new M.Curves(null);
            t9 = J.getInterceptor$n(t7);
            t10 = J.$mul$ns(t9.$sub(t7, 1), 6);
            if (typeof t10 !== "number")
              return H.iae(t10);
            t10 = Array(t10);
            t10.$builtinTypeInfo = [P.num];
            t8.curves = t10;
            timeline.curves = t8;
            t7 = t9.$mul(t7, 2);
            if (typeof t7 !== "number")
              return H.iae(t7);
            t7 = Array(t7);
            t7.fixed$length = init;
            timeline.frames = t7;
            timeline.boneIndex = boneIndex;
            n = t6.get$length(values);
            if (typeof n !== "number")
              return H.iae(n);
            frameIndex = 0;
            i = 0;
            for (; i < n; ++i) {
              valueMap = t6.$index(values, i);
              t7 = J.getInterceptor$asx(valueMap);
              t8 = t7.$index(valueMap, "time");
              t7 = t7.$index(valueMap, "angle");
              frameIndex0 = frameIndex * 2;
              t9 = timeline.frames;
              t10 = t9.length;
              if (frameIndex0 >= t10)
                return H.ioore(t9, frameIndex0);
              t9[frameIndex0] = t8;
              t8 = frameIndex0 + 1;
              if (t8 >= t10)
                return H.ioore(t9, t8);
              t9[t8] = t7;
              M.SkeletonJson_readCurve(timeline, frameIndex, valueMap);
              ++frameIndex;
            }
            timelines.push(timeline);
            t6 = timeline.frames;
            t7 = t6.length;
            t8 = C.JSNumber_methods.toInt$0(Math.floor(C.JSInt_methods._tdivFast$1(t7, 2) * 2 - 2));
            if (t8 < 0 || t8 >= t7)
              return H.ioore(t6, t8);
            duration = P.max(duration, t6[t8]);
          } else if (t6.$eq(timelineName, "translate") || t6.$eq(timelineName, "scale")) {
            t7 = J.getInterceptor$asx(values);
            if (t6.$eq(timelineName, "scale")) {
              t6 = t7.get$length(values);
              timeline = new M.ScaleTimeline(null, null, 0);
              t7 = new M.Curves(null);
              t8 = J.getInterceptor$n(t6);
              t9 = J.$mul$ns(t8.$sub(t6, 1), 6);
              if (typeof t9 !== "number")
                return H.iae(t9);
              t9 = Array(t9);
              t9.$builtinTypeInfo = [P.num];
              t7.curves = t9;
              timeline.curves = t7;
              t6 = t8.$mul(t6, 3);
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = Array(t6);
              t6.fixed$length = init;
              timeline.frames = t6;
              timelineScale = 1;
            } else {
              t6 = t7.get$length(values);
              timeline = new M.TranslateTimeline(null, null, 0);
              t7 = new M.Curves(null);
              t8 = J.getInterceptor$n(t6);
              t9 = J.$mul$ns(t8.$sub(t6, 1), 6);
              if (typeof t9 !== "number")
                return H.iae(t9);
              t9 = Array(t9);
              t9.$builtinTypeInfo = [P.num];
              t7.curves = t9;
              timeline.curves = t7;
              t6 = t8.$mul(t6, 3);
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = Array(t6);
              t6.fixed$length = init;
              timeline.frames = t6;
              timelineScale = this.scale;
            }
            timeline.boneIndex = boneIndex;
            t6 = J.getInterceptor$asx(values);
            n = t6.get$length(values);
            if (typeof n !== "number")
              return H.iae(n);
            frameIndex = 0;
            i = 0;
            for (; i < n; ++i) {
              valueMap = t6.$index(values, i);
              t7 = J.getInterceptor$asx(valueMap);
              x = J.$mul$ns(t7.$index(valueMap, "x") == null ? 0 : t7.$index(valueMap, "x"), timelineScale);
              y = J.$mul$ns(t7.$index(valueMap, "y") == null ? 0 : t7.$index(valueMap, "y"), timelineScale);
              timeline.setFrame$4(frameIndex, t7.$index(valueMap, "time"), x, y);
              M.SkeletonJson_readCurve(timeline, frameIndex, valueMap);
              ++frameIndex;
            }
            timelines.push(timeline);
            t6 = timeline.frames;
            t7 = C.JSNumber_methods.toInt$0(Math.floor(timeline.getFrameCount$0() * 3 - 3));
            if (t7 < 0 || t7 >= t6.length)
              return H.ioore(t6, t7);
            duration = P.max(duration, t6[t7]);
          } else
            throw H.wrapException(P.Exception_Exception("Invalid timeline type for a bone: " + H.S(timelineName) + "(" + H.S(boneName) + ")"));
        }
      }
      slots = t1.$index(map, "slots");
      if (slots != null)
        for (t1 = J.get$iterator$ax(slots.get$keys()), t2 = J.getInterceptor$asx(slots), values = null; t1.moveNext$0();) {
          slotName = t1.get$current();
          if (slots.containsKey$1(slotName) !== true)
            continue;
          slotMap = t2.$index(slots, slotName);
          slotIndex = skeletonData.findSlotIndex$1(slotName);
          for (t3 = J.get$iterator$ax(slotMap.get$keys()), t4 = J.getInterceptor$asx(slotMap); t3.moveNext$0();) {
            timelineName = t3.get$current();
            if (slotMap.containsKey$1(timelineName) !== true)
              continue;
            values = t4.$index(slotMap, timelineName);
            t5 = J.getInterceptor(timelineName);
            if (t5.$eq(timelineName, "color")) {
              t5 = J.getInterceptor$asx(values);
              t6 = t5.get$length(values);
              timeline = new M.ColorTimeline(0, null, null, 0);
              t7 = new M.Curves(null);
              t8 = J.getInterceptor$n(t6);
              t9 = J.$mul$ns(t8.$sub(t6, 1), 6);
              if (typeof t9 !== "number")
                return H.iae(t9);
              t9 = Array(t9);
              t9.$builtinTypeInfo = [P.num];
              t7.curves = t9;
              timeline.curves = t7;
              t6 = t8.$mul(t6, 5);
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = Array(t6);
              t6.fixed$length = init;
              timeline.frames = t6;
              timeline.slotIndex = slotIndex;
              n = t5.get$length(values);
              if (typeof n !== "number")
                return H.iae(n);
              frameIndex = 0;
              i = 0;
              for (; i < n; ++i) {
                valueMap = t5.$index(values, i);
                t6 = J.getInterceptor$asx(valueMap);
                color = t6.$index(valueMap, "color");
                t7 = J.getInterceptor$asx(color);
                if (!J.$eq(t7.get$length(color), 8))
                  H.throwExpression(C.JSString_methods.$add("Color hexidecimal length must be 8, recieved: ", color));
                r = J.$div$n(H.Primitives_parseInt(J.toRadixString$1$n(H.Primitives_parseInt(t7.substring$2(color, 0, 2), null, null), 16), null, null), 255);
                if (!J.$eq(t7.get$length(color), 8))
                  H.throwExpression(C.JSString_methods.$add("Color hexidecimal length must be 8, recieved: ", color));
                g = J.$div$n(H.Primitives_parseInt(J.toRadixString$1$n(H.Primitives_parseInt(t7.substring$2(color, 2, 2), null, null), 16), null, null), 255);
                if (!J.$eq(t7.get$length(color), 8))
                  H.throwExpression(C.JSString_methods.$add("Color hexidecimal length must be 8, recieved: ", color));
                b = J.$div$n(H.Primitives_parseInt(J.toRadixString$1$n(H.Primitives_parseInt(t7.substring$2(color, 4, 2), null, null), 16), null, null), 255);
                if (!J.$eq(t7.get$length(color), 8))
                  H.throwExpression(C.JSString_methods.$add("Color hexidecimal length must be 8, recieved: ", color));
                a = J.$div$n(H.Primitives_parseInt(J.toRadixString$1$n(H.Primitives_parseInt(t7.substring$2(color, 6, 2), null, null), 16), null, null), 255);
                t6 = t6.$index(valueMap, "time");
                frameIndex0 = frameIndex * 5;
                t7 = timeline.frames;
                t8 = t7.length;
                if (frameIndex0 >= t8)
                  return H.ioore(t7, frameIndex0);
                t7[frameIndex0] = t6;
                t6 = frameIndex0 + 1;
                if (t6 >= t8)
                  return H.ioore(t7, t6);
                t7[t6] = r;
                t6 = frameIndex0 + 2;
                if (t6 >= t8)
                  return H.ioore(t7, t6);
                t7[t6] = g;
                t6 = frameIndex0 + 3;
                if (t6 >= t8)
                  return H.ioore(t7, t6);
                t7[t6] = b;
                t6 = frameIndex0 + 4;
                if (t6 >= t8)
                  return H.ioore(t7, t6);
                t7[t6] = a;
                M.SkeletonJson_readCurve(timeline, frameIndex, valueMap);
                ++frameIndex;
              }
              timelines.push(timeline);
              t5 = timeline.frames;
              t6 = t5.length;
              t7 = t6 / 5 * 5 - 5;
              if (t7 < 0 || t7 >= t6)
                return H.ioore(t5, t7);
              duration = P.max(duration, t5[t7]);
            } else if (t5.$eq(timelineName, "attachment")) {
              t5 = J.getInterceptor$asx(values);
              t6 = t5.get$length(values);
              timeline = new M.AttachmentTimeline(0, null, null, null, 0);
              t7 = new M.Curves(null);
              t8 = J.$mul$ns(J.$sub$n(t6, 1), 6);
              if (typeof t8 !== "number")
                return H.iae(t8);
              t8 = Array(t8);
              t8.$builtinTypeInfo = [P.num];
              t7.curves = t8;
              timeline.curves = t7;
              if (typeof t6 !== "number")
                return H.iae(t6);
              t7 = Array(t6);
              t7.fixed$length = init;
              timeline.frames = t7;
              timeline.attachmentNames = Array(t6);
              timeline.slotIndex = slotIndex;
              n = t5.get$length(values);
              if (typeof n !== "number")
                return H.iae(n);
              frameIndex = 0;
              i = 0;
              for (; i < n; ++i, frameIndex = frameIndex0) {
                valueMap = t5.$index(values, i);
                frameIndex0 = frameIndex + 1;
                t6 = J.getInterceptor$asx(valueMap);
                t7 = t6.$index(valueMap, "time");
                t6 = t6.$index(valueMap, "name");
                t8 = timeline.frames;
                if (frameIndex >= t8.length)
                  return H.ioore(t8, frameIndex);
                t8[frameIndex] = t7;
                t7 = timeline.attachmentNames;
                if (frameIndex >= t7.length)
                  return H.ioore(t7, frameIndex);
                t7[frameIndex] = t6;
              }
              timelines.push(timeline);
              t5 = timeline.frames;
              t6 = t5.length;
              t7 = t6 - 1;
              if (t7 < 0)
                return H.ioore(t5, t7);
              duration = P.max(duration, t5[t7]);
            } else
              throw H.wrapException(C.JSString_methods.$add(C.JSString_methods.$add("Invalid timeline type for a slot: ", timelineName) + " (", slotName) + ")");
          }
        }
      skeletonData.animations.push(new M.Animation($name, timelines, duration));
    },
    static: {SkeletonJson_readCurve: function(timeline, frameIndex, valueMap) {
        var t1, t2, curve, t3, t4, t5, t6, t7, tmp1x, t8, tmp1y, tmp2x, tmp2y, i, curves;
        t1 = J.getInterceptor$asx(valueMap);
        if (t1.$index(valueMap, "curve") == null)
          return;
        if (J.$eq(t1.$index(valueMap, "curve"), "stepped")) {
          t1 = timeline.curves.curves;
          t2 = frameIndex * 6;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          t1[t2] = -1;
        } else if (!!J.getInterceptor(t1.$index(valueMap, "curve")).$isList) {
          curve = t1.$index(valueMap, "curve");
          t1 = timeline.curves;
          t2 = J.getInterceptor$asx(curve);
          t3 = t2.$index(curve, 0);
          t4 = t2.$index(curve, 1);
          t5 = t2.$index(curve, 2);
          t2 = t2.$index(curve, 3);
          t1.toString;
          t6 = J.getInterceptor$n(t3);
          t7 = t6.$negate(t3);
          if (typeof t5 !== "number")
            return H.iae(t5);
          tmp1x = t7 * 2 + t5;
          t7 = J.getInterceptor$n(t4);
          t8 = t7.$negate(t4);
          if (typeof t2 !== "number")
            return H.iae(t2);
          tmp1y = t8 * 2 + t2;
          tmp2x = J.$add$ns(J.$mul$ns(t6.$sub(t3, t5), 3), 1);
          tmp2y = J.$add$ns(J.$mul$ns(t7.$sub(t4, t2), 3), 1);
          i = frameIndex * 6;
          curves = t1.curves;
          t1 = J.getInterceptor$ns(tmp2x);
          t3 = J.$add$ns(J.$add$ns(t6.$mul(t3, 0.30000000000000004), tmp1x * 0.030000000000000006), t1.$mul(tmp2x, 0.0010000000000000002));
          t6 = curves.length;
          if (i >= t6)
            return H.ioore(curves, i);
          curves[i] = t3;
          t3 = i + 1;
          t2 = J.getInterceptor$ns(tmp2y);
          t4 = J.$add$ns(J.$add$ns(t7.$mul(t4, 0.30000000000000004), tmp1y * 0.030000000000000006), t2.$mul(tmp2y, 0.0010000000000000002));
          if (t3 >= t6)
            return H.ioore(curves, t3);
          curves[t3] = t4;
          t4 = i + 2;
          t3 = t1.$mul(tmp2x, 0.006000000000000002);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t4 >= t6)
            return H.ioore(curves, t4);
          curves[t4] = tmp1x * 0.06000000000000001 + t3;
          t3 = i + 3;
          t4 = t2.$mul(tmp2y, 0.006000000000000002);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (t3 >= t6)
            return H.ioore(curves, t3);
          curves[t3] = tmp1y * 0.06000000000000001 + t4;
          t4 = i + 4;
          t1 = t1.$mul(tmp2x, 0.006000000000000002);
          if (t4 >= t6)
            return H.ioore(curves, t4);
          curves[t4] = t1;
          t1 = i + 5;
          t2 = t2.$mul(tmp2y, 0.006000000000000002);
          if (t1 >= t6)
            return H.ioore(curves, t1);
          curves[t1] = t2;
        }
      }}
  },
  AtlasRegion: {
    "^": "Object;page,name,x>,y>,width>,height>,u,v,u2,v2,offsetX,offsetY,originalWidth,originalHeight,index,rotate,splits,pads,scale,rotation"
  },
  FilterBlock: {
    "^": "Object;visible<,renderable,target',_filterArea,filterArea,filterPasses,_glFilterTexture"
  },
  InteractionData: {
    "^": "Object;global<,target',originalEvent"
  },
  InteractionManager: {
    "^": "Object;stage,mouse,touchs,tempPoint,mouseoverEnabled,pool,interactiveItems,interactionDOMElement,target',last,dirty,currentCursorStyle,mouseOut,isCocoonJS",
    collectInteractiveSprite$2: function(displayObject, iParent) {
      var children, t1, i, child;
      children = J.get$children$x(displayObject);
      t1 = J.getInterceptor$asx(children);
      for (i = t1.get$length(children) - 1; i >= 0; --i) {
        child = t1.$index(children, i);
        if (child.get$_interactive()) {
          iParent.set$interactiveChildren(true);
          this.interactiveItems.push(child);
          if (J.get$length$asx(J.get$children$x(child)) > 0)
            this.collectInteractiveSprite$2(child, child);
        } else if (J.get$length$asx(J.get$children$x(child)) > 0)
          this.collectInteractiveSprite$2(child, iParent);
      }
    },
    setTarget$1: function(target) {
      var t1, t2;
      this.target = target;
      if (this.interactionDOMElement == null) {
        t1 = target.view;
        this.removeEvents$0();
        this.interactionDOMElement = t1;
        t2 = J.getInterceptor$x(t1);
        t2.addEventListener$3(t1, "mousemove", this.get$onMouseMove(this), true);
        t2.addEventListener$3(t1, "mousedown", this.get$onMouseDown(this), true);
        t2.addEventListener$3(t1, "mouseout", this.get$onMouseOut(this), true);
        t2.addEventListener$3(t1, "touchstart", this.get$onTouchStart(this), true);
        t2.addEventListener$3(t1, "touchend", this.get$onTouchEnd(this), true);
        t2.addEventListener$3(t1, "touchmove", this.get$onTouchMove(this), true);
        C.Window_methods.addEventListener$3(window, "mouseup", this.get$onMouseUp(this), true);
      }
    },
    removeEvents$0: function() {
      var t1 = this.interactionDOMElement;
      if (t1 == null)
        return;
      J.removeEventListener$3$x(t1, "mousemove", this.get$onMouseMove(this), true);
      J.removeEventListener$3$x(this.interactionDOMElement, "mousedown", this.get$onMouseDown(this), true);
      J.removeEventListener$3$x(this.interactionDOMElement, "mouseout", this.get$onMouseOut(this), true);
      J.removeEventListener$3$x(this.interactionDOMElement, "touchstart", this.get$onTouchStart(this), true);
      J.removeEventListener$3$x(this.interactionDOMElement, "touchend", this.get$onTouchEnd(this), true);
      J.removeEventListener$3$x(this.interactionDOMElement, "touchmove", this.get$onTouchMove(this), true);
      this.interactionDOMElement = null;
      C.Window_methods.removeEventListener$3(window, "mouseup", this.get$onMouseUp(this), true);
    },
    update$0: function() {
      var t1, now, $length, i, cursor, over, t2, item;
      if (this.target == null)
        return;
      t1 = Date.now();
      now = new P.DateTime(t1, false);
      now.DateTime$_now$0();
      if (C.JSNumber_methods._tdivFast$1(P.Duration$(0, 0, 0, t1 - this.last.millisecondsSinceEpoch, 0, 0)._duration, 1000) * 30 / 1000 < 1)
        return;
      this.last = now;
      if (this.dirty === true)
        this.rebuildInteractiveGraph$0();
      $length = this.interactiveItems.length;
      for (t1 = this.mouse, i = 0, cursor = "inherit", over = false; i < $length; ++i) {
        t2 = this.interactiveItems;
        if (i >= t2.length)
          return H.ioore(t2, i);
        item = t2[i];
        item.set$__hit(this.hitTest$2(item, t1));
        t1.target = item;
        if (item.get$__hit() && !over) {
          if (item.get$buttonMode())
            cursor = item.get$defaultCursor();
          if (!!J.getInterceptor(item).$isDisplayObjectContainer && !item.interactiveChildren)
            over = true;
          if (!item.get$__isOver()) {
            item.get$mouseover();
            item.set$__isOver(true);
          }
        } else if (item.get$__isOver()) {
          item.get$mouseout();
          item.set$__isOver(false);
        }
      }
      if (this.currentCursorStyle !== cursor) {
        this.currentCursorStyle = cursor;
        J.set$cursor$x(this.interactionDOMElement.style, cursor);
      }
    },
    rebuildInteractiveGraph$0: function() {
      var t1, len, i, item, t2;
      this.dirty = false;
      t1 = this.interactiveItems;
      len = t1.length;
      for (i = 0; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        item = t1[i];
        if (!!J.getInterceptor(item).$isDisplayObjectContainer)
          item.interactiveChildren = false;
      }
      t1 = [];
      this.interactiveItems = t1;
      t2 = this.stage;
      if (t2._interactive)
        t1.push(t2);
      this.collectInteractiveSprite$2(t2, t2);
    },
    onMouseMove$1: [function(_, $event) {
      var t1, rect, t2, t3, t4, t5, $length, i;
      if (this.dirty === true)
        this.rebuildInteractiveGraph$0();
      t1 = this.mouse;
      t1.originalEvent = $event;
      rect = this.interactionDOMElement.getBoundingClientRect();
      t1 = t1.global;
      t2 = J.getInterceptor$x($event);
      t3 = t2.get$client($event);
      t3 = t3.get$x(t3);
      t4 = J.getInterceptor$x(rect);
      t5 = t4.get$left(rect);
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1.x = (t3 - t5) * J.$div$n(J.get$width$x(this.target), t4.get$width(rect));
      t2 = t2.get$client($event);
      t2 = t2.get$y(t2);
      t5 = t4.get$top(rect);
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1.y = (t2 - t5) * J.$div$n(J.get$height$x(this.target), t4.get$height(rect));
      $length = this.interactiveItems.length;
      for (i = 0; i < $length; ++i) {
        t1 = this.interactiveItems;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].get$mousemove();
      }
    }, "call$1", "get$onMouseMove", 2, 0, 59, 4],
    onMouseDown$1: [function(_, $event) {
      var t1, $length, i, t2, item;
      if (this.dirty === true)
        this.rebuildInteractiveGraph$0();
      t1 = this.mouse;
      t1.originalEvent = $event;
      J.preventDefault$0$x($event);
      $length = this.interactiveItems.length;
      for (i = 0; i < $length; ++i) {
        t2 = this.interactiveItems;
        if (i >= t2.length)
          return H.ioore(t2, i);
        item = t2[i];
        if (item.get$mousedown() != null || J.get$click$x(item) != null) {
          item.set$__mouseIsDown(true);
          item.set$__hit(this.hitTest$2(item, t1));
          if (item.get$__hit()) {
            if (item.get$mousedown() != null)
              item.mousedown$1(t1);
            item.set$__isDown(true);
            if (!!J.getInterceptor(item).$isDisplayObjectContainer && !item.interactiveChildren)
              break;
          }
        }
      }
    }, "call$1", "get$onMouseDown", 2, 0, 60, 4],
    onMouseOut$1: [function(_, $event) {
      var $length, t1, i, t2, item;
      if (this.dirty === true)
        this.rebuildInteractiveGraph$0();
      $length = this.interactiveItems.length;
      J.set$cursor$x(this.interactionDOMElement.style, "inherit");
      for (t1 = this.mouse, i = 0; i < $length; ++i) {
        t2 = this.interactiveItems;
        if (i >= t2.length)
          return H.ioore(t2, i);
        item = t2[i];
        if (item.get$__isOver()) {
          t1.target = item;
          item.get$mouseout();
          item.set$__isOver(false);
        }
      }
      this.mouseOut = true;
      t1 = t1.global;
      t1.x = -10000;
      t1.y = -10000;
    }, "call$1", "get$onMouseOut", 2, 0, 60, 4],
    onMouseUp$1: [function(_, $event) {
      var t1, $length, up, i, t2, item;
      if (this.dirty === true)
        this.rebuildInteractiveGraph$0();
      t1 = this.mouse;
      t1.originalEvent = $event;
      $length = this.interactiveItems.length;
      for (up = false, i = 0; i < $length; ++i) {
        t2 = this.interactiveItems;
        if (i >= t2.length)
          return H.ioore(t2, i);
        item = t2[i];
        item.set$__hit(this.hitTest$2(item, t1));
        if (item.get$__hit() && !up) {
          if (item.get$mouseup() != null)
            item.mouseup$1(t1);
          if (item.get$__isDown()) {
            t2 = J.getInterceptor$x(item);
            if (t2.get$click(item) != null)
              t2.click$1(item, t1);
          }
          if (!!J.getInterceptor(item).$isDisplayObjectContainer && !item.interactiveChildren)
            up = true;
        } else if (item.get$__isDown())
          if (item.get$mouseupoutside() != null)
            item.mouseupoutside$1(t1);
        item.set$__isDown(false);
      }
    }, "call$1", "get$onMouseUp", 2, 0, 59, 4],
    hitTest$2: function(item, interactionData) {
      var global, t1, worldTransform, a00, a01, a02, a10, a11, a12, t2, id, t3, t4, x, y, width, height, t5, x1, y1, $length, i;
      global = interactionData.get$global();
      if (!item.get$worldVisible())
        return false;
      t1 = J.getInterceptor(item);
      worldTransform = item.get$_worldTransform();
      a00 = worldTransform.a;
      a01 = worldTransform.b;
      a02 = worldTransform.tx;
      a10 = worldTransform.c;
      a11 = worldTransform.d;
      a12 = worldTransform.ty;
      t2 = -a10;
      id = 1 / (a00 * a11 + a01 * t2);
      t3 = global.x;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = global.y;
      if (typeof t4 !== "number")
        return H.iae(t4);
      x = a11 * id * t3 + -a01 * id * t4 + (a12 * a01 - a02 * a11) * id;
      y = a00 * id * t4 + t2 * id * t3 + (-a12 * a00 + a02 * a10) * id;
      t3 = J.getInterceptor$x(interactionData);
      t3.set$target(interactionData, item);
      if (item.get$hitArea() != null) {
        t2 = item.get$hitArea();
        t2.get$contains(t2);
        t2 = true;
      } else
        t2 = false;
      if (t2) {
        if (item.get$hitArea().contains$2(0, x, y)) {
          t3.set$target(interactionData, item);
          return true;
        }
        return false;
      } else if (!!t1.$isSprite) {
        width = item.texture.get$frame().width;
        height = item.texture.get$frame().height;
        t2 = J.$negate$n(width);
        t4 = item.anchor;
        t5 = t4.x;
        if (typeof t5 !== "number")
          return H.iae(t5);
        x1 = t2 * t5;
        if (x > x1) {
          if (typeof width !== "number")
            return H.iae(width);
          t2 = x < x1 + width;
        } else
          t2 = false;
        if (t2) {
          t2 = J.$negate$n(height);
          t4 = t4.y;
          if (typeof t4 !== "number")
            return H.iae(t4);
          y1 = t2 * t4;
          if (y > y1) {
            if (typeof height !== "number")
              return H.iae(height);
            t2 = y < y1 + height;
          } else
            t2 = false;
          if (t2) {
            t3.set$target(interactionData, item);
            return true;
          }
        }
      }
      $length = J.get$length$asx(t1.get$children(item));
      for (i = 0; i < $length; ++i)
        if (this.hitTest$2(J.$index$asx(t1.get$children(item), i), interactionData)) {
          t3.set$target(interactionData, item);
          return true;
        }
      return false;
    },
    onTouchMove$1: [function(_, $event) {
      var t1, changedTouches, t2, i, touchEvent, t3, touchData, t4, rect, t5, t6, t7, j;
      if (this.dirty === true)
        this.rebuildInteractiveGraph$0();
      if (this.isCocoonJS) {
        t1 = [];
        C.JSArray_methods.addAll$1(t1, J.map$1$ax(J.$index$asx(P.JsObject_JsObject$fromBrowserObject($event), "changedTouches"), P._convertToJS$closure()));
        changedTouches = H.setRuntimeTypeInfo(new P.JsArray(t1), [null]);
      } else
        changedTouches = J.get$changedTouches$x($event);
      for (t1 = J.getInterceptor$asx(changedTouches), t2 = this.touchs, i = 0; i < t1.get$length(changedTouches); ++i) {
        if (this.isCocoonJS) {
          touchEvent = P.JsObject_JsObject$fromBrowserObject(t1.$index(changedTouches, i));
          t3 = J.getInterceptor$asx(touchEvent);
          touchData = t2.$index(0, t3.$index(touchEvent, "identifier"));
          touchData.originalEvent = $event;
          t4 = touchData.global;
          t4.x = t3.$index(touchEvent, "clientX");
          t4.y = t3.$index(touchEvent, "clientY");
        } else {
          rect = this.interactionDOMElement.getBoundingClientRect();
          touchEvent = t1.$index(changedTouches, i);
          t3 = J.getInterceptor$x(touchEvent);
          touchData = t2.$index(0, t3.get$identifier(touchEvent));
          touchData.originalEvent = $event;
          t4 = touchData.global;
          t5 = t3.get$client(touchEvent);
          t5 = t5.get$x(t5);
          t6 = J.getInterceptor$x(rect);
          t7 = t6.get$left(rect);
          if (typeof t5 !== "number")
            return t5.$sub();
          if (typeof t7 !== "number")
            return H.iae(t7);
          t4.x = (t5 - t7) * J.$div$n(J.get$width$x(this.target), t6.get$width(rect));
          t3 = t3.get$client(touchEvent);
          t3 = t3.get$y(t3);
          t7 = t6.get$top(rect);
          if (typeof t3 !== "number")
            return t3.$sub();
          if (typeof t7 !== "number")
            return H.iae(t7);
          t4.y = (t3 - t7) * J.$div$n(J.get$height$x(this.target), t6.get$height(rect));
        }
        for (j = 0; t3 = this.interactiveItems, j < t3.length; ++j)
          t3[j].get$touchmove();
      }
    }, "call$1", "get$onTouchMove", 2, 0, 17, 4],
    onTouchStart$1: [function(_, $event) {
      var ev, t1, t2, changedTouches, t3, i, touchData, t4, t5, touchEvent, identifier, rect, t6, t7, t8, $length, j, item;
      if (this.dirty === true)
        this.rebuildInteractiveGraph$0();
      if (this.isCocoonJS) {
        ev = P.JsObject_JsObject$fromBrowserObject($event);
        t1 = J.getInterceptor$asx(ev);
        t2 = [];
        C.JSArray_methods.addAll$1(t2, J.map$1$ax(t1.$index(ev, "changedTouches"), P._convertToJS$closure()));
        changedTouches = H.setRuntimeTypeInfo(new P.JsArray(t2), [null]);
        t1.$index(ev, "preventDefault").apply$2$thisArg([], ev);
      } else {
        t1 = J.getInterceptor$x($event);
        changedTouches = t1.get$changedTouches($event);
        t1.preventDefault$0($event);
      }
      for (t1 = J.getInterceptor$asx(changedTouches), t2 = this.touchs, t3 = this.pool, i = 0; i < t1.get$length(changedTouches); ++i) {
        touchData = t3.length > 0 ? t3.pop() : null;
        if (touchData == null) {
          t4 = new M.Point(null, null);
          t4.x = 0;
          t4.y = 0;
          touchData = new M.InteractionData(t4, null, null);
        }
        touchData.originalEvent = $event;
        t4 = this.isCocoonJS;
        t5 = touchData.global;
        if (t4) {
          touchEvent = P.JsObject_JsObject$fromBrowserObject(t1.$index(changedTouches, i));
          t4 = J.getInterceptor$asx(touchEvent);
          identifier = t4.$index(touchEvent, "identifier");
          t5.x = t4.$index(touchEvent, "clientX");
          t5.y = t4.$index(touchEvent, "clientY");
        } else {
          touchEvent = t1.$index(changedTouches, i);
          t4 = J.getInterceptor$x(touchEvent);
          identifier = t4.get$identifier(touchEvent);
          rect = this.interactionDOMElement.getBoundingClientRect();
          t6 = t4.get$client(touchEvent);
          t6 = t6.get$x(t6);
          t7 = J.getInterceptor$x(rect);
          t8 = t7.get$left(rect);
          if (typeof t6 !== "number")
            return t6.$sub();
          if (typeof t8 !== "number")
            return H.iae(t8);
          t5.x = (t6 - t8) * J.$div$n(J.get$width$x(this.target), t7.get$width(rect));
          t4 = t4.get$client(touchEvent);
          t4 = t4.get$y(t4);
          t8 = t7.get$top(rect);
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t8 !== "number")
            return H.iae(t8);
          t5.y = (t4 - t8) * J.$div$n(J.get$height$x(this.target), t7.get$height(rect));
        }
        t2.$indexSet(0, identifier, touchData);
        $length = this.interactiveItems.length;
        for (j = 0; j < $length; ++j) {
          t4 = this.interactiveItems;
          if (j >= t4.length)
            return H.ioore(t4, j);
          item = t4[j];
          if (item.get$touchstart() == null) {
            item.get$tap();
            t4 = false;
          } else
            t4 = true;
          if (t4) {
            item.set$__hit(this.hitTest$2(item, touchData));
            if (item.get$__hit()) {
              if (item.get$touchstart() != null)
                item.touchstart$1(touchData);
              item.set$__isDown(true);
              item.get$__touchData();
              item.get$__touchData().$indexSet(0, identifier, touchData);
              if (!!J.getInterceptor(item).$isDisplayObjectContainer && !item.interactiveChildren)
                break;
            }
          }
        }
      }
    }, "call$1", "get$onTouchStart", 2, 0, 17, 4],
    onTouchEnd$1: [function(_, $event) {
      var t1, changedTouches, t2, t3, i, touchEvent, t4, identifier, touchData, t5, rect, t6, t7, t8, $length, up, j, item;
      if (this.dirty === true)
        this.rebuildInteractiveGraph$0();
      if (this.isCocoonJS) {
        t1 = [];
        C.JSArray_methods.addAll$1(t1, J.map$1$ax(J.$index$asx(P.JsObject_JsObject$fromBrowserObject($event), "changedTouches"), P._convertToJS$closure()));
        changedTouches = H.setRuntimeTypeInfo(new P.JsArray(t1), [null]);
      } else
        changedTouches = J.get$changedTouches$x($event);
      for (t1 = J.getInterceptor$asx(changedTouches), t2 = this.pool, t3 = this.touchs, i = 0; i < t1.get$length(changedTouches); ++i) {
        if (this.isCocoonJS) {
          touchEvent = P.JsObject_JsObject$fromBrowserObject(t1.$index(changedTouches, i));
          t4 = J.getInterceptor$asx(touchEvent);
          identifier = t4.$index(touchEvent, "identifier");
          touchData = t3.$index(0, identifier);
          t5 = touchData.global;
          t5.x = t4.$index(touchEvent, "clientX");
          t5.y = t4.$index(touchEvent, "clientY");
        } else {
          touchEvent = t1.$index(changedTouches, i);
          t4 = J.getInterceptor$x(touchEvent);
          identifier = t4.get$identifier(touchEvent);
          touchData = t3.$index(0, identifier);
          rect = this.interactionDOMElement.getBoundingClientRect();
          t5 = touchData.global;
          t6 = t4.get$client(touchEvent);
          t6 = t6.get$x(t6);
          t7 = J.getInterceptor$x(rect);
          t8 = t7.get$left(rect);
          if (typeof t6 !== "number")
            return t6.$sub();
          if (typeof t8 !== "number")
            return H.iae(t8);
          t5.x = (t6 - t8) * J.$div$n(J.get$width$x(this.target), t7.get$width(rect));
          t4 = t4.get$client(touchEvent);
          t4 = t4.get$y(t4);
          t8 = t7.get$top(rect);
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t8 !== "number")
            return H.iae(t8);
          t5.y = (t4 - t8) * J.$div$n(J.get$height$x(this.target), t7.get$height(rect));
        }
        $length = this.interactiveItems.length;
        for (up = false, j = 0; j < $length; ++j) {
          t4 = this.interactiveItems;
          if (j >= t4.length)
            return H.ioore(t4, j);
          item = t4[j];
          item.get$__touchData();
          if (item.get$__touchData().$index(0, identifier) != null) {
            item.set$__hit(this.hitTest$2(item, item.get$__touchData().$index(0, identifier)));
            touchData.originalEvent = $event;
            if (item.get$touchend() == null) {
              item.get$tap();
              t4 = false;
            } else
              t4 = true;
            if (t4) {
              if (item.get$__hit() && !up) {
                if (item.get$touchend() != null)
                  item.touchend$1(touchData);
                if (item.get$__isDown())
                  item.get$tap();
                if (!!J.getInterceptor(item).$isDisplayObjectContainer && !item.interactiveChildren)
                  up = true;
              } else if (item.get$__isDown())
                if (item.get$touchendoutside() != null)
                  item.touchendoutside$1(touchData);
              item.set$__isDown(false);
            }
            item.get$__touchData().$indexSet(0, identifier, null);
          }
        }
        t2.push(touchData);
        t3.$indexSet(0, identifier, null);
      }
    }, "call$1", "get$onTouchEnd", 2, 0, 17, 4]
  },
  AssetLoader: {
    "^": "EventTarget0;assetURLs,crossorigin,loadCount,onProgress,onComplete,listeners",
    onProgress$1: function($receiver, arg0) {
      return this.onProgress.call$1(arg0);
    },
    onComplete$0: function() {
      return this.onComplete.call$0();
    },
    _getDataType$1: function(str) {
      var data, sepIdx, t1, info;
      if (C.JSString_methods.substring$2(str, 0, 5).toLowerCase() === "data:") {
        data = C.JSString_methods.substring$1(str, 5);
        sepIdx = C.JSString_methods.indexOf$1(data, ",");
        if (sepIdx === -1)
          return;
        t1 = C.JSString_methods.substring$2(data, 0, sepIdx).split(";");
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        info = t1[0];
        if (info == null) {
          J.toLowerCase$0$s(info);
          t1 = false;
        } else
          t1 = true;
        if (t1)
          return "txt";
        t1 = J.split$1$s(info, "/");
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        return J.toLowerCase$0$s(t1.pop());
      }
      return;
    },
    load$0: function(_) {
      var t1, t2, i, fileName, fileType, t3, loader;
      t1 = new M.AssetLoader_load_onLoad(this);
      this.loadCount = 1;
      for (t2 = this.assetURLs, i = 0; i < 1; ++i) {
        fileName = t2[i];
        fileType = this._getDataType$1(fileName);
        if (fileType == null) {
          t3 = J.split$1$s(C.JSArray_methods.removeAt$1(fileName.split("?"), 0), ".");
          if (0 >= t3.length)
            return H.ioore(t3, 0);
          fileType = J.toLowerCase$0$s(t3.pop());
        }
        loader = M.Loader_Loader$loaderByType(fileType, fileName, this.crossorigin);
        loader.addEventListener$2(0, "loaded", t1);
        loader.load$0(0);
      }
    }
  },
  AssetLoader_load_onLoad: {
    "^": "Closure:33;scope_0",
    call$1: [function(evt) {
      var t1, t2, t3;
      t1 = this.scope_0;
      t2 = J.get$content$x(evt);
      --t1.loadCount;
      t3 = new M.PixiEvent(null, null, null);
      t3.type = "onProgress";
      t3.content = t1;
      t3.loader = t2;
      t1.dispatchEvent$1(0, t3);
      if (t1.onProgress != null)
        t1.onProgress$1(0, t2);
      if (t1.loadCount === 0) {
        t2 = new M.PixiEvent(null, null, null);
        t2.type = "onComplete";
        t2.content = t1;
        t1.dispatchEvent$1(0, t2);
        if (t1.onComplete != null)
          t1.onComplete$0();
      }
    }, "call$1", null, 2, 0, null, 61, "call"],
    $isFunction: true
  },
  AtlasLoader: {
    "^": "Loader;atlas,images,currentImageId,url,crossorigin,baseUrl,ajaxRequest,loaded,texture,listeners",
    load$0: function(_) {
      var t1 = new XMLHttpRequest();
      this.ajaxRequest = t1;
      t1 = H.setRuntimeTypeInfo(new W._EventStream(t1, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$onAtlasLoaded()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.open$3$async$x(this.ajaxRequest, "GET", this.url, true);
      this.ajaxRequest.overrideMimeType("application/json");
      this.ajaxRequest.send(null);
    },
    onAtlasLoaded$1: [function(e) {
      var t1, result, lineCount, currentImageId, currentFrame, nameInNextLine, i, text, realSize, j, t2, t3, textureUrl, frameData, t4;
      t1 = this.ajaxRequest;
      if (t1.readyState === 4)
        if (t1.status === 200 || J.indexOf$1$asx(window.location.href, "http") === -1) {
          this.atlas = P.LinkedHashMap_LinkedHashMap$_literal(["meta", P.LinkedHashMap_LinkedHashMap$_literal(["image", []], null, null), "frames", []], null, null);
          result = J.split$1$s(this.ajaxRequest.responseText, $.get$Loader_resultReg());
          for (lineCount = -3, currentImageId = 0, currentFrame = null, nameInNextLine = false, i = 0; i < result.length; ++i) {
            t1 = J.replaceAll$2$s(result[i], $.get$Loader_resultSplit(), "");
            if (i >= result.length)
              return H.ioore(result, i);
            result[i] = t1;
            if (t1 === "")
              nameInNextLine = i + 1;
            if (i >= result.length)
              return H.ioore(result, i);
            if (J.$gt$n(J.get$length$asx(result[i]), 0)) {
              if (nameInNextLine === i) {
                t1 = J.$index$asx(this.atlas.$index(0, "meta"), "image");
                if (i >= result.length)
                  return H.ioore(result, i);
                J.add$1$ax(t1, result[i]);
                currentImageId = J.$sub$n(J.get$length$asx(J.$index$asx(this.atlas.$index(0, "meta"), "image")), 1);
                J.add$1$ax(this.atlas.$index(0, "frames"), P.LinkedHashMap_LinkedHashMap$_empty(null, null));
                lineCount = -3;
              } else if (lineCount > 0) {
                t1 = C.JSInt_methods.$mod(lineCount, 7);
                if (t1 === 1) {
                  if (currentFrame != null)
                    J.$indexSet$ax(J.$index$asx(this.atlas.$index(0, "frames"), currentImageId), currentFrame.get$name(currentFrame), currentFrame);
                  if (i >= result.length)
                    return H.ioore(result, i);
                  currentFrame = P.LinkedHashMap_LinkedHashMap$_literal(["name", result[i], "frame", P.LinkedHashMap_LinkedHashMap$_empty(null, null)], null, null);
                } else {
                  if (i >= result.length)
                    return H.ioore(result, i);
                  text = J.split$1$s(result[i], " ");
                  if (t1 === 3) {
                    t1 = currentFrame.get$frame();
                    if (1 >= text.length)
                      return H.ioore(text, 1);
                    t1.set$x(0, H.Primitives_parseInt(J.replaceAll$2$s(text[1], ",", ""), null, null));
                    t1 = currentFrame.get$frame();
                    if (2 >= text.length)
                      return H.ioore(text, 2);
                    t1.set$y(0, H.Primitives_parseInt(text[2], null, null));
                  } else if (t1 === 4) {
                    t1 = currentFrame.get$frame();
                    if (1 >= text.length)
                      return H.ioore(text, 1);
                    t1.set$w(H.Primitives_parseInt(J.replaceAll$2$s(text[1], ",", ""), null, null));
                    t1 = currentFrame.get$frame();
                    if (2 >= text.length)
                      return H.ioore(text, 2);
                    t1.set$h(H.Primitives_parseInt(text[2], null, null));
                  } else if (t1 === 5) {
                    if (1 >= text.length)
                      return H.ioore(text, 1);
                    t1 = H.Primitives_parseInt(J.replaceAll$2$s(text[1], ",", ""), null, null);
                    if (2 >= text.length)
                      return H.ioore(text, 2);
                    realSize = P.LinkedHashMap_LinkedHashMap$_literal(["x", 0, "y", 0, "w", t1, "h", H.Primitives_parseInt(text[2], null, null)], null, null);
                    if (J.$gt$n(realSize.$index(0, "w"), currentFrame.get$frame().get$w()) || J.$gt$n(realSize.$index(0, "h"), currentFrame.get$frame().get$h())) {
                      currentFrame.set$trimmed(true);
                      currentFrame.set$realSize(realSize);
                    } else
                      currentFrame.set$trimmed(false);
                  }
                }
              }
              ++lineCount;
            }
          }
          if (currentFrame != null)
            J.$indexSet$ax(J.$index$asx(this.atlas.$index(0, "frames"), currentImageId), currentFrame.get$name(currentFrame), currentFrame);
          if (J.$gt$n(J.get$length$asx(J.$index$asx(this.atlas.$index(0, "meta"), "image")), 0)) {
            this.images = [];
            t1 = this.crossorigin;
            j = 0;
            while (true) {
              t2 = J.get$length$asx(J.$index$asx(this.atlas.$index(0, "meta"), "image"));
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (!(j < t2))
                break;
              t2 = this.baseUrl;
              t3 = J.$index$asx(J.$index$asx(this.atlas.$index(0, "meta"), "image"), j);
              if (typeof t2 !== "string")
                return t2.$add();
              textureUrl = J.$add$ns(t2, t3);
              frameData = J.$index$asx(this.atlas.$index(0, "frames"), j);
              t3 = this.images;
              t2 = new M.ImageLoader(null, [], textureUrl, t1, null, null, false, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
              t4 = $.get$Loader_baseReg();
              t2.baseUrl = H.stringReplaceFirstUnchecked(textureUrl, t4, "");
              t2.PIXI$ImageLoader$texture = M.Texture_fromImage(textureUrl, t1, null);
              t3.push(t2);
              for (t2 = J.getInterceptor$ax(frameData), t3 = t2.get$iterator(frameData); t3.moveNext$0(), false;) {
                i = t3.get$current();
                t2.$index(frameData, i).get$frame();
              }
              ++j;
            }
            this.currentImageId = 0;
            for (j = 0; t1 = this.images, t2 = t1.length, j < t2; ++j)
              t1[j].addEventListener$2(0, "loaded", this.get$onLoaded());
            t3 = this.currentImageId;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3].load$0(0);
          } else
            this.onLoaded$0();
        } else {
          t1 = new M.PixiEvent(null, null, null);
          t1.type = "error";
          t1.content = this;
          this.dispatchEvent$1(0, t1);
        }
    }, "call$1", "get$onAtlasLoaded", 2, 0, 33, 3],
    onLoaded$0: [function() {
      var t1, t2, t3;
      t1 = this.images;
      t2 = t1.length;
      t3 = this.currentImageId;
      if (t2 - 1 > t3) {
        t2 = t3 + 1;
        this.currentImageId = t2;
        t1[t2].load$0(0);
      } else {
        this.loaded = true;
        t1 = new M.PixiEvent(null, null, null);
        t1.type = "loaded";
        t1.content = this;
        this.dispatchEvent$1(0, t1);
      }
    }, "call$0", "get$onLoaded", 0, 0, 62]
  },
  BitmapFontLoader: {
    "^": "Loader;PIXI$BitmapFontLoader$baseUrl,url,crossorigin,baseUrl,ajaxRequest,loaded,texture,listeners",
    load$0: function(_) {
      var t1 = new XMLHttpRequest();
      this.ajaxRequest = t1;
      t1 = H.setRuntimeTypeInfo(new W._EventStream(t1, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$onXMLLoaded()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.open$3$async$x(this.ajaxRequest, "GET", this.url, true);
      this.ajaxRequest.send(null);
    },
    onXMLLoaded$1: [function(e) {
      var t1, responseXML, t2, textureUrl, image, data, info, common, letters, i, charCode, t3, t4, t5, t6, t7, kernings, first, second, amount;
      t1 = this.ajaxRequest;
      if (t1.readyState === 4)
        if (t1.status === 200 || J.indexOf$1$asx(window.location.protocol, "http") === -1) {
          responseXML = this.ajaxRequest.responseXML;
          if (responseXML == null)
            throw H.wrapException(P.Exception_Exception("can not load font."));
          t1 = this.PIXI$BitmapFontLoader$baseUrl;
          t2 = responseXML.getElementsByTagName("page");
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          t2 = J.getAttribute$1$x(t2[0], "file");
          if (typeof t1 !== "string")
            return t1.$add();
          textureUrl = J.$add$ns(t1, t2);
          t2 = this.crossorigin;
          image = new M.ImageLoader(null, [], textureUrl, t2, null, null, false, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
          t1 = $.get$Loader_baseReg();
          image.baseUrl = H.stringReplaceFirstUnchecked(textureUrl, t1, "");
          t1 = M.Texture_fromImage(textureUrl, t2, null);
          image.PIXI$ImageLoader$texture = t1;
          this.texture = t1.baseTexture;
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
          data = new M.ChartData(null, null, null, t1);
          t2 = responseXML.getElementsByTagName("info");
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          info = t2[0];
          t2 = responseXML.getElementsByTagName("common");
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          common = t2[0];
          t2 = J.getInterceptor$x(info);
          data.font = t2.getAttribute$1(info, "face");
          data.size = H.Primitives_parseInt(t2.getAttribute$1(info, "size"), null, null);
          data.lineHeight = H.Primitives_parseInt(J.getAttribute$1$x(common, "lineHeight"), null, null);
          letters = responseXML.getElementsByTagName("char");
          for (i = 0; i < letters.length; ++i) {
            charCode = H.Primitives_parseInt(J.getAttribute$1$x(letters[i], "id"), null, null);
            if (i >= letters.length)
              return H.ioore(letters, i);
            t2 = H.Primitives_parseInt(J.getAttribute$1$x(letters[i], "x"), null, null);
            if (i >= letters.length)
              return H.ioore(letters, i);
            t3 = H.Primitives_parseInt(J.getAttribute$1$x(letters[i], "y"), null, null);
            if (i >= letters.length)
              return H.ioore(letters, i);
            t4 = H.Primitives_parseInt(J.getAttribute$1$x(letters[i], "width"), null, null);
            if (i >= letters.length)
              return H.ioore(letters, i);
            t5 = H.Primitives_parseInt(J.getAttribute$1$x(letters[i], "height"), null, null);
            t6 = new M.Char(null, null, null, null, null, null, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
            if (i >= letters.length)
              return H.ioore(letters, i);
            t6.xOffset = H.Primitives_parseInt(J.getAttribute$1$x(letters[i], "xoffset"), null, null);
            if (i >= letters.length)
              return H.ioore(letters, i);
            t6.yOffset = H.Primitives_parseInt(J.getAttribute$1$x(letters[i], "yoffset"), null, null);
            if (i >= letters.length)
              return H.ioore(letters, i);
            t6.xAdvance = H.Primitives_parseInt(J.getAttribute$1$x(letters[i], "xadvance"), null, null);
            t7 = $.get$TextureCache();
            t5 = M.Texture$(this.texture, new M.Rectangle(t2, t3, t4, t5));
            t7.$indexSet(0, charCode, t5);
            t6.texture = t5;
            t1.$indexSet(0, charCode, t6);
          }
          kernings = responseXML.getElementsByTagName("kerning");
          for (i = 0; i < kernings.length; ++i) {
            first = H.Primitives_parseInt(J.getAttribute$1$x(kernings[i], "first"), null, null);
            if (i >= kernings.length)
              return H.ioore(kernings, i);
            second = H.Primitives_parseInt(J.getAttribute$1$x(kernings[i], "second"), null, null);
            if (i >= kernings.length)
              return H.ioore(kernings, i);
            amount = H.Primitives_parseInt(J.getAttribute$1$x(kernings[i], "amount"), null, null);
            t1.$index(0, second).kernings.$indexSet(0, first, amount);
          }
          $.get$BitmapText_fonts().$indexSet(0, data.font, data);
          image.addEventListener$2(0, "loaded", new M.BitmapFontLoader_onXMLLoaded_closure(this));
          image.load$0(0);
        }
    }, "call$1", "get$onXMLLoaded", 2, 0, 33, 3]
  },
  BitmapFontLoader_onXMLLoaded_closure: {
    "^": "Closure:33;scope_0",
    call$1: [function(e) {
      var t1, t2;
      t1 = this.scope_0;
      t2 = new M.PixiEvent(null, null, null);
      t2.type = "loaded";
      t2.content = t1;
      t1.dispatchEvent$1(0, t2);
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  ImageLoader: {
    "^": "Loader;PIXI$ImageLoader$texture,frames,url,crossorigin,baseUrl,ajaxRequest,loaded,texture,listeners",
    load$0: function(_) {
      var t1 = this.PIXI$ImageLoader$texture.baseTexture;
      if (!t1._hasLoaded)
        t1.addEventListener$2(0, "loaded", new M.ImageLoader_load_closure(this));
      else
        this.onLoaded$0();
    },
    onLoaded$0: function() {
      var t1 = new M.PixiEvent(null, null, null);
      t1.type = "loaded";
      t1.content = this;
      this.dispatchEvent$1(0, t1);
    }
  },
  ImageLoader_load_closure: {
    "^": "Closure:33;this_0",
    call$1: [function(e) {
      this.this_0.onLoaded$0();
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  JsonLoader: {
    "^": "Loader;json<,url,crossorigin,baseUrl,ajaxRequest,loaded,texture,listeners",
    load$0: function(_) {
      var t1 = new XMLHttpRequest();
      this.ajaxRequest = t1;
      t1 = H.setRuntimeTypeInfo(new W._EventStream(t1, C.EventStreamProvider_load._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.JsonLoader_load_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.open$3$async$x(this.ajaxRequest, "GET", this.url, true);
      this.ajaxRequest.send();
    },
    onJSONLoaded$0: function() {
      var t1, t2, textureUrl, image, frameData, i, rect, t3, t4, t5, t6, actualSize, realSize, skeletonData;
      t1 = this.ajaxRequest.responseText;
      if (t1 == null) {
        t1 = new M.PixiEvent(null, null, null);
        t1.type = "error";
        t1.content = this;
        this.dispatchEvent$1(0, t1);
        return;
      }
      t1 = C.JsonCodec_null_null.decode$1(t1);
      this.json = t1;
      if (J.$index$asx(t1, "frames") != null) {
        t1 = this.baseUrl;
        t2 = J.$index$asx(J.$index$asx(this.json, "meta"), "image");
        if (typeof t1 !== "string")
          return t1.$add();
        textureUrl = J.$add$ns(t1, t2);
        t2 = this.crossorigin;
        image = new M.ImageLoader(null, [], textureUrl, t2, null, null, false, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
        t1 = $.get$Loader_baseReg();
        image.baseUrl = H.stringReplaceFirstUnchecked(textureUrl, t1, "");
        t1 = M.Texture_fromImage(textureUrl, t2, null);
        image.PIXI$ImageLoader$texture = t1;
        frameData = J.$index$asx(this.json, "frames");
        this.texture = t1.baseTexture;
        image.addEventListener$2(0, "loaded", new M.JsonLoader_onJSONLoaded_closure(this));
        for (t1 = J.get$iterator$ax(frameData.get$keys()), t2 = J.getInterceptor$asx(frameData); t1.moveNext$0();) {
          i = t1.get$current();
          rect = J.$index$asx(t2.$index(frameData, i), "frame");
          if (rect != null) {
            t3 = $.get$TextureCache();
            t4 = this.texture;
            t5 = new M.Rectangle(0, 0, 0, 0);
            t6 = J.getInterceptor$asx(rect);
            t5.x = t6.$index(rect, "x");
            t5.y = t6.$index(rect, "y");
            t5.width = t6.$index(rect, "w");
            t5.height = t6.$index(rect, "h");
            t3.$indexSet(0, i, M.Texture$(t4, t5));
            $.get$TextureCache().$index(0, i).crop = new M.Rectangle(t6.$index(rect, "x"), t6.$index(rect, "y"), t6.$index(rect, "w"), t6.$index(rect, "h"));
            if (J.$index$asx(t2.$index(frameData, i), "trimmed") === true) {
              actualSize = J.$index$asx(t2.$index(frameData, i), "sourceSize");
              realSize = J.$index$asx(t2.$index(frameData, i), "spriteSourceSize");
              t3 = J.getInterceptor$asx(realSize);
              t4 = J.getInterceptor$asx(actualSize);
              $.get$TextureCache().$index(0, i).trim = new M.Rectangle(t3.$index(realSize, "x"), t3.$index(realSize, "y"), t4.$index(actualSize, "w"), t4.$index(actualSize, "h"));
            }
          }
        }
        image.load$0(0);
      } else if (J.$index$asx(this.json, "bones") != null) {
        skeletonData = new M.SkeletonJson(null, 1).readSkeletonData$1(this.json);
        $.get$AnimCache().$indexSet(0, this.url, skeletonData);
        this.onLoaded$0();
      } else
        this.onLoaded$0();
    },
    onLoaded$0: function() {
      this.loaded = true;
      var t1 = new M.PixiEvent(null, null, null);
      t1.type = "loaded";
      t1.content = this;
      this.dispatchEvent$1(0, t1);
    }
  },
  JsonLoader_load_closure: {
    "^": "Closure:33;this_0",
    call$1: [function(e) {
      this.this_0.onJSONLoaded$0();
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  JsonLoader_onJSONLoaded_closure: {
    "^": "Closure:33;this_0",
    call$1: [function(e) {
      this.this_0.onLoaded$0();
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  Loader: {
    "^": "EventTarget0;"
  },
  SpineLoader: {
    "^": "Loader;json<,url,crossorigin,baseUrl,ajaxRequest,loaded,texture,listeners",
    load$0: function(_) {
      var t1, jsonLoader, t2;
      t1 = this.url;
      jsonLoader = new M.JsonLoader(null, t1, this.crossorigin, null, null, false, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
      t2 = $.get$Loader_baseReg();
      jsonLoader.baseUrl = H.stringReplaceFirstUnchecked(t1, t2, "");
      jsonLoader.addEventListener$2(0, "loaded", new M.SpineLoader_load_closure(this));
      jsonLoader.load$0(0);
    }
  },
  SpineLoader_load_closure: {
    "^": "Closure:58;scope_0",
    call$1: [function($event) {
      var t1, t2;
      t1 = this.scope_0;
      t1.json = J.get$content$x($event).get$json();
      t1.loaded = true;
      t2 = new M.PixiEvent(null, null, null);
      t2.type = "loaded";
      t2.content = t1;
      t1.dispatchEvent$1(0, t2);
    }, "call$1", null, 2, 0, null, 4, "call"],
    $isFunction: true
  },
  BlendModes: {
    "^": "Object;value",
    static: {"^": "BlendModes_NORMAL,BlendModes_ADD,BlendModes_MULTIPLY,BlendModes_SCREEN,BlendModes_OVERLAY,BlendModes_DARKEN,BlendModes_LIGHTEN,BlendModes_COLOR_DODGE,BlendModes_COLOR_BURN,BlendModes_HARD_LIGHT,BlendModes_SOFT_LIGHT,BlendModes_DIFFERENCE,BlendModes_EXCLUSION,BlendModes_HUE,BlendModes_SATURATION,BlendModes_COLOR,BlendModes_LUMINOSITY,BlendModes_NONE"}
  },
  scaleModes: {
    "^": "Object;value",
    static: {"^": "scaleModes_DEFAULT,scaleModes_LINEAR,scaleModes_NEAREST"}
  },
  CanvasRenderer: {
    "^": "Renderer;clearBeforeRender,roundPixels,context,refresh,count,type,transparent,antialias,preserveDrawingBuffer,width,height,view,projection,offset,contextLost,options,gl,shaderManager,spriteBatch,maskManager,filterManager,stencilManager,blendModeManager,renderSession,__stage",
    render$1: function(stage) {
      var t1;
      C.JSArray_methods.set$length($.get$texturesToUpdate(), 0);
      C.JSArray_methods.set$length($.get$texturesToDestroy(), 0);
      stage.updateTransform$0();
      J.setTransform$6$x(this.context, 1, 0, 0, 1, 0, 0);
      J.set$globalAlpha$x(this.context, 1);
      t1 = this.transparent;
      if (!t1 && this.clearBeforeRender) {
        J.set$fillStyle$x(this.context, stage.backgroundColorString);
        J.fillRect$4$x(this.context, 0, 0, this.width, this.height);
      } else if (t1 && this.clearBeforeRender)
        J.clearRect$4$x(this.context, 0, 0, this.width, this.height);
      t1 = this.renderSession;
      t1.context = this.context;
      stage._renderCanvas$1(t1);
      if (stage._interactive)
        if (!stage._interactiveEventsAdded) {
          stage._interactiveEventsAdded = true;
          stage.interactionManager.setTarget$1(this);
        }
      t1 = $.get$Texture_frameUpdates();
      if (t1.length > 0)
        C.JSArray_methods.set$length(t1, 0);
    },
    resize$2: function(_, width, height) {
      this.width = width;
      this.height = height;
      J.set$width$x(this.view, width);
      J.set$height$x(this.view, height);
    },
    CanvasRenderer$5: function(width, height, view, transparent, antialias) {
      var t1, t2, t3;
      $.defaultRenderer = this;
      this.type = 1;
      this.width = C.JSInt_methods.toInt$0(width);
      this.height = C.JSInt_methods.toInt$0(height);
      this.transparent = transparent;
      this.antialias = antialias;
      view = W.CanvasElement_CanvasElement(null, null);
      this.view = view;
      J.set$width$x(view, J.toInt$0$n(this.width));
      J.set$height$x(this.view, J.toInt$0$n(this.height));
      if ($.blendModesCanvas == null) {
        $.blendModesCanvas = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t1 = M.canUseNewCanvasBlendModes();
        t2 = $.blendModesCanvas;
        if (t1) {
          t2.$indexSet(0, C.BlendModes_0, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_1, "lighter");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_2, "multiply");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_3, "screen");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_4, "overlay");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_5, "darken");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_6, "lighten");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_7, "color-dodge");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_8, "color-burn");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_9, "hard-light");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_10, "soft-light");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_11, "difference");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_12, "exclusion");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_13, "hue");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_14, "saturation");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_15, "color");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_16, "luminosity");
        } else {
          t2.$indexSet(0, C.BlendModes_0, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_1, "lighter");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_2, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_3, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_4, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_5, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_6, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_7, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_8, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_9, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_10, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_11, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_12, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_13, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_14, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_15, "source-over");
          $.blendModesCanvas.$indexSet(0, C.BlendModes_16, "source-over");
        }
      }
      t1 = J.getContext$2$x(this.view, "2d", P.LinkedHashMap_LinkedHashMap$_literal(["alpha", this.transparent], null, null));
      this.context = t1;
      t2 = new M.CanvasMaskManager();
      this.maskManager = t2;
      t3 = new M.RenderSession(null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null);
      t3.context = t1;
      t3.maskManager = t2;
      t3.scaleMode = null;
      t3.smoothProperty = null;
      this.renderSession = t3;
    }
  },
  CanvasMaskManager: {
    "^": "MaskManager;",
    setContext$1: function(a) {
    }
  },
  MaskManager: {
    "^": "Object;"
  },
  RenderSession: {
    "^": "Object;gl,projection,offset,drawCount,shaderManager,maskManager,filterManager,spriteBatch,blendModeManager,stencilManager,renderer,currentBlendMode,scaleMode,smoothProperty,context,roundPixels"
  },
  Renderer: {
    "^": "Object;width>,height>"
  },
  ComplexPrimitiveShader: {
    "^": "Shader0;gl,program<,fragmentSrc,vertexSrc,attributes:PIXI$ComplexPrimitiveShader$attributes>,uniforms,uSampler,projectionVector,offsetVector,dimensions,uMatrix,tintColor,color,translationMatrix,alpha,aVertexPosition,aPositionCoord,aScale,aRotation,aTextureCoord,colorAttribute,attributes,_UID",
    ComplexPrimitiveShader$1: function(gl) {
      var t1, t2, program;
      t1 = $._UID;
      $._UID = t1 + 1;
      $._UID = t1;
      this.program = null;
      t1 = ["precision mediump float;", "varying vec4 vColor;", "void main(void) {", "   gl_FragColor = vColor;", "}"];
      this.fragmentSrc = t1;
      t2 = ["attribute vec2 aVertexPosition;", "uniform mat3 translationMatrix;", "uniform vec2 projectionVector;", "uniform vec2 offsetVector;", "uniform vec3 tint;", "uniform float alpha;", "uniform vec3 color;", "varying vec4 vColor;", "void main(void) {", "   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);", "   v -= offsetVector.xyx;", "   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);", "   vColor = vec4(color * alpha * tint, alpha);", "}"];
      this.vertexSrc = t2;
      program = M.compileProgram(this.gl, t2, t1);
      J.useProgram$1$x(this.gl, program);
      this.projectionVector = J.getUniformLocation$2$x(this.gl, program, "projectionVector");
      this.offsetVector = J.getUniformLocation$2$x(this.gl, program, "offsetVector");
      this.tintColor = J.getUniformLocation$2$x(this.gl, program, "tint");
      this.color = J.getUniformLocation$2$x(this.gl, program, "color");
      t1 = J.getAttribLocation$2$x(this.gl, program, "aVertexPosition");
      this.aVertexPosition = t1;
      this.PIXI$ComplexPrimitiveShader$attributes = [t1, this.colorAttribute];
      this.translationMatrix = J.getUniformLocation$2$x(this.gl, program, "translationMatrix");
      this.alpha = J.getUniformLocation$2$x(this.gl, program, "alpha");
      this.program = program;
    }
  },
  PixiFastShader: {
    "^": "Shader0;gl,program,fragmentSrc,vertexSrc,textureCount,PIXI$PixiFastShader$uSampler,PIXI$PixiFastShader$projectionVector,PIXI$PixiFastShader$offsetVector,PIXI$PixiFastShader$dimensions,PIXI$PixiFastShader$uMatrix,PIXI$PixiFastShader$aVertexPosition,PIXI$PixiFastShader$aPositionCoord,PIXI$PixiFastShader$aScale,PIXI$PixiFastShader$aRotation,PIXI$PixiFastShader$aTextureCoord,PIXI$PixiFastShader$colorAttribute,PIXI$PixiFastShader$attributes,uniforms,uSampler,projectionVector,offsetVector,dimensions,uMatrix,tintColor,color,translationMatrix,alpha,aVertexPosition,aPositionCoord,aScale,aRotation,aTextureCoord,colorAttribute,attributes,_UID",
    init$0: function() {
      var program, t1;
      program = M.compileProgram(this.gl, this.vertexSrc, this.fragmentSrc);
      J.useProgram$1$x(this.gl, program);
      this.PIXI$PixiFastShader$uSampler = J.getUniformLocation$2$x(this.gl, program, "uSampler");
      this.PIXI$PixiFastShader$projectionVector = J.getUniformLocation$2$x(this.gl, program, "projectionVector");
      this.PIXI$PixiFastShader$offsetVector = J.getUniformLocation$2$x(this.gl, program, "offsetVector");
      this.PIXI$PixiFastShader$dimensions = J.getUniformLocation$2$x(this.gl, program, "dimensions");
      this.PIXI$PixiFastShader$uMatrix = J.getUniformLocation$2$x(this.gl, program, "uMatrix");
      this.PIXI$PixiFastShader$aVertexPosition = J.getAttribLocation$2$x(this.gl, program, "aVertexPosition");
      this.PIXI$PixiFastShader$aPositionCoord = J.getAttribLocation$2$x(this.gl, program, "aPositionCoord");
      this.PIXI$PixiFastShader$aScale = J.getAttribLocation$2$x(this.gl, program, "aScale");
      this.PIXI$PixiFastShader$aRotation = J.getAttribLocation$2$x(this.gl, program, "aRotation");
      this.PIXI$PixiFastShader$aTextureCoord = J.getAttribLocation$2$x(this.gl, program, "aTextureCoord");
      t1 = J.getAttribLocation$2$x(this.gl, program, "aColor");
      this.PIXI$PixiFastShader$colorAttribute = t1;
      if (t1 === -1) {
        this.PIXI$PixiFastShader$colorAttribute = 2;
        t1 = 2;
      }
      this.PIXI$PixiFastShader$attributes = [this.PIXI$PixiFastShader$aVertexPosition, this.PIXI$PixiFastShader$aPositionCoord, this.PIXI$PixiFastShader$aScale, this.PIXI$PixiFastShader$aRotation, this.PIXI$PixiFastShader$aTextureCoord, t1];
      this.program = program;
    }
  },
  PixiShader: {
    "^": "Shader0;gl,program<,fragmentSrc,vertexSrc,textureCount,PIXI$PixiShader$uSampler,PIXI$PixiShader$projectionVector,PIXI$PixiShader$offsetVector,PIXI$PixiShader$dimensions,PIXI$PixiShader$uMatrix,PIXI$PixiShader$aVertexPosition,PIXI$PixiShader$aPositionCoord,PIXI$PixiShader$aScale,PIXI$PixiShader$aRotation,PIXI$PixiShader$aTextureCoord,PIXI$PixiShader$colorAttribute,attributes:PIXI$PixiShader$attributes>,uniforms,uSampler,projectionVector,offsetVector,dimensions,uMatrix,tintColor,color,translationMatrix,alpha,aVertexPosition,aPositionCoord,aScale,aRotation,aTextureCoord,colorAttribute,attributes,_UID",
    init$0: function() {
      var t1, t2, program, key;
      t1 = this.gl;
      t2 = $.get$PixiShader_defaultVertexSrc();
      program = M.compileProgram(t1, t2, this.fragmentSrc);
      J.useProgram$1$x(this.gl, program);
      this.PIXI$PixiShader$uSampler = J.getUniformLocation$2$x(this.gl, program, "uSampler");
      this.PIXI$PixiShader$projectionVector = J.getUniformLocation$2$x(this.gl, program, "projectionVector");
      this.PIXI$PixiShader$offsetVector = J.getUniformLocation$2$x(this.gl, program, "offsetVector");
      this.PIXI$PixiShader$dimensions = J.getUniformLocation$2$x(this.gl, program, "dimensions");
      this.PIXI$PixiShader$aVertexPosition = J.getAttribLocation$2$x(this.gl, program, "aVertexPosition");
      this.PIXI$PixiShader$aTextureCoord = J.getAttribLocation$2$x(this.gl, program, "aTextureCoord");
      t2 = J.getAttribLocation$2$x(this.gl, program, "aColor");
      this.PIXI$PixiShader$colorAttribute = t2;
      if (t2 === -1) {
        this.PIXI$PixiShader$colorAttribute = 2;
        t1 = 2;
      } else
        t1 = t2;
      this.PIXI$PixiShader$attributes = [this.PIXI$PixiShader$aVertexPosition, this.PIXI$PixiShader$aTextureCoord, t1];
      for (t1 = this.uniforms.get$keys()._map, t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();) {
        key = t2._collection$_current;
        C.JSNull_methods.$indexSet(this.uniforms.$index(0, key), "uniformLocation", J.getUniformLocation$2$x(this.gl, program, key));
      }
      this.initUniforms$0();
      this.program = program;
    },
    initUniforms$0: function() {
      var gl, t1, t2, key, uniform, type;
      this.textureCount = 1;
      gl = this.gl;
      for (t1 = this.uniforms.get$keys()._map, t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), t2._cell = t1._first, t1 = J.getInterceptor$x(gl); t2.moveNext$0();) {
        key = t2._collection$_current;
        uniform = this.uniforms.$index(0, key);
        type = C.JSNull_methods.$index(uniform, "type");
        switch (type) {
          case "1f":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform1f(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 1);
            break;
          case "1i":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform1i(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 1);
            break;
          case "2f":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform2f(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 2);
            break;
          case "2i":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform2i(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 2);
            break;
          case "2fv":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform2fv(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 1);
            break;
          case "3f":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform3f(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 3);
            break;
          case "3i":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform3i(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 3);
            break;
          case "3fv":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform3fv(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 1);
            break;
          case "4f":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform4f(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 4);
            break;
          case "4i":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform4i(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 4);
            break;
          case "4fv":
            C.JSNull_methods.$indexSet(uniform, "glFunc", t1.get$uniform4fv(gl));
            C.JSNull_methods.$indexSet(uniform, "glValueLength", 1);
            break;
        }
        C.JSNull_methods.$index(uniform, "glFunc");
      }
    },
    static: {"^": "PixiShader_defaultVertexSrc"}
  },
  PrimitiveShader: {
    "^": "Shader0;gl,program<,fragmentSrc,vertexSrc,PIXI$PrimitiveShader$projectionVector,PIXI$PrimitiveShader$offsetVector,PIXI$PrimitiveShader$tintColor,PIXI$PrimitiveShader$translationMatrix,PIXI$PrimitiveShader$alpha,PIXI$PrimitiveShader$aVertexPosition,PIXI$PrimitiveShader$colorAttribute,attributes:PIXI$PrimitiveShader$attributes>,uniforms,uSampler,projectionVector,offsetVector,dimensions,uMatrix,tintColor,color,translationMatrix,alpha,aVertexPosition,aPositionCoord,aScale,aRotation,aTextureCoord,colorAttribute,attributes,_UID",
    init$0: function() {
      var program, t1;
      program = M.compileProgram(this.gl, this.vertexSrc, this.fragmentSrc);
      J.useProgram$1$x(this.gl, program);
      this.PIXI$PrimitiveShader$projectionVector = J.getUniformLocation$2$x(this.gl, program, "projectionVector");
      this.PIXI$PrimitiveShader$offsetVector = J.getUniformLocation$2$x(this.gl, program, "offsetVector");
      this.PIXI$PrimitiveShader$tintColor = J.getUniformLocation$2$x(this.gl, program, "tint");
      this.PIXI$PrimitiveShader$aVertexPosition = J.getAttribLocation$2$x(this.gl, program, "aVertexPosition");
      t1 = J.getAttribLocation$2$x(this.gl, program, "aColor");
      this.PIXI$PrimitiveShader$colorAttribute = t1;
      this.PIXI$PrimitiveShader$attributes = [this.PIXI$PrimitiveShader$aVertexPosition, t1];
      this.PIXI$PrimitiveShader$translationMatrix = J.getUniformLocation$2$x(this.gl, program, "translationMatrix");
      this.PIXI$PrimitiveShader$alpha = J.getUniformLocation$2$x(this.gl, program, "alpha");
      this.program = program;
    }
  },
  Shader0: {
    "^": "Object;"
  },
  StripShader: {
    "^": "Shader0;program,gl,fragmentSrc,vertexSrc,PIXI$StripShader$uSampler,PIXI$StripShader$projectionVector,PIXI$StripShader$offsetVector,PIXI$StripShader$dimensions,PIXI$StripShader$uMatrix,PIXI$StripShader$translationMatrix,PIXI$StripShader$alpha,PIXI$StripShader$aVertexPosition,PIXI$StripShader$aPositionCoord,PIXI$StripShader$aScale,PIXI$StripShader$aRotation,PIXI$StripShader$aTextureCoord,PIXI$StripShader$colorAttribute,PIXI$StripShader$attributes,uSampler,projectionVector,offsetVector,dimensions,uMatrix,tintColor,color,translationMatrix,alpha,aVertexPosition,aPositionCoord,aScale,aRotation,aTextureCoord,colorAttribute,attributes,_UID",
    init$0: function() {
      var program, t1;
      program = M.compileProgram(this.gl, this.vertexSrc, this.fragmentSrc);
      J.useProgram$1$x(this.gl, program);
      this.PIXI$StripShader$uSampler = J.getUniformLocation$2$x(this.gl, program, "uSampler");
      this.PIXI$StripShader$projectionVector = J.getUniformLocation$2$x(this.gl, program, "projectionVector");
      this.PIXI$StripShader$offsetVector = J.getUniformLocation$2$x(this.gl, program, "offsetVector");
      this.PIXI$StripShader$colorAttribute = J.getAttribLocation$2$x(this.gl, program, "aColor");
      this.PIXI$StripShader$aVertexPosition = J.getAttribLocation$2$x(this.gl, program, "aVertexPosition");
      t1 = J.getAttribLocation$2$x(this.gl, program, "aTextureCoord");
      this.PIXI$StripShader$aTextureCoord = t1;
      this.PIXI$StripShader$attributes = [this.PIXI$StripShader$aVertexPosition, t1];
      this.PIXI$StripShader$translationMatrix = J.getUniformLocation$2$x(this.gl, program, "translationMatrix");
      this.PIXI$StripShader$alpha = J.getUniformLocation$2$x(this.gl, program, "alpha");
      this.program = program;
    }
  },
  WebGLBlendModeManager: {
    "^": "Object;gl,currentBlendMode",
    setBlendMode$1: function(blendMode) {
      var blendModeWebGL, t1;
      if (this.currentBlendMode === blendMode)
        return false;
      this.currentBlendMode = blendMode;
      blendModeWebGL = $.blendModesWebGL.$index(0, blendMode);
      t1 = J.getInterceptor$asx(blendModeWebGL);
      J.blendFunc$2$x(this.gl, t1.$index(blendModeWebGL, 0), t1.$index(blendModeWebGL, 1));
      return true;
    }
  },
  WebGLFilterManager: {
    "^": "Object;gl,transparent,filterStack,offsetX,offsetY,texturePool,renderSession,width>,height>,defaultShader,vertexArray,uvArray,colorBuffer,indexBuffer,vertexBuffer,uvBuffer,buffer,colorArray",
    setContext$1: function(gl) {
      var t1;
      this.gl = gl;
      this.texturePool = [];
      t1 = J.getInterceptor$x(gl);
      this.vertexBuffer = t1.createBuffer$0(gl);
      this.uvBuffer = t1.createBuffer$0(gl);
      this.colorBuffer = t1.createBuffer$0(gl);
      this.indexBuffer = t1.createBuffer$0(gl);
      this.vertexArray = new Float32Array(H._ensureNativeList([0, 0, 1, 0, 0, 1, 1, 1]));
      t1.bindBuffer$2(gl, 34962, this.vertexBuffer);
      t1.bufferData$3(gl, 34962, this.vertexArray, 35044);
      this.uvArray = new Float32Array(H._ensureNativeList([0, 0, 1, 0, 0, 1, 1, 1]));
      t1.bindBuffer$2(gl, 34962, this.uvBuffer);
      t1.bufferData$3(gl, 34962, this.uvArray, 35044);
      this.colorArray = new Float32Array(H._ensureNativeList([1, 16777215, 1, 16777215, 1, 16777215, 1, 16777215]));
      t1.bindBuffer$2(gl, 34962, this.colorBuffer);
      t1.bufferData$3(gl, 34962, this.colorArray, 35044);
      t1.bindBuffer$2(gl, 34963, this.indexBuffer);
      t1.bufferData$3(gl, 34963, new Uint16Array(H._ensureNativeList([0, 1, 2, 1, 3, 2])), 35044);
    }
  },
  WebGLMaskManager: {
    "^": "MaskManager;maskStack,maskPosition,gl,reverse,count",
    setContext$1: function(gl) {
      this.gl = gl;
    },
    WebGLMaskManager$1: function(gl) {
      this.gl = gl;
      this.reverse = false;
      this.count = 0;
    }
  },
  WebGLShaderManager: {
    "^": "Object;gl,maxAttibs,_currentId,attribState,tempAttribState,shaderMap,primitiveShader,defaultShader,fastShader,currentShader,complexPrimativeShader,stripShader",
    setContext$1: function(gl) {
      var t1, t2;
      this.gl = gl;
      t1 = new M.PrimitiveShader(gl, null, ["precision mediump float;", "varying vec4 vColor;", "void main(void) {", "   gl_FragColor = vColor;", "}"], ["attribute vec2 aVertexPosition;", "attribute vec4 aColor;", "uniform mat3 translationMatrix;", "uniform vec2 projectionVector;", "uniform vec2 offsetVector;", "uniform float alpha;", "uniform vec3 tint;", "varying vec4 vColor;", "void main(void) {", "   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);", "   v -= offsetVector.xyx;", "   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);", "   vColor = aColor * vec4(tint * alpha, alpha);", "}"], null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      t2 = $._UID;
      $._UID = t2 + 1;
      t1._UID = t2;
      t1.init$0();
      this.primitiveShader = t1;
      t1 = new M.ComplexPrimitiveShader(gl, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      t1.ComplexPrimitiveShader$1(gl);
      this.complexPrimativeShader = t1;
      t1 = new M.PixiShader(gl, null, ["precision lowp float;", "varying vec2 vTextureCoord;", "varying vec4 vColor;", "uniform sampler2D uSampler;", "void main(void) {", "   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;", "}"], null, 0, null, null, null, null, null, null, null, null, null, null, null, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      t2 = $._UID;
      $._UID = t2 + 1;
      t1._UID = t2;
      t1.init$0();
      this.defaultShader = t1;
      t1 = new M.PixiFastShader(gl, null, ["precision lowp float;", "varying vec2 vTextureCoord;", "varying float vColor;", "uniform sampler2D uSampler;", "void main(void) {", "   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;", "}"], ["attribute vec2 aVertexPosition;", "attribute vec2 aPositionCoord;", "attribute vec2 aScale;", "attribute float aRotation;", "attribute vec2 aTextureCoord;", "attribute float aColor;", "uniform vec2 projectionVector;", "uniform vec2 offsetVector;", "uniform mat3 uMatrix;", "varying vec2 vTextureCoord;", "varying float vColor;", "const vec2 center = vec2(-1.0, 1.0);", "void main(void) {", "   vec2 v;", "   vec2 sv = aVertexPosition * aScale;", "   v.x = (sv.x) * cos(aRotation) - (sv.y) * sin(aRotation);", "   v.y = (sv.x) * sin(aRotation) + (sv.y) * cos(aRotation);", "   v = ( uMatrix * vec3(v + aPositionCoord , 1.0) ).xy ;", "   gl_Position = vec4( ( v / projectionVector) + center , 0.0, 1.0);", "   vTextureCoord = aTextureCoord;", "   vColor = aColor;", "}"], 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      t2 = $._UID;
      $._UID = t2 + 1;
      t1._UID = t2;
      t1.init$0();
      this.fastShader = t1;
      t1 = new M.StripShader(null, gl, ["precision mediump float;", "varying vec2 vTextureCoord;", "uniform float alpha;", "uniform sampler2D uSampler;", "void main(void) {", "   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y));", "}"], ["attribute vec2 aVertexPosition;", "attribute vec2 aTextureCoord;", "uniform mat3 translationMatrix;", "uniform vec2 projectionVector;", "uniform vec2 offsetVector;", "varying vec2 vTextureCoord;", "void main(void) {", "   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);", "   v -= offsetVector.xyx;", "   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);", "   vTextureCoord = aTextureCoord;", "}"], null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      t2 = $._UID;
      $._UID = t2 + 1;
      t1._UID = t2;
      t1.init$0();
      this.stripShader = t1;
      this.setShader$1(this.defaultShader);
    },
    setAttribs$1: function(attribs) {
      var t1, t2, key, i, attribId;
      for (t1 = this.tempAttribState.get$keys()._map, t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();) {
        key = t2._collection$_current;
        this.tempAttribState.$indexSet(0, key, false);
      }
      for (i = 0; i < attribs.length; ++i) {
        attribId = attribs[i];
        this.tempAttribState.$indexSet(0, attribId, true);
      }
      for (i = 0; t1 = this.attribState, i < t1.get$length(t1); ++i) {
        t1 = this.attribState.$index(0, i);
        t2 = this.tempAttribState.$index(0, i);
        if (t1 == null ? t2 != null : t1 !== t2) {
          this.attribState.$indexSet(0, i, this.tempAttribState.$index(0, i));
          t1 = this.tempAttribState.$index(0, i);
          t2 = this.gl;
          if (t1 === true)
            J.enableVertexAttribArray$1$x(t2, i);
          else
            J.disableVertexAttribArray$1$x(t2, i);
        }
      }
    },
    setShader$1: function(shader) {
      var t1, t2;
      t1 = this._currentId;
      t2 = shader._UID;
      if (t1 == null ? t2 == null : t1 === t2)
        return false;
      this._currentId = t2;
      this.currentShader = shader;
      J.useProgram$1$x(this.gl, shader.get$program());
      this.setAttribs$1(shader.get$attributes(shader));
      return true;
    },
    WebGLShaderManager$1: function(gl) {
      var t1, i;
      for (t1 = this.maxAttibs, i = 0; i < t1; ++i)
        this.attribState.$indexSet(0, i, false);
      this.setContext$1(gl);
    },
    static: {WebGLShaderManager$: function(gl) {
        var t1 = new M.WebGLShaderManager(null, 10, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null), P.LinkedHashMap_LinkedHashMap$_empty(null, null), P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, null, null, null, null, null);
        t1.WebGLShaderManager$1(gl);
        return t1;
      }}
  },
  WebGLSpriteBatch: {
    "^": "Object;gl,vertSize,maxSize,size,numVerts,numIndices,vertices,indices,vertexBuffer,indexBuffer,lastIndexCount,drawing,currentBatchSize,currentBaseTexture,renderSession,shader,matrix,dirty,textures,blendModes",
    setContext$1: function(gl) {
      var t1, t2;
      this.gl = gl;
      t1 = J.getInterceptor$x(gl);
      this.vertexBuffer = t1.createBuffer$0(gl);
      t2 = t1.createBuffer$0(gl);
      this.indexBuffer = t2;
      t1.bindBuffer$2(gl, 34963, t2);
      t1.bufferData$3(gl, 34963, this.indices, 35044);
      t1.bindBuffer$2(gl, 34962, this.vertexBuffer);
      t1.bufferData$3(gl, 34962, this.vertices, 35048);
    },
    render$1: function(sprite) {
      var texture, uvs, alpha, tint, verticies, t1, aX, aY, trim, w1, w0, h1, h0, index, worldTransform, a, b, c, d, tx, ty, index0, t2, t3, t4, t5, t6, t7;
      texture = sprite.texture;
      if (this.currentBatchSize >= this.size) {
        this.flush$0(0);
        this.currentBaseTexture = texture.get$baseTexture();
      }
      uvs = texture.get$_uvs();
      if (uvs == null)
        return;
      alpha = sprite._worldAlpha;
      tint = sprite.tint;
      verticies = this.vertices;
      t1 = sprite.anchor;
      aX = t1.x;
      aY = t1.y;
      t1 = J.getInterceptor$s(texture);
      if (t1.get$trim(texture) != null) {
        trim = t1.get$trim(texture);
        w1 = J.$sub$n(trim.get$x(trim), J.$mul$ns(aX, trim.get$width(trim)));
        w0 = J.$add$ns(w1, texture.get$crop().width);
        h1 = J.$sub$n(trim.get$y(trim), J.$mul$ns(aY, trim.get$height(trim)));
        h0 = J.$add$ns(h1, texture.get$crop().height);
      } else {
        t1 = texture.get$frame().width;
        if (typeof aX !== "number")
          return H.iae(aX);
        w0 = J.$mul$ns(t1, 1 - aX);
        w1 = J.$mul$ns(texture.get$frame().width, -aX);
        t1 = texture.get$frame().height;
        if (typeof aY !== "number")
          return H.iae(aY);
        h0 = J.$mul$ns(t1, 1 - aY);
        h1 = J.$mul$ns(texture.get$frame().height, -aY);
      }
      t1 = this.currentBatchSize;
      index = t1 * 4 * this.vertSize;
      worldTransform = sprite._worldTransform;
      a = worldTransform.a;
      b = worldTransform.c;
      c = worldTransform.b;
      d = worldTransform.d;
      tx = worldTransform.tx;
      ty = worldTransform.ty;
      index0 = index + 1;
      if (typeof w1 !== "number")
        return H.iae(w1);
      t2 = a * w1;
      if (typeof h1 !== "number")
        return H.iae(h1);
      t3 = c * h1;
      t4 = verticies.length;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = t2 + t3 + tx;
      index = index0 + 1;
      t5 = d * h1;
      t6 = b * w1;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = t5 + t6 + ty;
      index0 = index + 1;
      t7 = uvs.x0;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = t7;
      index = index0 + 1;
      t7 = uvs.y0;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = t7;
      index0 = index + 1;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = alpha;
      index = index0 + 1;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = tint;
      index0 = index + 1;
      if (typeof w0 !== "number")
        return H.iae(w0);
      t7 = a * w0;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = t7 + t3 + tx;
      index = index0 + 1;
      t3 = b * w0;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = t5 + t3 + ty;
      index0 = index + 1;
      t5 = uvs.x1;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = t5;
      index = index0 + 1;
      t5 = uvs.y1;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = t5;
      index0 = index + 1;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = alpha;
      index = index0 + 1;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = tint;
      index0 = index + 1;
      if (typeof h0 !== "number")
        return H.iae(h0);
      t5 = c * h0;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = t7 + t5 + tx;
      index = index0 + 1;
      t7 = d * h0;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = t7 + t3 + ty;
      index0 = index + 1;
      t3 = uvs.x2;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = t3;
      index = index0 + 1;
      t3 = uvs.y2;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = t3;
      index0 = index + 1;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = alpha;
      index = index0 + 1;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = tint;
      index0 = index + 1;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = t2 + t5 + tx;
      index = index0 + 1;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = t7 + t6 + ty;
      index0 = index + 1;
      t6 = uvs.x3;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = t6;
      index = index0 + 1;
      t6 = uvs.y3;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = t6;
      index0 = index + 1;
      if (index >= t4)
        return H.ioore(verticies, index);
      verticies[index] = alpha;
      if (index0 >= t4)
        return H.ioore(verticies, index0);
      verticies[index0] = tint;
      t2 = this.textures;
      t3 = t2.length;
      t4 = sprite.texture;
      if (t3 <= t1)
        t2.push(t4.get$baseTexture());
      else {
        t3 = t4.get$baseTexture();
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        t2[t1] = t3;
      }
      t1 = this.blendModes;
      t2 = t1.length;
      t3 = this.currentBatchSize;
      t4 = sprite.blendMode;
      if (t2 <= t3)
        t1.push(t4);
      else
        t1[t3] = t4;
      ++this.currentBatchSize;
    },
    flush$0: function(_) {
      var t1, projection, stride, t2, t3, view, currentBlendMode, j, batchSize, start, currentBaseTexture, i, nextTexture, nextBlendMode;
      if (this.currentBatchSize === 0)
        return;
      t1 = this.renderSession.shaderManager;
      t1.setShader$1(t1.defaultShader);
      if (this.dirty) {
        this.dirty = false;
        J.activeTexture$1$x(this.gl, 33984);
        J.bindBuffer$2$x(this.gl, 34962, this.vertexBuffer);
        J.bindBuffer$2$x(this.gl, 34963, this.indexBuffer);
        projection = this.renderSession.projection;
        J.uniform2f$3$x(this.gl, this.shader.PIXI$PixiShader$projectionVector, projection.x, projection.y);
        stride = this.vertSize * 4;
        J.vertexAttribPointer$6$x(this.gl, this.shader.PIXI$PixiShader$aVertexPosition, 2, 5126, false, stride, 0);
        J.vertexAttribPointer$6$x(this.gl, this.shader.PIXI$PixiShader$aTextureCoord, 2, 5126, false, stride, 8);
        J.vertexAttribPointer$6$x(this.gl, this.shader.PIXI$PixiShader$colorAttribute, 2, 5126, false, stride, 16);
      }
      t1 = this.currentBatchSize;
      t2 = this.size;
      t3 = this.vertices;
      if (t1 > t2 * 0.5)
        J.bufferSubData$3$x(this.gl, 34962, 0, t3);
      else {
        view = new Float32Array(t3.subarray(0, J._checkSublistArguments$3$x(t3, 0, t1 * 4 * this.vertSize, t3.length)));
        J.bufferSubData$3$x(this.gl, 34962, 0, view);
      }
      currentBlendMode = this.renderSession.blendModeManager.currentBlendMode;
      for (j = this.currentBatchSize, batchSize = 0, start = 0, currentBaseTexture = null, i = 0; i < j; ++i) {
        t1 = this.textures;
        if (i >= t1.length)
          return H.ioore(t1, i);
        nextTexture = t1[i];
        t1 = this.blendModes;
        if (i >= t1.length)
          return H.ioore(t1, i);
        nextBlendMode = t1[i];
        if ((currentBaseTexture == null ? nextTexture != null : currentBaseTexture !== nextTexture) || currentBlendMode !== nextBlendMode) {
          this.renderBatch$3(currentBaseTexture, batchSize, start);
          this.renderSession.blendModeManager.setBlendMode$1(nextBlendMode);
          currentBlendMode = nextBlendMode;
          currentBaseTexture = nextTexture;
          start = i;
          batchSize = 0;
        }
        ++batchSize;
      }
      this.renderBatch$3(currentBaseTexture, batchSize, start);
      this.currentBatchSize = 0;
    },
    renderBatch$3: function(texture, size, startIndex) {
      var t1, t2;
      if (size === 0)
        return;
      t1 = texture._glTextures.$index(0, this.gl);
      t2 = this.gl;
      if (t1 != null)
        J.bindTexture$2$x(t2, 3553, texture._glTextures.$index(0, t2));
      else
        J.bindTexture$2$x(t2, 3553, M.createWebGLTexture(texture, t2));
      if (texture._dirty.$index(0, this.gl) === true)
        M.updateWebGLTexture(this.currentBaseTexture, this.gl);
      J.drawElements$4$x(this.gl, 4, size * 6, 5123, startIndex * 6 * 2);
      ++this.renderSession.drawCount;
    },
    WebGLSpriteBatch$1: function(gl) {
      var t1, t2, i, j, t3, t4, t5;
      t1 = this.maxSize;
      this.size = t1;
      t2 = t1 * 4 * this.vertSize;
      this.numVerts = t2;
      this.numIndices = t1 * 6;
      this.vertices = new Float32Array(t2);
      t1 = this.numIndices;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      t1 = new Uint16Array(t1);
      this.indices = t1;
      t2 = this.numIndices;
      if (typeof t2 !== "number")
        return H.iae(t2);
      i = 0;
      j = 0;
      for (; i < t2; i += 6, j += 4) {
        t3 = t1.length;
        if (i >= t3)
          return H.ioore(t1, i);
        t1[i] = j;
        t4 = i + 1;
        if (t4 >= t3)
          return H.ioore(t1, t4);
        t1[t4] = j + 1;
        t4 = i + 2;
        t5 = j + 2;
        if (t4 >= t3)
          return H.ioore(t1, t4);
        t1[t4] = t5;
        t4 = i + 3;
        if (t4 >= t3)
          return H.ioore(t1, t4);
        t1[t4] = j;
        t4 = i + 4;
        if (t4 >= t3)
          return H.ioore(t1, t4);
        t1[t4] = t5;
        t5 = i + 5;
        if (t5 >= t3)
          return H.ioore(t1, t5);
        t1[t5] = j + 3;
      }
      this.setContext$1(gl);
      this.textures = [];
      this.blendModes = [];
      this.dirty = true;
    },
    static: {WebGLSpriteBatch$: function(gl) {
        var t1 = new M.WebGLSpriteBatch(null, 6, 6000, null, null, null, null, null, null, null, 0, false, 0, null, null, null, null, false, null, null);
        t1.WebGLSpriteBatch$1(gl);
        return t1;
      }}
  },
  WebGLStencilManager: {
    "^": "Object;gl,stencilStack,reverse,count,maskStack,_currentGraphics",
    WebGLStencilManager$1: function(gl) {
      this.stencilStack = [];
      this.gl = this.gl;
      this.reverse = true;
      this.count = 0;
    }
  },
  WebGLRenderer: {
    "^": "Renderer;type,transparent,antialias,preserveDrawingBuffer,width,height,view,projection,offset,contextLost,options,gl,shaderManager,spriteBatch,maskManager,filterManager,stencilManager,blendModeManager,renderSession,__stage",
    render$1: function(stage) {
      var t1, t2, t3, t4, t5;
      if (this.contextLost)
        return;
      t1 = this.__stage;
      if (t1 == null ? stage != null : t1 !== stage) {
        if (stage._interactive)
          stage.interactionManager.removeEvents$0();
        this.__stage = stage;
      }
      M.WebGLRenderer_updateTextures(this.gl);
      stage.updateTransform$0();
      J.viewport$4$x(this.gl, 0, 0, this.width, this.height);
      J.bindFramebuffer$2$x(this.gl, 36160, null);
      t1 = this.transparent;
      t2 = this.gl;
      if (t1)
        J.clearColor$4$x(t2, 0, 0, 0, 0);
      else {
        t1 = stage.backgroundColorSplit;
        t3 = t1.length;
        if (0 >= t3)
          return H.ioore(t1, 0);
        t4 = t1[0];
        if (1 >= t3)
          return H.ioore(t1, 1);
        t5 = t1[1];
        if (2 >= t3)
          return H.ioore(t1, 2);
        J.clearColor$4$x(t2, t4, t5, t1[2], 1);
      }
      J.clear$1$ax(this.gl, 16384);
      t1 = this.projection;
      this.renderSession.blendModeManager.setBlendMode$1(C.BlendModes_0);
      t2 = this.renderSession;
      t2.drawCount = 0;
      t2.currentBlendMode = C.BlendModes_99999;
      t2.projection = t1;
      t2.offset = this.offset;
      t3 = this.spriteBatch;
      t3.renderSession = t2;
      t4 = t2.shaderManager.defaultShader;
      t3.shader = t4;
      t3.dirty = true;
      t3 = this.filterManager;
      t3.renderSession = t2;
      t3.defaultShader = t4;
      t3.width = J.toInt$0$n(J.$mul$ns(t1.x, 2));
      t3.height = C.JSNumber_methods.toInt$0(J.$negate$n(t1.y) * 2);
      t3.buffer = null;
      stage._renderWebGL$1(this.renderSession);
      this.spriteBatch.flush$0(0);
      if (stage._interactive) {
        if (!stage._interactiveEventsAdded) {
          stage._interactiveEventsAdded = true;
          stage.interactionManager.setTarget$1(this);
        }
      } else if (stage._interactiveEventsAdded) {
        stage._interactiveEventsAdded = false;
        stage.interactionManager.setTarget$1(this);
      }
    },
    resize$2: function(_, width, height) {
      var t1, t2;
      window;
      if (typeof console != "undefined")
        console.log(width);
      this.width = width;
      this.height = height;
      J.set$width$x(this.view, width);
      J.set$height$x(this.view, height);
      t1 = this.gl;
      if (t1 != null)
        J.viewport$4$x(t1, 0, 0, this.width, this.height);
      t1 = this.projection;
      t2 = this.width;
      if (typeof t2 !== "number")
        return t2.$div();
      t1.x = t2 / 2;
      t2 = this.height;
      if (typeof t2 !== "number")
        return t2.$negate();
      t1.y = -t2 / 2;
    },
    handleContextLost$1: [function($event) {
      J.preventDefault$0$x($event);
      this.contextLost = true;
    }, "call$1", "get$handleContextLost", 2, 0, 33, 4],
    handleContextRestored$1: [function($event) {
      var exception, gl, t1, t2, key;
      try {
        this.gl = J.getContext$2$x(this.view, "experimental-webgl", this.options);
      } catch (exception) {
        H.unwrapException(exception);
        try {
          this.gl = J.getContext$2$x(this.view, "webgl", this.options);
        } catch (exception) {
          H.unwrapException(exception);
          throw H.wrapException(P.Exception_Exception(" This browser does not support webGL. Try using the canvas renderer this"));
        }

      }

      gl = this.gl;
      this.shaderManager.setContext$1(gl);
      this.spriteBatch.setContext$1(gl);
      this.maskManager.setContext$1(gl);
      this.filterManager.setContext$1(gl);
      this.renderSession.gl = this.gl;
      t1 = J.getInterceptor$x(gl);
      t1.disable$1(gl, 2929);
      t1.disable$1(gl, 2884);
      t1.enable$1(gl, 3042);
      t1.colorMask$4(gl, true, true, true, this.transparent);
      J.viewport$4$x(this.gl, 0, 0, this.width, this.height);
      for (t1 = $.get$TextureCache().get$keys()._map, t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();) {
        key = t2._collection$_current;
        $.get$TextureCache().$index(0, key).baseTexture._glTextures = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      }
      this.contextLost = false;
    }, "call$1", "get$handleContextRestored", 2, 0, 33, 4],
    WebGLRenderer$6: function(width, height, view, transparent, antialias, preserveDrawingBuffer) {
      var t1, exception, t2, t3, t4, t5;
      if ($.defaultRenderer == null)
        $.defaultRenderer = this;
      this.type = 0;
      this.width = C.JSInt_methods.toInt$0(width);
      this.height = C.JSInt_methods.toInt$0(height);
      this.transparent = transparent;
      this.antialias = antialias;
      this.preserveDrawingBuffer = preserveDrawingBuffer;
      view = W.CanvasElement_CanvasElement(null, null);
      this.view = view;
      J.set$width$x(view, this.width);
      J.set$height$x(this.view, this.height);
      t1 = J.get$onWebGlContextLost$x(this.view);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$handleContextLost()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onWebGlContextRestored$x(this.view);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$handleContextRestored()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["alpha", this.transparent, "antialias", this.antialias, "premultipliedAlpha", transparent, "stencil", true, "preserveDrawingBuffer", preserveDrawingBuffer], null, null);
      this.options = t1;
      try {
        this.gl = J.getContext$2$x(this.view, "experimental-webgl", t1);
      } catch (exception) {
        H.unwrapException(exception);
        try {
          this.gl = J.getContext$2$x(this.view, "webgl", this.options);
        } catch (exception) {
          H.unwrapException(exception);
          throw H.wrapException(P.Exception_Exception(" This browser does not support webGL. Try using the canvas renderer " + this.toString$0(0)));
        }

      }

      $.get$glContexts().add$1(0, this.gl);
      if ($.blendModesWebGL == null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        $.blendModesWebGL = t1;
        t1.$indexSet(0, C.BlendModes_0, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_1, [770, 772]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_2, [774, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_3, [770, 1]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_4, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_5, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_6, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_7, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_8, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_9, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_10, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_11, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_12, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_13, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_14, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_15, [1, 771]);
        $.blendModesWebGL.$indexSet(0, C.BlendModes_16, [1, 771]);
      }
      t1 = new M.Point(null, null);
      t1.x = 0;
      t1.y = 0;
      this.projection = t1;
      t2 = this.width;
      if (typeof t2 !== "number")
        return t2.$div();
      t1.x = t2 / 2;
      t3 = this.height;
      if (typeof t3 !== "number")
        return t3.$negate();
      t1.y = -t3 / 2;
      t1 = new M.Point(null, null);
      t1.x = 0;
      t1.y = 0;
      this.offset = t1;
      this.resize$2(0, t2, t3);
      this.contextLost = false;
      this.shaderManager = M.WebGLShaderManager$(this.gl);
      this.spriteBatch = M.WebGLSpriteBatch$(this.gl);
      t3 = new M.WebGLMaskManager([], 0, null, null, null);
      t3.WebGLMaskManager$1(this.gl);
      this.maskManager = t3;
      t3 = this.gl;
      t2 = new M.WebGLFilterManager(null, this.transparent, [], 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, null);
      t2.setContext$1(t3);
      this.filterManager = t2;
      t2 = this.gl;
      t3 = new M.WebGLStencilManager(t2, null, null, null, null, null);
      t3.WebGLStencilManager$1(t2);
      this.stencilManager = t3;
      t2 = this.gl;
      t1 = new M.WebGLBlendModeManager(t2, null);
      t1.currentBlendMode = C.BlendModes_99999;
      this.blendModeManager = t1;
      t4 = new M.RenderSession(null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null);
      this.renderSession = t4;
      t4.gl = t2;
      t4.drawCount = 0;
      t5 = this.shaderManager;
      t4.shaderManager = t5;
      t4.maskManager = this.maskManager;
      t4.filterManager = this.filterManager;
      t4.blendModeManager = t1;
      t4.spriteBatch = this.spriteBatch;
      t4.stencilManager = t3;
      t4.renderer = this;
      J.useProgram$1$x(t2, t5.defaultShader.program);
      J.disable$1$x(this.gl, 2929);
      J.disable$1$x(this.gl, 2884);
      J.enable$1$x(this.gl, 3042);
      J.colorMask$4$x(this.gl, true, true, true, this.transparent);
    },
    static: {WebGLRenderer$: function(width, height, view, transparent, antialias, preserveDrawingBuffer) {
        var t1 = new M.WebGLRenderer(0, false, false, false, 100, 100, null, null, null, false, null, null, null, null, null, null, null, null, null, null);
        t1.WebGLRenderer$6(width, height, view, transparent, antialias, preserveDrawingBuffer);
        return t1;
      }, WebGLRenderer_updateTextures: function(gl) {
        var i, t1, t2, frame, t3, tw, th;
        for (i = 0; t1 = $.get$Texture_frameUpdates(), i < t1.length; ++i) {
          t1 = t1[i];
          t2 = t1._uvs;
          if (t2 == null) {
            t2 = new M.TextureUvs(0, 0, 0, 0, 0, 0, 0, 0);
            t1._uvs = t2;
          }
          frame = t1.crop;
          t3 = t1.baseTexture;
          tw = t3.width;
          th = t3.height;
          t2.x0 = J.$div$n(frame.x, tw);
          t1._uvs.y0 = J.$div$n(frame.y, th);
          t1._uvs.x1 = J.$div$n(J.$add$ns(frame.x, frame.width), tw);
          t1._uvs.y1 = J.$div$n(frame.y, th);
          t1._uvs.x2 = J.$div$n(J.$add$ns(frame.x, frame.width), tw);
          t1._uvs.y2 = J.$div$n(J.$add$ns(frame.y, frame.height), th);
          t1._uvs.x3 = J.$div$n(frame.x, tw);
          t1._uvs.y3 = J.$div$n(J.$add$ns(frame.y, frame.height), th);
        }
        for (i = 0; t1 = $.get$texturesToDestroy(), i < t1.length; ++i)
          M.WebGLRenderer_destroyTexture(t1[i], gl);
        C.JSArray_methods.set$length($.get$texturesToUpdate(), 0);
        C.JSArray_methods.set$length($.get$texturesToDestroy(), 0);
        C.JSArray_methods.set$length($.get$Texture_frameUpdates(), 0);
      }, WebGLRenderer_destroyTexture: function(texture, gl) {
        var t1, t2;
        t1 = texture._glTextures;
        t1 = t1.get$values(t1);
        t2 = t1._iterable;
        t2 = new H.MappedIterator(null, t2.get$iterator(t2), t1._f);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)];
        t1 = J.getInterceptor$x(gl);
        for (; t2.moveNext$0();)
          t1.deleteTexture$1(gl, t2._current);
        texture._glTextures.clear$0(0);
      }}
  },
  ChartData: {
    "^": "Object;font,size,lineHeight,chars"
  },
  Char: {
    "^": "Object;texture,line,charCode,position,xOffset,yOffset,xAdvance,kernings"
  },
  TextStyle: {
    "^": "Object;fill,font,align,stroke,strokeThickness,wordWrap,wordWrapWidth,dropShadow,dropShadowAngle,dropShadowDistance,dropShadowColor,tint",
    TextStyle$6$align$fill$font$stroke$strokeThickness$tint: function(align, fill, font, stroke, strokeThickness, tint) {
      this.fill = fill;
      this.font = font;
      this.align = align;
      this.stroke = stroke;
      this.strokeThickness = strokeThickness;
      this.tint = tint;
    },
    static: {TextStyle$: function(align, fill, font, stroke, strokeThickness, tint) {
        var t1 = new M.TextStyle("black", "bold 20pt Arial", "left", "black", 0, false, 100, false, 0.5235987755982988, 4, "black", 16777215);
        t1.TextStyle$6$align$fill$font$stroke$strokeThickness$tint(align, fill, font, stroke, strokeThickness, tint);
        return t1;
      }}
  },
  Text: {
    "^": "Sprite;_text,_style,_canvas,_context,PIXI$Text$_dirty,_requiresUpdate,anchor,texture,updateFrame,PIXI$Sprite$_width,PIXI$Sprite$_height,_uvs,tintedTexture,buffer,tint,cachedTint,blendMode,children,interactiveChildren,_width,_height,position,scale,pivot,rotation,alpha,visible,hitArea,buttonMode,renderable,_parent,__hit,__isOver,__mouseIsDown,__isDown,_dirty,click,mousemove,mousedown,mouseout,mouseover,mouseup,mouseupoutside,touchmove,touchstart,touchend,tap,touchendoutside,__touchData,_stage,_worldAlpha,_interactive,defaultCursor,_worldTransform,_sr,_cr,filterArea,_bounds,_currentBounds,_mask,_cacheAsBitmap,_cachedSprite,_cacheIsDirty,_filterBlock,_filters,_rotationCache",
    get$width: function(_) {
      if (this.PIXI$Text$_dirty === true) {
        this.updateText$0();
        this.PIXI$Text$_dirty = false;
      }
      return J.$mul$ns(this.scale.x, this.texture.get$frame().width);
    },
    get$height: function(_) {
      if (this.PIXI$Text$_dirty === true) {
        this.updateText$0();
        this.PIXI$Text$_dirty = false;
      }
      return J.$mul$ns(this.scale.y, this.texture.get$frame().height);
    },
    updateText$0: function() {
      var outputText, lines, lineWidths, t1, maxLineWidth, i, lineWidth, t2, width, t3, result, body, dummy, lineHeight, height, xShadowOffset, yShadowOffset, linePositionX, linePositionX0, linePositionY, t4;
      J.set$font$x(this._context, this._style.font);
      outputText = this._text;
      if (this._style.wordWrap)
        outputText = this.wordWrap$1(0, outputText);
      lines = J.split$1$s(outputText, $.get$Text_splitReg());
      lineWidths = H.setRuntimeTypeInfo(Array(lines.length), [P.num]);
      for (t1 = lineWidths.length, maxLineWidth = 0, i = 0; i < lines.length; ++i) {
        lineWidth = J.measureText$1$x(this._context, lines[i]).width;
        if (i >= t1)
          return H.ioore(lineWidths, i);
        lineWidths[i] = lineWidth;
        maxLineWidth = P.max(maxLineWidth, lineWidth);
      }
      t2 = this._style;
      width = maxLineWidth + t2.strokeThickness;
      if (t2.dropShadow)
        width += t2.dropShadowDistance;
      t2 = this._canvas;
      t3 = J.get$lineWidth$x(this._context);
      if (typeof t3 !== "number")
        return H.iae(t3);
      J.set$width$x(t2, C.JSNumber_methods.toInt$0(Math.floor(width + t3)));
      t3 = "font: " + this._style.font + ";";
      result = $.get$Text_heightCache().$index(0, t3);
      if (result == null) {
        t2 = document.getElementsByTagName("body");
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        body = t2[0];
        dummy = document.createElement("div", null);
        dummy.textContent = "M";
        dummy.setAttribute("style", t3 + ";position:absolute;top:0;left:0");
        body.appendChild(dummy);
        result = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(dummy.offsetHeight));
        $.get$Text_heightCache().$indexSet(0, t3, result);
        J.remove$0$ax(dummy);
      }
      t2 = this._style;
      t3 = t2.strokeThickness;
      if (typeof result !== "number")
        return result.$add();
      lineHeight = result + t3;
      height = lineHeight * lines.length;
      if (t2.dropShadow)
        height += t2.dropShadowDistance;
      J.set$height$x(this._canvas, height);
      J.set$font$x(this._context, this._style.font);
      J.set$strokeStyle$x(this._context, this._style.stroke);
      J.set$lineWidth$x(this._context, this._style.strokeThickness);
      J.set$textBaseline$x(this._context, "top");
      t2 = this._style;
      if (t2.dropShadow) {
        J.set$fillStyle$x(this._context, t2.dropShadowColor);
        t2 = this._style.dropShadowAngle;
        t2 = Math.sin(t2);
        t3 = this._style;
        xShadowOffset = t2 * t3.dropShadowDistance;
        t3 = t3.dropShadowAngle;
        yShadowOffset = Math.cos(t3) * this._style.dropShadowDistance;
        for (i = 0; i < lines.length; ++i) {
          t2 = this._style;
          linePositionX = t2.strokeThickness / 2;
          t3 = t2.align;
          if (t3 === "right") {
            if (i >= t1)
              return H.ioore(lineWidths, i);
            t3 = lineWidths[i];
            if (typeof t3 !== "number")
              return H.iae(t3);
            linePositionX0 = linePositionX + (maxLineWidth - t3);
          } else if (t3 === "center") {
            if (i >= t1)
              return H.ioore(lineWidths, i);
            t3 = lineWidths[i];
            if (typeof t3 !== "number")
              return H.iae(t3);
            linePositionX0 = linePositionX + (maxLineWidth - t3) / 2;
          } else
            linePositionX0 = linePositionX;
          t2.fill;
          J.fillText$3$x(this._context, lines[i], linePositionX0 + xShadowOffset, linePositionX + i * lineHeight + yShadowOffset);
        }
      }
      J.set$fillStyle$x(this._context, this._style.fill);
      for (i = 0; i < lines.length; ++i) {
        t2 = this._style;
        t3 = t2.strokeThickness;
        linePositionX = t3 / 2;
        linePositionY = linePositionX + i * lineHeight;
        t4 = t2.align;
        if (t4 === "right") {
          if (i >= t1)
            return H.ioore(lineWidths, i);
          t4 = lineWidths[i];
          if (typeof t4 !== "number")
            return H.iae(t4);
          linePositionX += maxLineWidth - t4;
        } else if (t4 === "center") {
          if (i >= t1)
            return H.ioore(lineWidths, i);
          t4 = lineWidths[i];
          if (typeof t4 !== "number")
            return H.iae(t4);
          linePositionX += (maxLineWidth - t4) / 2;
        }
        t2.stroke;
        if (t3 !== 0)
          J.strokeText$3$x(this._context, lines[i], linePositionX, linePositionY);
        this._style.fill;
        t2 = this._context;
        if (i >= lines.length)
          return H.ioore(lines, i);
        J.fillText$3$x(t2, lines[i], linePositionX, linePositionY);
      }
      this.texture.get$baseTexture().width = J.get$width$x(this._canvas);
      this.texture.get$baseTexture().height = J.get$height$x(this._canvas);
      t1 = this.texture.get$crop();
      t2 = this.texture.get$frame();
      t3 = J.get$width$x(this._canvas);
      t2.width = t3;
      t1.width = t3;
      t3 = this.texture.get$crop();
      t1 = this.texture.get$frame();
      t2 = J.get$height$x(this._canvas);
      t1.height = t2;
      t3.height = t2;
      this.PIXI$Sprite$_width = J.get$width$x(this._canvas);
      this.PIXI$Sprite$_height = J.get$height$x(this._canvas);
      this._requiresUpdate = true;
    },
    _renderWebGL$1: function(renderSession) {
      if (this._requiresUpdate === true) {
        this._requiresUpdate = false;
        M.updateWebGLTexture(this.texture.get$baseTexture(), renderSession.gl);
      }
      M.Sprite.prototype._renderWebGL$1.call(this, renderSession);
    },
    updateTransform$0: function() {
      if (this.PIXI$Text$_dirty === true) {
        this.updateText$0();
        this.PIXI$Text$_dirty = false;
      }
      M.DisplayObjectContainer.prototype.updateTransform$0.call(this);
    },
    wordWrap$1: function(_, text) {
      var lines, result, i, spaceLeft, words, j, wordWidth, t1, wordWidthWithSpace;
      lines = text.split("\n");
      for (result = "", i = 0; i < lines.length; ++i) {
        spaceLeft = this._style.wordWrapWidth;
        words = J.split$1$s(lines[i], " ");
        for (j = 0; j < words.length; ++j) {
          wordWidth = J.measureText$1$x(this._context, words[j]).width;
          t1 = J.measureText$1$x(this._context, " ").width;
          if (typeof wordWidth !== "number")
            return wordWidth.$add();
          if (typeof t1 !== "number")
            return H.iae(t1);
          wordWidthWithSpace = wordWidth + t1;
          if (j === 0 || wordWidthWithSpace > spaceLeft) {
            if (j > 0)
              result += "\n";
            if (j >= words.length)
              return H.ioore(words, j);
            result = C.JSString_methods.$add(result, words[j]);
            spaceLeft = this._style.wordWrapWidth - wordWidth;
          } else {
            spaceLeft -= wordWidthWithSpace;
            if (j >= words.length)
              return H.ioore(words, j);
            result += C.JSString_methods.$add(" ", words[j]);
          }
        }
        if (i < lines.length - 1)
          result += "\n";
      }
      return result;
    },
    Text$2: function(text, style) {
      var t1, t2, baseTexture;
      this._text = text;
      this._style = style;
      t1 = W.CanvasElement_CanvasElement(null, null);
      this._canvas = t1;
      this._context = J.getContext$1$x(t1, "2d");
      t1 = this._canvas;
      t1.toString;
      if (t1.getAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(t1))._toHyphenedName$1("_pixiId")) == null) {
        t2 = $.TextureCacheIdGenerator;
        $.TextureCacheIdGenerator = t2 + 1;
        t2 = "canvas_" + t2;
        t1.setAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(t1))._toHyphenedName$1("_pixiId"), t2);
      }
      baseTexture = $.get$BaseTextureCache().$index(0, t1.getAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(t1))._toHyphenedName$1("_pixiId")));
      if (baseTexture == null) {
        baseTexture = M.BaseTexture$(t1, null);
        $.get$BaseTextureCache().$indexSet(0, t1.getAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(t1))._toHyphenedName$1("_pixiId")), baseTexture);
      }
      this.texture = M.Texture$(baseTexture, null);
      this._setupTexture$0();
      this._text = text;
      this.PIXI$Text$_dirty = true;
      this._style = style;
      this.PIXI$Text$_dirty = true;
    },
    static: {"^": "Text_splitReg,Text_heightCache", Text$: function(text, style) {
        var t1, t2, t3, t4, t5;
        t1 = new M.Point(null, null);
        t1.x = 0;
        t1.y = 0;
        t2 = new M.Point(null, null);
        t2.x = 0;
        t2.y = 0;
        t3 = new M.Point(null, null);
        t3.x = 1;
        t3.y = 1;
        t4 = new M.Point(null, null);
        t4.x = 0;
        t4.y = 0;
        t5 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t1 = new M.Text(null, null, null, null, null, null, t1, null, false, 0, 0, null, null, null, 16777215, null, C.BlendModes_0, [], false, 0, 0, t2, t3, t4, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t5, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, new Float32Array(9)), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0);
        t1.renderable = true;
        t1.Text$2(text, style);
        return t1;
      }}
  },
  BaseTexture: {
    "^": "EventTarget0;id,width*,height*,scaleMode,_hasLoaded,source,_glTextures,imageUrl,_powerOf2,onLoaded,premultipliedAlpha,_dirty,listeners",
    BaseTexture$2: function(source, scaleMode) {
      var t1, t2;
      this.premultipliedAlpha = true;
      this._dirty = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t1 = this.source;
      if (t1 == null)
        return;
      t2 = J.getInterceptor(t1);
      if ((!!t2.$isImageElement && t2.get$complete(t1) === true || !!J.getInterceptor(this.source).$isCanvasElement) && !J.$eq(J.get$width$x(this.source), 0) && !J.$eq(J.get$height$x(this.source), 0)) {
        this._hasLoaded = true;
        this.set$width(0, J.get$width$x(this.source));
        this.set$height(0, J.get$height$x(this.source));
        $.get$texturesToUpdate().push(this);
      } else {
        t1 = J.get$onLoad$x(this.source);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.BaseTexture_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = J.get$onError$x(this.source);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.BaseTexture_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      }
    },
    static: {BaseTexture$: function(source, scaleMode) {
        var t1 = $.BaseTextureCacheIdGenerator;
        $.BaseTextureCacheIdGenerator = t1 + 1;
        t1 = new M.BaseTexture(t1, 100, 100, scaleMode, false, source, P.LinkedHashMap_LinkedHashMap(null, null, null, P.RenderingContext, null), null, false, null, null, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
        t1.BaseTexture$2(source, scaleMode);
        return t1;
      }}
  },
  BaseTexture_closure: {
    "^": "Closure:33;scope_0",
    call$1: [function(e) {
      var t1, i, t2;
      t1 = this.scope_0;
      t1._hasLoaded = true;
      t1.set$width(0, J.get$width$x(t1.source));
      t1.set$height(0, J.get$height$x(t1.source));
      for (i = 0; t2 = t1._glTextures, i < t2.get$length(t2); ++i)
        t1._dirty.$indexSet(0, i, true);
      t1.dispatchEvent$1(0, new M.PixiEvent("loaded", t1, null));
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  BaseTexture_closure0: {
    "^": "Closure:33;scope_1",
    call$1: [function(e) {
      var t1, t2;
      t1 = this.scope_1;
      t2 = new M.PixiEvent(null, null, null);
      t2.type = "error";
      t2.content = t1;
      t1.dispatchEvent$1(0, t2);
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  Texture: {
    "^": "BaseTexture;noFrame,updateFrame,frame<,trim>,scope,_uvs<,valid<,baseTexture<,width:PIXI$Texture$width*,height:PIXI$Texture$height*,sourceWidth,sourceHeight,tintCache@,needsUpdate,isTiling,canvasBuffer,crop<,id,width,height,scaleMode,_hasLoaded,source,_glTextures,imageUrl,_powerOf2,onLoaded,premultipliedAlpha,_dirty,listeners",
    onBaseTextureLoaded$0: [function() {
      var baseTexture = this.baseTexture;
      baseTexture.removeEventListener$2(0, "loaded", this.get$onBaseTextureLoaded());
      if (this.noFrame)
        this.frame = new M.Rectangle(0, 0, baseTexture.width, baseTexture.height);
      this.setFrame$1(this.frame);
      this.scope.dispatchEvent$1(0, new M.PixiEvent("update", this, null));
    }, "call$0", "get$onBaseTextureLoaded", 0, 0, 16],
    setFrame$1: function(frame) {
      var t1, t2, t3;
      this.noFrame = false;
      this.frame = frame;
      t1 = frame.width;
      this.PIXI$Texture$width = t1;
      t2 = frame.height;
      this.PIXI$Texture$height = t2;
      t3 = this.crop;
      t3.x = frame.x;
      t3.y = frame.y;
      t3.width = t1;
      t3.height = t2;
      if (this.trim == null)
        t1 = J.$gt$n(J.$add$ns(frame.x, frame.width), this.baseTexture.width) || J.$gt$n(J.$add$ns(frame.y, frame.height), this.baseTexture.height);
      else
        t1 = false;
      if (t1)
        throw H.wrapException(P.Exception_Exception("Texture Error: frame does not fit inside the base Texture dimensions"));
      if (frame != null) {
        t1 = frame.width;
        if (t1 != null)
          if (!J.$eq(t1, 0)) {
            t1 = frame.height;
            if (t1 != null)
              if (!J.$eq(t1, 0)) {
                t1 = this.baseTexture;
                t1 = t1.source != null && t1._hasLoaded;
              } else
                t1 = false;
            else
              t1 = false;
          } else
            t1 = false;
        else
          t1 = false;
      } else
        t1 = false;
      this.valid = t1;
      $.get$Texture_frameUpdates().push(this);
    },
    Texture$2: function(baseTexture, frame) {
      var t1;
      this.scope = this;
      t1 = this.frame;
      if (t1 == null) {
        this.noFrame = true;
        t1 = new M.Rectangle(0, 0, 1, 1);
        this.frame = t1;
      }
      this.baseTexture = baseTexture;
      this.crop = new M.Rectangle(0, 0, 1, 1);
      if (baseTexture._hasLoaded) {
        if (this.noFrame) {
          t1 = new M.Rectangle(0, 0, baseTexture.width, baseTexture.height);
          this.frame = t1;
        }
        this.setFrame$1(t1);
      } else
        baseTexture.addEventListener$2(0, "loaded", new M.Texture_closure(this));
    },
    static: {"^": "Texture_frameUpdates", Texture$: function(baseTexture, frame) {
        var t1 = $.BaseTextureCacheIdGenerator;
        $.BaseTextureCacheIdGenerator = t1 + 1;
        t1 = new M.Texture(false, false, frame, null, null, null, false, null, 0, 0, 0, 0, null, true, null, null, null, t1, 100, 100, C.scaleModes_0, false, null, P.LinkedHashMap_LinkedHashMap(null, null, null, P.RenderingContext, null), null, false, null, null, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
        t1.BaseTexture$2(null, C.scaleModes_0);
        t1.Texture$2(baseTexture, frame);
        return t1;
      }, Texture_fromImage: function(imageUrl, crossorigin, scaleMode) {
        var texture, baseTexture, image;
        texture = $.get$TextureCache().$index(0, imageUrl);
        if (texture == null) {
          baseTexture = $.get$BaseTextureCache().$index(0, imageUrl);
          if (baseTexture == null) {
            image = W.ImageElement_ImageElement(null, null, null);
            if (crossorigin)
              J.set$crossOrigin$x(image, "");
            J.set$src$x(image, imageUrl);
            baseTexture = M.BaseTexture$(image, scaleMode);
            baseTexture.imageUrl = imageUrl;
            $.get$BaseTextureCache().$indexSet(0, imageUrl, baseTexture);
          }
          texture = M.Texture$(baseTexture, null);
          $.get$TextureCache().$indexSet(0, imageUrl, texture);
        }
        return texture;
      }, Texture_fromFrame: function(frameId) {
        var texture = $.get$TextureCache().$index(0, frameId);
        if (texture == null)
          throw H.wrapException(P.Exception_Exception("The frameId \"" + frameId + "\" does not exist in the texture cache"));
        return texture;
      }}
  },
  Texture_closure: {
    "^": "Closure:33;scope_0",
    call$1: [function(e) {
      this.scope_0.onBaseTextureLoaded$0();
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  TextureUvs: {
    "^": "Object;x0,y0,x1,y1,x2,y2,x3,y3"
  },
  PixiEvent: {
    "^": "Object;type,content>,loader"
  },
  EventTarget0: {
    "^": "Object;",
    addEventListener$2: function(_, type, listener) {
      var t1, t2;
      t1 = this.listeners;
      if (t1.$index(0, type) == null)
        t1.$indexSet(0, type, []);
      t2 = t1.$index(0, type);
      if (H.Lists_indexOf(t2, listener, 0, t2.length) === -1)
        J.insert$2$ax(t1.$index(0, type), 0, listener);
    },
    dispatchEvent$1: function(_, $event) {
      var t1, i, t2;
      t1 = this.listeners;
      if (t1.$index(0, $event.type) == null || t1.$index(0, $event.type).length === 0)
        return;
      for (i = t1.$index(0, $event.type).length - 1; i >= 0; --i) {
        t2 = t1.$index(0, $event.type);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i].call$1($event);
      }
    },
    removeEventListener$2: function(_, type, listener) {
      var t1, t2, index;
      t1 = this.listeners;
      if (t1.$index(0, type) == null)
        return;
      t2 = t1.$index(0, type);
      index = H.Lists_indexOf(t2, listener, 0, t2.length);
      if (index !== -1)
        J.removeAt$1$ax(t1.$index(0, type), index);
    }
  }
}],
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    noSuchMethod$1: [function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, "call$1", "get$noSuchMethod", 2, 0, null, 63],
    "%": "ArrayBuffer|CanvasGradient|CanvasPattern|DOMError|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGPointList|WebGLBuffer|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLShader|WebGLTexture"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    noSuchMethod$1: [function(receiver, invocation) {
      return J.Interceptor.prototype.noSuchMethod$1.call(this, receiver, invocation);
    }, "call$1", "get$noSuchMethod", 2, 0, null, 63]
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  JSArray: {
    "^": "Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      receiver.splice(index, 0, value);
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1.get$current());
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = init;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isJSArray: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    floor$0: function(receiver) {
      return this.toInt$0(Math.floor(receiver));
    },
    round$0: function(receiver) {
      return this.toInt$0(this.roundToDouble$0(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toRadixString$1: function(receiver, radix) {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else
        return this.toInt$0(receiver / other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true,
    $is$int: true
  },
  JSDouble: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceAll$2: function(receiver, from, to) {
      return H.stringReplaceAllUnchecked(receiver, from, to);
    },
    split$1: function(receiver, pattern) {
      if (pattern == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof pattern === "string")
        return receiver.split(pattern);
      else if (!!J.getInterceptor(pattern).$isJSSyntaxRegExp)
        return receiver.split(pattern._nativeRegExp);
      else
        throw H.wrapException("String.split(Pattern) UNIMPLEMENTED");
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0: function(receiver) {
      return receiver.toUpperCase();
    },
    trim$0: [function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    }, "call$0", "get$trim", 0, 0, 64],
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2: function(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    indexOf$2: function(receiver, pattern, start) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      return receiver.indexOf(pattern, start);
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          if (index >= t1)
            H.throwExpression(P.RangeError$value(index));
          codeUnit = string.charCodeAt(index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var t1, index0, codeUnit;
        for (t1 = string.length; index > 0; index = index0) {
          index0 = index - 1;
          if (index0 >= t1)
            H.throwExpression(P.RangeError$value(index0));
          codeUnit = string.charCodeAt(index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, P.Capability_Capability(), P.Capability_Capability(), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }

      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: [function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context, replyPort;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, P.Capability_Capability(), P.Capability_Capability(), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        replyPort = t1.$index(msg, "replyPort");
        H.IsolateNatives_spawn(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), false, t1.$index(msg, "isSpawnUri"), t1.$index(msg, "startPaused")).then$2$onError(new H.IsolateNatives__processWorkerMessage_closure0(replyPort), new H.IsolateNatives__processWorkerMessage_closure1(replyPort));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  }, "call$2", "IsolateNatives__processWorkerMessage$closure", 4, 0, null, 2, 3],
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives_spawn: function(functionName, uri, args, message, isLight, isSpawnUri, startPaused) {
    var port, completer, signalReply, t1, t2, worker;
    if (uri != null && J.endsWith$1$s(uri, ".dart"))
      uri = J.$add$ns(uri, ".js");
    port = P.ReceivePort_ReceivePort();
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
    port.get$first(port).then$1(new H.IsolateNatives_spawn_closure(completer));
    signalReply = new H._NativeJsSendPort(port._rawPort, init.globalState.currentContext.id);
    if (init.globalState.supportsWorkers === true && !isLight)
      if (init.globalState.isWorker === true) {
        t1 = init.globalState.mainManager;
        t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "spawn-worker", "functionName", functionName, "args", args, "msg", message, "uri", uri, "isSpawnUri", isSpawnUri, "startPaused", startPaused, "replyPort", signalReply], null, null));
        t1.toString;
        self.postMessage(t2);
      } else {
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onerror = function(f, u, c) {
          return function(e) {
            return f(e, u, c);
          };
        }(H.IsolateNatives_workerOnError, uri, new H.IsolateNatives_spawn_closure0(completer));
        worker.onmessage = function(f, a) {
          return function(e) {
            e.onerror = null;
            return f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, worker);
        t1 = init.globalState.nextManagerId++;
        $.get$IsolateNatives_workerIds().$indexSet(0, worker, t1);
        init.globalState.managers.$indexSet(0, t1, worker);
        worker.postMessage(H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "start", "id", t1, "replyTo", H._serializeMessage(signalReply), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "startPaused", startPaused, "functionName", functionName], null, null)));
      }
    else
      H.IsolateNatives__startNonWorker(functionName, uri, args, message, isSpawnUri, startPaused, signalReply);
    return completer.future;
  },
  IsolateNatives__startNonWorker: function(functionName, uri, args, message, isSpawnUri, startPaused, replyPort) {
    var t1, t2, t3, t4, t5, t6;
    t1 = {};
    t1.args_0 = args;
    t1.message_1 = message;
    if (uri != null)
      throw H.wrapException(P.UnsupportedError$("Currently spawnUri is not supported without web workers."));
    t1.message_1 = H._serializeMessage(message);
    t1.args_0 = H._serializeMessage(t1.args_0);
    t2 = init.globalState.topEventLoop;
    t3 = init.globalState.nextIsolateId++;
    t4 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t5 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t6 = new H.RawReceivePortImpl(0, null, false);
    t4 = new H._IsolateContext(t3, t4, t5, new Isolate(), t6, P.Capability_Capability(), P.Capability_Capability(), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t5.add$1(0, 0);
    t4._addRegistration$2(0, t6);
    t2.events._add$1(new H._IsolateEvent(t4, new H.IsolateNatives__startNonWorker_closure(t1, functionName, isSpawnUri, startPaused, replyPort), "nonworker start"));
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  IsolateNatives_workerOnError: [function($event, uri, onError) {
    var message;
    $event.preventDefault();
    message = $event.message;
    onError.call$1(message == null ? "Error spawning worker for " + H.S(uri) : "Error spawning worker for " + H.S(uri) + " (" + message + ")");
    return true;
  }, "call$3", "IsolateNatives_workerOnError$closure", 6, 0, null, 4, 5, 6],
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:62;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    },
    $isFunction: true
  },
  startRootIsolate_closure0: {
    "^": "Closure:62;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    },
    $isFunction: true
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function(object) {
        };
      }
    }
  },
  _IsolateContext: {
    "^": "Object;id,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized?,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(this.get$kill());
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var t1, message, t2;
      t1 = this.errorPorts;
      if (t1._collection$_length === 0) {
        if (this.errorsAreFatal === true && this === init.globalState.rootContext)
          return;
        t1 = $.get$globalThis();
        if (t1.console != null && typeof t1.console.error == "function")
          t1.console.error(error, stackTrace);
        else {
          P.print(error);
          if (stackTrace != null)
            P.print(stackTrace);
        }
        return;
      }
      message = Array(2);
      message.fixed$length = init;
      message[0] = J.toString$0(error);
      message[1] = stackTrace == null ? null : J.toString$0(stackTrace);
      for (t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();)
        J.send$1$x(t2._collection$_current, message);
    },
    eval$1: function(code) {
      var old, result, e, s, exception, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.handleUncaughtError$2(e, s);
        if (this.errorsAreFatal === true) {
          this.kill$0();
          if (this === init.globalState.rootContext)
            throw exception;
        }
      }
 finally {
        this._isExecutingEvent = false;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "kill":
          this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "getErrors":
          this.errorPorts.add$1(0, t1.$index(message, 1));
          break;
        case "stopErrors":
          this.errorPorts.remove$1(0, t1.$index(message, 1));
          break;
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2, t3;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t3 = t2._iterable, t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, t3.get$iterator(t3), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2._current.__isolate_helper$_close$0();
      t1.clear$0(0);
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      this.errorPorts.clear$0(0);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1._current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 16]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:16;responsePort_0",
    call$0: [function() {
      J.send$1$x(this.responsePort_0, null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:16;this_0",
    call$0: [function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused()) {
        t1.get$delayedEvents().push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:62;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: [function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  IsolateNatives__processWorkerMessage_closure0: {
    "^": "Closure:33;replyPort_6",
    call$1: [function(msg) {
      J.send$1$x(this.replyPort_6, msg);
    }, "call$1", null, 2, 0, null, 65, "call"],
    $isFunction: true
  },
  IsolateNatives__processWorkerMessage_closure1: {
    "^": "Closure:7;replyPort_7",
    call$1: [function(errorMessage) {
      J.send$1$x(this.replyPort_7, ["spawn failed", errorMessage]);
    }, "call$1", null, 2, 0, null, 66, "call"],
    $isFunction: true
  },
  IsolateNatives_spawn_closure: {
    "^": "Closure:33;completer_0",
    call$1: [function(msg) {
      var t1, t2;
      t1 = J.getInterceptor$asx(msg);
      t2 = this.completer_0;
      if (J.$eq(t1.$index(msg, 0), "spawned")) {
        t1 = t2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(msg);
      } else
        t2.completeError$1(t1.$index(msg, 1));
    }, "call$1", null, 2, 0, null, 65, "call"],
    $isFunction: true
  },
  IsolateNatives_spawn_closure0: {
    "^": "Closure:7;completer_1",
    call$1: [function(message) {
      return this.completer_1.completeError$1(message);
    }, "call$1", null, 2, 0, null, 67, "call"],
    $isFunction: true
  },
  IsolateNatives__startNonWorker_closure: {
    "^": "Closure:62;box_0,functionName_1,isSpawnUri_2,startPaused_3,replyPort_4",
    call$0: [function() {
      var t1 = this.box_0;
      H.IsolateNatives__startIsolate(init.globalFunctions[this.functionName_1](), t1.args_0, t1.message_1, this.isSpawnUri_2, this.startPaused_3, this.replyPort_4);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:16;topLevel_0,args_1,message_2,isSpawnUri_3,context_4",
    call$0: [function() {
      var t1, t2, t3;
      this.context_4.set$initialized(true);
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (isolate.get$controlPort() === t3) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:62;box_0,this_1,shouldSerialize_2",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.$shl$n(this._workerId, 16);
      t2 = J.$shl$n(this._isolateId, 8);
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    __isolate_helper$_close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this._id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  ReceivePortImpl: {
    "^": "Stream;_rawPort,_controller",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    close$0: [function(_) {
      this._rawPort.close$0(0);
      this._controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 16],
    ReceivePortImpl$fromRawReceivePort$1: function(_rawPort) {
      var t1 = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
      this._controller = t1;
      this._rawPort._handler = t1.get$add(t1);
    },
    $asStream: function() {
      return [null];
    }
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:68;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    },
    $isFunction: true
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      return ["map", t1, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:16;this_0,callback_1",
    call$0: [function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:16;this_2,callback_3",
    call$0: [function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash, t1, t2;
      hash = this._id;
      t1 = J.getInterceptor$n(hash);
      t2 = t1.$shr(hash, 0);
      t1 = t1.$tdiv(hash, 4294967296);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = t2 ^ t1;
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 7],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1;
    handleError = H.Primitives__throwFormatException$closure();
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        return H.ioore(match, 2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        return H.ioore(match, 3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, 10);
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (0 <= charCode) {
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111));
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
    var t1, $arguments, namedArgumentList;
    t1 = {};
    t1.argumentCount_0 = 0;
    $arguments = [];
    namedArgumentList = [];
    if (positionalArguments != null) {
      t1.argumentCount_0 = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    }
    t1.names_1 = "";
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + t1.argumentCount_0 + t1.names_1, 0, $arguments, namedArgumentList, null));
  },
  Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
    var t1, jsFunction, info, t2, defaultArguments, t3, i, index, $arguments, argumentCount;
    t1 = {};
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments)) {
      jsFunction = J.getInterceptor($function)["call*"];
      if (jsFunction == null)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      if (info == null || !info.areOptionalParametersNamed)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      positionalArguments = P.List_List$from(positionalArguments, true, null);
      t2 = info.requiredParameterCount;
      if (t2 !== positionalArguments.length)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
        index = i + t2;
        defaultArguments.$indexSet(0, info.parameterNameInOrder$1(index), init.metadata[info.defaultValueInOrder$1(index)]);
      }
      t1.bad_0 = false;
      namedArguments.forEach$1(0, new H.Primitives_applyFunction_closure(t1, defaultArguments));
      if (t1.bad_0)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
      return jsFunction.apply($function, positionalArguments);
    }
    $arguments = [];
    argumentCount = positionalArguments.length;
    C.JSArray_methods.addAll$1($arguments, positionalArguments);
    jsFunction = $function["call$" + argumentCount];
    if (jsFunction == null)
      return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
    return jsFunction.apply($function, $arguments);
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: [function() {
    return J.toString$0(this.dartException);
  }, "call$0", "toStringWrapper$closure", 0, 0, null],
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  }, "call$7", "invokeClosure$closure", 14, 0, null, 8, 9, 10, 11, 12, 13, 14],
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  },
  stringReplaceAllUnchecked: function(receiver, from, to) {
    var result, $length, i, t1, nativeRegexp;
    if (typeof from === "string")
      if (from === "")
        if (receiver === "")
          return to;
        else {
          result = P.StringBuffer$("");
          $length = receiver.length;
          result.write$1(to);
          for (i = 0; i < $length; ++i) {
            t1 = receiver[i];
            t1 = result._contents += t1;
            result._contents = t1 + to;
          }
          return result._contents;
        }
      else
        return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace(/\$/g, "$$$$"));
    else if (!!J.getInterceptor(from).$isJSSyntaxRegExp) {
      nativeRegexp = from.get$_nativeGlobalVersion();
      nativeRegexp.lastIndex = 0;
      return receiver.replace(nativeRegexp, to.replace(/\$/g, "$$$$"));
    } else {
      if (from == null)
        H.throwExpression(P.ArgumentError$(null));
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    }
  },
  stringReplaceFirstUnchecked: function(receiver, from, to) {
    if (!!J.getInterceptor(from).$isJSSyntaxRegExp)
      return receiver.replace(from._nativeRegExp, to.replace(/\$/g, "$$$$"));
    else {
      if (from == null)
        H.throwExpression(P.ArgumentError$(null));
      throw H.wrapException("String.replace(Pattern) UNIMPLEMENTED");
    }
  },
  JSInvocationMirror: {
    "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
    get$memberName: function() {
      return this.__js_helper$_memberName;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index;
      if (this._kind === 1)
        return C.List_empty;
      t1 = this._arguments;
      argumentCount = t1.length - this._namedArgumentNames.length;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
      if (this._kind !== 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      t1 = this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount;
      if (namedArgumentCount === 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(0, new H.Symbol0(t3), t2[t4]);
      }
      return map;
    },
    static: {"^": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER"}
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    parameterName$1: function(parameter) {
      var metadataIndex = this.data[parameter + this.optionalParameterCount + 3];
      return init.metadata[metadataIndex];
    },
    defaultValue$1: function(_, parameter) {
      var t1 = this.requiredParameterCount;
      if (typeof parameter !== "number")
        return parameter.$lt();
      if (parameter < t1)
        return;
      return this.data[3 + parameter - t1];
    },
    defaultValueInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.defaultValue$1(0, parameter);
      return this.defaultValue$1(0, this.sortedIndex$1(parameter - t1));
    },
    parameterNameInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.parameterName$1(parameter);
      return this.parameterName$1(this.sortedIndex$1(parameter - t1));
    },
    sortedIndex$1: function(unsortedIndex) {
      var t1, t2, positions, t3, i, index, compare;
      t1 = {};
      if (this.cachedSortedIndices == null) {
        t2 = this.optionalParameterCount;
        this.cachedSortedIndices = Array(t2);
        positions = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.$int);
        for (t3 = this.requiredParameterCount, i = 0; i < t2; ++i) {
          index = t3 + i;
          positions.$indexSet(0, this.parameterName$1(index), index);
        }
        t1.index_0 = 0;
        t2 = positions.get$keys();
        t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
        compare = P.Comparable_compare$closure();
        H.Sort__doSort(t2, 0, t2.length - 1, compare);
        H.IterableMixinWorkaround_forEach(t2, new H.ReflectionInfo_sortedIndex_closure(t1, this, positions));
      }
      t1 = this.cachedSortedIndices;
      if (unsortedIndex < 0 || unsortedIndex >= t1.length)
        return H.ioore(t1, unsortedIndex);
      return t1[unsortedIndex];
    },
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  ReflectionInfo_sortedIndex_closure: {
    "^": "Closure:7;box_0,this_1,positions_2",
    call$1: function($name) {
      var t1, t2, t3;
      t1 = this.this_1.cachedSortedIndices;
      t2 = this.box_0.index_0++;
      t3 = this.positions_2.$index(0, $name);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = t3;
    },
    $isFunction: true
  },
  Primitives_functionNoSuchMethod_closure: {
    "^": "Closure:69;box_0,arguments_1,namedArgumentList_2",
    call$2: function($name, argument) {
      var t1 = this.box_0;
      t1.names_1 = t1.names_1 + "$" + H.S($name);
      this.namedArgumentList_2.push($name);
      this.arguments_1.push(argument);
      ++t1.argumentCount_0;
    },
    $isFunction: true
  },
  Primitives_applyFunction_closure: {
    "^": "Closure:69;box_0,defaultArguments_1",
    call$2: function(parameter, value) {
      var t1 = this.defaultArguments_1;
      if (t1.containsKey$1(parameter))
        t1.$indexSet(0, parameter, value);
      else
        this.box_0.bad_0 = true;
    },
    $isFunction: true
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }

        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }

        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:33;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    },
    $isFunction: true
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:62;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    },
    $isFunction: true
  },
  invokeClosure_closure0: {
    "^": "Closure:62;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    },
    $isFunction: true
  },
  invokeClosure_closure1: {
    "^": "Closure:62;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    },
    $isFunction: true
  },
  invokeClosure_closure2: {
    "^": "Closure:62;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    },
    $isFunction: true
  },
  invokeClosure_closure3: {
    "^": "Closure:62;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    },
    $isFunction: true
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    $isFunction: true,
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this.__js_helper$_target));
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "^": "Error;message",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  TypeImpl: {
    "^": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName.replace(/[^<,> ]+/g, function(m) {
        return init.mangledGlobalNames[m] || m;
      });
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true
  },
  initHooks_closure: {
    "^": "Closure:33;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    },
    $isFunction: true
  },
  initHooks_closure0: {
    "^": "Closure:70;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    },
    $isFunction: true
  },
  initHooks_closure1: {
    "^": "Closure:7;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    },
    $isFunction: true
  },
  JSSyntaxRegExp: {
    "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    $isJSSyntaxRegExp: true,
    static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = function() {
          try {
            return new RegExp(source, m + i + g);
          } catch (e) {
            return e;
          }

        }();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + source + ", " + errorMessage));
      }}
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length;
    if (start < 0 || start > list.length)
      H.throwExpression(P.RangeError$range(start, 0, list.length));
    if (end < start || end > list.length)
      H.throwExpression(P.RangeError$range(end, start, list.length));
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(P.ArgumentError$(skipCount));
    if (skipCount + $length > from.length)
      throw H.wrapException(H.IterableElementError_tooFew());
    H.Lists_copy(from, skipCount, list, start, $length);
  },
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Lists_indexOf: function(a, element, startIndex, endIndex) {
    var i;
    if (startIndex >= a.length)
      return -1;
    for (i = startIndex; i < endIndex; ++i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
    },
    $isEfficientLength: true
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.MappedIterator(null, t1.get$iterator(t1), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      var t1 = this._iterable;
      return t1.get$length(t1);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!iterable.$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  },
  Symbol0: {
    "^": "Object;_name<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isSymbol0 && J.$eq(this._name, other._name);
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    },
    toString$0: function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    },
    $isSymbol0: true,
    static: {"^": "Symbol_reservedWordRE,Symbol_publicIdentifierRE,Symbol_identifierRE,Symbol_operatorRE,Symbol_publicSymbolPattern,Symbol_symbolPattern"}
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(function(victim, hasOwnProperty) {
      var result = [];
      for (var key in victim) {
        if (hasOwnProperty.call(victim, key))
          result.push(key);
      }
      return result;
    }(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    if ($.get$globalThis().scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    $.get$globalThis().scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 15],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P._createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 15],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  _asyncRunCallbackLoop: function() {
    var entry = $._nextCallback;
    for (; entry != null;) {
      entry.callback$0();
      entry = entry.get$next();
      $._nextCallback = entry;
    }
    $._lastCallback = null;
  },
  _asyncRunCallback: [function() {
    var exception;
    try {
      P._asyncRunCallbackLoop();
    } catch (exception) {
      H.unwrapException(exception);
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
      $._nextCallback = $._nextCallback.get$next();
      throw exception;
    }

  }, "call$0", "_asyncRunCallback$closure", 0, 0, 16],
  _scheduleAsyncCallback: function(callback) {
    var t1, t2;
    t1 = $._lastCallback;
    if (t1 == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      t2 = new P._AsyncCallbackEntry(callback, null);
      t1.next = t2;
      $._lastCallback = t2;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 17, 18],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 19, 20, 21, 22],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 16],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:62;callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _AsyncError: {
    "^": "Object;error>,stackTrace<",
    $isError: true
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  _Completer: {
    "^": "Object;"
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    completeError$2: function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(P.ArgumentError$("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    }
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    get$_onValue: function() {
      return this._state === 2 ? null : this._onValueCallback;
    },
    get$_errorTest: function() {
      return this._state === 2 ? null : this._errorTestCallback;
    },
    get$_onError: function() {
      return this._state === 2 ? null : this._onErrorCallback;
    },
    get$_whenCompleteAction: function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener.set$_nextListener(this._resultOrListeners);
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 19, 20, 21, 22],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              if (this._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              this._state = 1;
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future__chainForeignFuture: function(source, target) {
        target.set$_isChained(true);
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        target.set$_isChained(true);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners.set$_nextListener(null);
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, sourceValue, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            asyncError = t1.source_4.get$_error();
            t2 = t1.source_4.get$_zone();
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners.get$_nextListener() != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() ? t1.source_4.get$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (!t2 || listeners.get$_onValue() != null || listeners.get$_whenCompleteAction() != null) {
            zone = listeners.get$_zone();
            if (hasError) {
              t4 = t1.source_4.get$_zone();
              t4.toString;
              zone.toString;
              t4 = zone == null ? t4 != null : zone !== t4;
            } else
              t4 = false;
            if (t4) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(t2, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if (listeners.get$_onValue() != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$_whenCompleteAction() != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners.set$_isChained(true);
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            listeners._setValue$1(t3.listenerValueOrError_2);
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:62;this_0,listener_1",
    call$0: [function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:33;target_0",
    call$1: [function(value) {
      this.target_0._completeWithValue$1(value);
    }, "call$1", null, 2, 0, null, 18, "call"],
    $isFunction: true
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:71;target_1",
    call$2: [function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 20, 21, 22, "call"],
    $isFunction: true
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:62;this_0,coreFuture_1",
    call$0: [function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:62;this_2,value_3",
    call$0: [function() {
      this.this_2._completeWithValue$1(this.value_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:62;this_0,error_1,stackTrace_2",
    call$0: [function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:72;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, t1, t2, exception;
      try {
        t1 = this.zone_5;
        t2 = this.listener_3.get$_onValue();
        t1.toString;
        this.box_1.listenerValueOrError_2 = P._rootRunUnary(t1, null, t1, t2, this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:16;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, t2, t3, exception, listenerValueOrError, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1.get$_errorTest();
      matchesTest = true;
      if (test != null)
        try {
          t2 = this.zone_7;
          t3 = J.get$error$x(asyncError);
          t2.toString;
          matchesTest = P._rootRunUnary(t2, null, t2, test, t3);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1.get$_onError();
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2) {
            t1 = J.get$error$x(asyncError);
            t2 = asyncError.get$stackTrace();
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunBinary(t3, null, t3, errorCallback, t1, t2);
          } else {
            t1 = J.get$error$x(asyncError);
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunUnary(t3, null, t3, errorCallback, t1);
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:16;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, t2, t3, exception;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t2 = this.zone_10;
        t3 = this.listener_9.get$_whenCompleteAction();
        t2.toString;
        t1.completeResult_0 = P._rootRun(t2, null, t2, t3);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:33;box_2,listener_11",
    call$1: [function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }, "call$1", null, 2, 0, null, 73, "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:71;box_0,listener_12",
    call$2: [function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 20, 21, 22, "call"],
    $isFunction: true
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next@",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    map$1: function(_, convert) {
      return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.$int);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: [function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    }, "call$1", null, 2, 0, null, 74, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:62;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    },
    $isFunction: true
  },
  Stream_forEach__closure0: {
    "^": "Closure:33;",
    call$1: function(_) {
    },
    $isFunction: true
  },
  Stream_forEach_closure0: {
    "^": "Closure:62;future_6",
    call$0: [function() {
      this.future_6._complete$1(null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_length_closure: {
    "^": "Closure:33;box_0",
    call$1: [function(_) {
      ++this.box_0.count_0;
    }, "call$1", null, 2, 0, null, 39, "call"],
    $isFunction: true
  },
  Stream_length_closure0: {
    "^": "Closure:62;box_0,future_1",
    call$0: [function() {
      this.future_1._complete$1(this.box_0.count_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_first_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: [function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    }, "call$1", null, 2, 0, null, 18, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:62;future_3",
    call$0: [function() {
      this.future_3._completeError$1(new P.StateError("No elements"));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _StreamController: {
    "^": "Object;",
    get$isPaused: function() {
      var t1 = this._state;
      return (t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0;
    },
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      var t1, state;
      if ((this._state & 8) === 0) {
        t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      state = this._varData;
      state.get$varData();
      return state.get$varData();
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null) {
        t1 = (this._state & 2) !== 0 ? $.get$Future__nullFuture() : P._Future$(null);
        this._doneFuture = t1;
      }
      return t1;
    },
    add$1: [function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    close$0: function(_) {
      var t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      return this._ensureDoneFuture$0();
    },
    _async$_add$1: function(value) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace, null));
    },
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, e, s, exception, t1, result0;
      result = null;
      if ((this._state & 8) !== 0)
        result = this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      if (this.get$_onCancel() != null)
        if (result == null)
          try {
            result = this._onCancel$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = new H._StackTrace(exception, null);
            result0 = P._Future$(null);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }

        else
          result = result.whenComplete$1(this.get$_onCancel());
      t1 = new P._StreamController__recordCancel_complete(this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1: function(subscription) {
      if ((this._state & 8) !== 0)
        this._varData.pause$0(0);
      P._runGuarded(this.get$_onPause());
    },
    _recordResume$1: function(subscription) {
      if ((this._state & 8) !== 0)
        this._varData.resume$0();
      P._runGuarded(this.get$_onResume());
    }
  },
  _StreamController__subscribe_closure: {
    "^": "Closure:62;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    },
    $isFunction: true
  },
  _StreamController__recordCancel_complete: {
    "^": "Closure:16;this_0",
    call$0: [function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _SyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    _onCancel$0: function() {
      return this._onCancel.call$0();
    }
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;"
  },
  _SyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    _onCancel$0: function() {
      return this._onCancel.call$0();
    }
  },
  _StreamController__SyncStreamControllerDispatch: {
    "^": "_StreamController+_SyncStreamControllerDispatch;"
  },
  _ControllerStream: {
    "^": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this.get$_async$_controller()._recordCancel$1(this);
    },
    _onPause$0: [function() {
      this.get$_async$_controller()._recordPause$1(this);
    }, "call$0", "get$_onPause", 0, 0, 16],
    _onResume$0: [function() {
      this.get$_async$_controller()._recordResume$1(this);
    }, "call$0", "get$_onResume", 0, 0, 16]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_async$_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        this._pending.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      this._zone.toString;
      this._async$_onData = handleData;
    },
    onError$1: function(_, handleError) {
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      this._zone.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    get$_isInputPaused: function() {
      return (this._state & 4) !== 0;
    },
    get$isPaused: function() {
      return this._state >= 128;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 16],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 16],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0) {
        t1 = this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:16;this_0,error_1,stackTrace_2",
    call$0: [function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._zone;
      t3 = $.Zone__current;
      t2.toString;
      t3.toString;
      if (t3 == null ? t2 != null : t3 !== t2)
        P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
      else {
        t3 = t1._onError;
        t4 = H.getDynamicRuntimeType();
        t4 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t3);
        t5 = t1._onError;
        t6 = this.error_1;
        if (t4)
          t2.runBinaryGuarded$3(t5, t6, this.stackTrace_2);
        else
          t2.runUnaryGuarded$2(t5, t6);
      }
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:16;this_0",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(0, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:62;this_0,dispatch_1",
    call$0: [function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:62;future_0,error_1,stackTrace_2",
    call$0: [function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:75;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    },
    $isFunction: true
  },
  _cancelAndValue_closure: {
    "^": "Closure:62;future_0,value_1",
    call$0: [function() {
      return this.future_0._complete$1(this.value_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4, result;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      result = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      result._ForwardingStreamSubscription$2(this, cancelOnError, t1, t2);
      result.onData$1(onData);
      result.onError$1(0, onError);
      result.onDone$1(onDone);
      return result;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 16],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 16],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 76],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 77, 21, 22],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 16],
    _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  _MapStream: {
    "^": "_ForwardingStream;_transform,_async$_source",
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
        return;
      }

      sink._async$_add$1(outputEvent);
    }
  },
  _BaseZone: {
    "^": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    }
  },
  _BaseZone_bindCallback_closure: {
    "^": "Closure:62;this_0,registered_1",
    call$0: [function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BaseZone_bindCallback_closure0: {
    "^": "Closure:62;this_2,registered_3",
    call$0: [function() {
      return this.this_2.run$1(this.registered_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BaseZone_bindUnaryCallback_closure: {
    "^": "Closure:33;this_0,registered_1",
    call$1: [function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }, "call$1", null, 2, 0, null, 78, "call"],
    $isFunction: true
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "^": "Closure:33;this_2,registered_3",
    call$1: [function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }, "call$1", null, 2, 0, null, 78, "call"],
    $isFunction: true
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:62;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    },
    $isFunction: true
  },
  _rootHandleUncaughtError__closure: {
    "^": "Closure:62;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null && !!J.getInterceptor(t1).$isError)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    },
    $isFunction: true
  },
  _RootZone: {
    "^": "_BaseZone;",
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return P._rootRunBinary(this, null, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 23],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 24, 25],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (P.IterableBase__isToStringVisiting(iterable)) {
      if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
      return leftDelimiter + "..." + rightDelimiter;
    }
    parts = [];
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      P.IterableBase__iterablePartsToStrings(iterable, parts);
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = P.StringBuffer$(leftDelimiter);
    t1.writeAll$2(parts, ", ");
    t1.write$1(rightDelimiter);
    return t1._contents;
  },
  IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (P.IterableBase__isToStringVisiting(iterable))
      return leftDelimiter + "..." + rightDelimiter;
    buffer = P.StringBuffer$(leftDelimiter);
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      buffer.writeAll$2(iterable, ", ");
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    buffer.write$1(rightDelimiter);
    return buffer.get$_contents();
  },
  IterableBase__isToStringVisiting: function(o) {
    var i, t1;
    for (i = 0; t1 = $.get$IterableBase__toStringVisiting(), i < t1.length; ++i) {
      t1 = t1[i];
      if (o == null ? t1 == null : o === t1)
        return true;
    }
    return false;
  },
  IterableBase__iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result;
    t1 = {};
    if (P.IterableBase__isToStringVisiting(m))
      return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$IterableBase__toStringVisiting().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$IterableBase__toStringVisiting();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_collection$_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._collection$_keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._collection$_keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._collection$_keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._collection$_keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._collection$_keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:33;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._collection$_keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_collection$_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._collection$_keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._collection$_keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell.get$_collection$_value());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_collection$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:33;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_collection$_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.get$_next();
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_collection$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: true,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_collection$_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_collection$_element();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "SetBase;"
  },
  IterableBase: {
    "^": "Object;",
    map$1: function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element;
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        if (remaining === 0)
          return element;
        --remaining;
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  },
  ListBase: {
    "^": "Object_ListMixin;"
  },
  Object_ListMixin: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    toList$1$growable: function(receiver, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(receiver)), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  Maps_mapToString_closure: {
    "^": "Closure:68;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    },
    $isFunction: true
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    static: {"^": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  SetMixin: {
    "^": "Object;",
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(this, f), [H.getTypeArgumentByIndex(this, 0), null]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    },
    $isEfficientLength: true
  },
  SetBase: {
    "^": "SetMixin;"
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  _convertJsonToDart: function(json, reviver) {
    var revive = new P._convertJsonToDart_closure();
    return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
  },
  _parseJson: function(source, reviver) {
    var parsed, e, t1, exception;
    t1 = source;
    if (typeof t1 !== "string")
      throw H.wrapException(P.ArgumentError$(source));
    parsed = null;
    try {
      parsed = JSON.parse(source);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      throw H.wrapException(P.FormatException$(String(e)));
    }

    return P._convertJsonToDart(parsed, reviver);
  },
  _convertJsonToDart_closure: {
    "^": "Closure:68;",
    call$2: function(key, value) {
      return value;
    },
    $isFunction: true
  },
  _convertJsonToDart_walk: {
    "^": "Closure:33;revive_0",
    call$1: function(e) {
      var list, t1, i, keys, map, key, proto;
      if (e == null || typeof e != "object")
        return e;
      if (Object.getPrototypeOf(e) === Array.prototype) {
        list = e;
        for (t1 = this.revive_0, i = 0; i < list.length; ++i)
          list[i] = t1.call$2(i, this.call$1(list[i]));
        return list;
      }
      keys = Object.keys(e);
      map = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
        key = keys[i];
        map.$indexSet(0, key, t1.call$2(key, this.call$1(e[key])));
      }
      proto = e.__proto__;
      if (typeof proto !== "undefined" && proto !== Object.prototype)
        map.$indexSet(0, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
      return map;
    },
    $isFunction: true
  },
  Codec: {
    "^": "Object;"
  },
  Converter: {
    "^": "Object;"
  },
  JsonCodec: {
    "^": "Codec;_reviver,_toEncodable",
    decode$2$reviver: function(source, reviver) {
      return P._parseJson(source, this.get$decoder()._reviver);
    },
    decode$1: function(source) {
      return this.decode$2$reviver(source, null);
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    }
  },
  JsonDecoder: {
    "^": "Converter;_reviver"
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Function__toMangledNames: function(namedArguments) {
    return;
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 26],
  Error_safeToString: function(object) {
    var buffer, t1, i, t2, codeUnit;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10)
            t2 = buffer._contents += "\\n";
          else if (codeUnit === 13)
            t2 = buffer._contents += "\\r";
          else if (codeUnit === 9)
            t2 = buffer._contents += "\\t";
          else {
            t2 = buffer._contents += "\\x";
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = H.Primitives_stringFromCharCode(codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit);
            t2 = buffer._contents += t2;
          }
        else if (codeUnit === 92)
          t2 = buffer._contents += "\\\\";
        else if (codeUnit === 34)
          t2 = buffer._contents += "\\\"";
        else {
          t2 = H.Primitives_stringFromCharCode(codeUnit);
          t2 = buffer._contents += t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 27],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 28],
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  Function__toMangledNames_closure: {
    "^": "Closure:68;result_0",
    call$2: function(symbol, value) {
      this.result_0.$indexSet(0, symbol.get$_name(), value);
    },
    $isFunction: true
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:80;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(key.get$_name());
      t1.sb_0.write$1(": ");
      t1.sb_0.write$1(P.Error_safeToString(value));
      ++t1.i_1;
    },
    $isFunction: true
  },
  bool: {
    "^": "Object;",
    $isbool: true
  },
  "+bool": 0,
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    DateTime$_now$0: function() {
      H.Primitives_lazyAsJsDate(this);
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  $double: {
    "^": "num;",
    $is$double: true
  },
  "+double": 0,
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $tdiv: function(_, quotient) {
      if (quotient === 0)
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return this._duration <= other.get$_duration();
    },
    $ge: function(_, other) {
      return C.JSNumber_methods.$ge(this._duration, other.get$_duration());
    },
    get$inMilliseconds: function() {
      return C.JSNumber_methods._tdivFast$1(this._duration, 1000);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + P.Duration$(0, 0, -t2, 0, 0, 0).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
      return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:81;",
    call$1: function(n) {
      if (n >= 100000)
        return H.S(n);
      if (n >= 10000)
        return "0" + H.S(n);
      if (n >= 1000)
        return "00" + H.S(n);
      if (n >= 100)
        return "000" + H.S(n);
      if (n >= 10)
        return "0000" + H.S(n);
      return "00000" + H.S(n);
    },
    $isFunction: true
  },
  Duration_toString_twoDigits: {
    "^": "Closure:81;",
    call$1: function(n) {
      if (n >= 10)
        return H.S(n);
      return "0" + H.S(n);
    },
    $isFunction: true
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
      }}
  },
  NoSuchMethodError: {
    "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
    toString$0: function(_) {
      var t1, t2, t3, t4, t5, str;
      t1 = {};
      t1.sb_0 = P.StringBuffer$("");
      t1.i_1 = 0;
      for (t2 = this._core$_arguments, t3 = 0; t4 = t2.length, t3 < t4; t3 = ++t1.i_1) {
        if (t3 > 0) {
          t5 = t1.sb_0;
          t5._contents += ", ";
        }
        t5 = t1.sb_0;
        if (t3 < 0)
          return H.ioore(t2, t3);
        str = P.Error_safeToString(t2[t3]);
        t5._contents += typeof str === "string" ? str : H.S(str);
      }
      this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1));
      return "NoSuchMethodError : method not found: '" + this._memberName.toString$0(0) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + t1.sb_0._contents + "]";
    },
    static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "FormatException: " + H.S(this.message);
    },
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    static: {IntegerDivisionByZeroException$: function() {
        return new P.IntegerDivisionByZeroException();
      }}
  },
  Expando: {
    "^": "Object;name",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;",
    $isFunction: true
  },
  $int: {
    "^": "num;",
    $is$int: true
  },
  "+int": 0,
  Iterable: {
    "^": "Object;"
  },
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  "+List": 0,
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isnum: true
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }
  },
  Pattern: {
    "^": "Object;"
  },
  StackTrace: {
    "^": "Object;"
  },
  String: {
    "^": "Object;",
    $isString: true
  },
  "+String": 0,
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "^": "Object;"
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  CanvasElement_CanvasElement: function(height, width) {
    var e = document.createElement("canvas", null);
    if (width != null)
      J.set$width$x(e, width);
    if (height != null)
      J.set$height$x(e, height);
    return e;
  },
  ImageElement_ImageElement: function(height, src, width) {
    var e = document.createElement("img", null);
    if (src != null)
      J.set$src$x(e, src);
    return e;
  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "^": "HtmlElement;target}",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "^": "HtmlElement;target}",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  BaseElement: {
    "^": "HtmlElement;target}",
    "%": "HTMLBaseElement"
  },
  Blob: {
    "^": "Interceptor;",
    $isBlob: true,
    "%": "Blob|File"
  },
  BodyElement: {
    "^": "HtmlElement;",
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_error._eventType, false), [null]);
    },
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load0._eventType, false), [null]);
    },
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;name=,value%",
    "%": "HTMLButtonElement"
  },
  CanvasElement: {
    "^": "HtmlElement;height%,width%",
    getContext$2: function(receiver, contextId, attrs) {
      if (attrs != null)
        return receiver.getContext(contextId, P.convertDartToNative_Dictionary(attrs));
      return receiver.getContext(contextId);
    },
    getContext$1: function($receiver, contextId) {
      return this.getContext$2($receiver, contextId, null);
    },
    get$onWebGlContextLost: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_webglcontextlost._eventType, false), [null]);
    },
    get$onWebGlContextRestored: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_webglcontextrestored._eventType, false), [null]);
    },
    get$context2D: function(receiver) {
      return receiver.getContext("2d");
    },
    getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil: function(receiver, alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
      var options, context;
      options = P.LinkedHashMap_LinkedHashMap$_literal(["alpha", alpha, "depth", depth, "stencil", stencil, "antialias", antialias, "premultipliedAlpha", premultipliedAlpha, "preserveDrawingBuffer", preserveDrawingBuffer], null, null);
      context = this.getContext$2(receiver, "webgl", options);
      return context == null ? this.getContext$2(receiver, "experimental-webgl", options) : context;
    },
    getContext3d$0: function($receiver) {
      return this.getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil($receiver, true, true, true, true, false, false);
    },
    toDataUrl$2: function(receiver, type, quality) {
      return receiver.toDataURL(type, quality);
    },
    toDataUrl$0: function($receiver) {
      return this.toDataUrl$2($receiver, "image/png", null);
    },
    $isCanvasElement: true,
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext: {
    "^": "Interceptor;",
    "%": ";CanvasRenderingContext"
  },
  CanvasRenderingContext2D: {
    "^": "CanvasRenderingContext;fillStyle},font},globalAlpha},globalCompositeOperation},imageSmoothingEnabled},lineWidth%,strokeStyle},textBaseline}",
    clearRect$4: function(receiver, x, y, width, height) {
      return receiver.clearRect(x, y, width, height);
    },
    fillRect$4: function(receiver, x, y, width, height) {
      return receiver.fillRect(x, y, width, height);
    },
    getImageData$4: function(receiver, sx, sy, sw, sh) {
      return P.convertNativeToDart_ImageData(receiver.getImageData(sx, sy, sw, sh));
    },
    measureText$1: function(receiver, text) {
      return receiver.measureText(text);
    },
    putImageData$7: function(receiver, imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
      receiver.putImageData(P.convertDartToNative_ImageData(imagedata), dx, dy);
      return;
    },
    putImageData$3: function($receiver, imagedata, dx, dy) {
      return this.putImageData$7($receiver, imagedata, dx, dy, null, null, null, null);
    },
    setTransform$6: function(receiver, m11, m12, m21, m22, dx, dy) {
      return receiver.setTransform(m11, m12, m21, m22, dx, dy);
    },
    strokeText$4: function(receiver, text, x, y, maxWidth) {
      return receiver.strokeText(text, x, y, maxWidth);
    },
    strokeText$3: function($receiver, text, x, y) {
      return $receiver.strokeText(text, x, y);
    },
    drawImageScaledFromSource$9: function(receiver, source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
      return receiver.drawImage(source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
    },
    fillText$4: function(receiver, text, x, y, maxWidth) {
      receiver.fillText(text, x, y);
    },
    fillText$3: function($receiver, text, x, y) {
      return this.fillText$4($receiver, text, x, y, null);
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "^": "Node;length=",
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=",
    getPropertyValue$1: function(receiver, propertyName) {
      var propValue = receiver.getPropertyValue(propertyName);
      return propValue != null ? propValue : "";
    },
    setProperty$3: function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (value == null)
          value = "";
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }

    },
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  DeviceAcceleration: {
    "^": "Interceptor;x=,y=",
    "%": "DeviceAcceleration"
  },
  DocumentFragment: {
    "^": "Node;",
    get$children: function(receiver) {
      if (receiver._docChildren == null)
        receiver._docChildren = H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [null]);
      return receiver._docChildren;
    },
    "%": "DocumentFragment|ShadowRoot"
  },
  DomException: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  Element: {
    "^": "Node;",
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    get$client: function(receiver) {
      return P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientHeight)), null);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    click$0: [function(receiver) {
      return receiver.click();
    }, "call$0", "get$click", 0, 0, 16],
    getAttribute$1: function(receiver, $name) {
      return receiver.getAttribute($name);
    },
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_error._eventType, false), [null]);
    },
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load0._eventType, false), [null]);
    },
    get$onMouseDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_mousedown._eventType, false), [null]);
    },
    $isElement: true,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;height%,name=,src},width%",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "^": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;timeStamp=",
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    $isEvent: true,
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|InstallPhaseEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebKitAnimationEvent|WebKitTransitionEvent;Event|InputEvent"
  },
  EventTarget: {
    "^": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    addEventListener$2: function($receiver, type, listener) {
      listener = H.convertDartClosureToJS(listener, 1);
      return $receiver.addEventListener(type, listener);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    "%": "MediaStream;EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLFieldSetElement"
  },
  FormElement: {
    "^": "HtmlElement;length=,name=,target}",
    "%": "HTMLFormElement"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;",
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": "XMLHttpRequestUpload;XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;height%,name=,src},width%",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;data=,height=,width=",
    $isImageData: true,
    "%": "ImageData"
  },
  ImageElement: {
    "^": "HtmlElement;complete=,crossOrigin},height%,src},width%",
    $isImageElement: true,
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;height%,name=,src},value%,width%",
    $isElement: true,
    $isNode: true,
    "%": "HTMLInputElement"
  },
  KeyboardEvent: {
    "^": "UIEvent;",
    get$keyCode: function(receiver) {
      return receiver.keyCode;
    },
    "%": "KeyboardEvent"
  },
  KeygenElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "^": "HtmlElement;crossOrigin}",
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Location"
  },
  MapElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "^": "HtmlElement;crossOrigin},error=,src}",
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MetaElement: {
    "^": "HtmlElement;content=,name=",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLMeterElement"
  },
  MouseEvent: {
    "^": "UIEvent;",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point0(receiver.clientX, receiver.clientY), [null]);
    },
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  Node: {
    "^": "EventTarget;",
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    $isNode: true,
    "%": "Document|DocumentType|HTMLDocument|Notation|XMLDocument;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  ObjectElement: {
    "^": "HtmlElement;height%,name=,width%",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;name=,value%",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;name=,value%",
    "%": "HTMLParamElement"
  },
  ProgressElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLProgressElement"
  },
  ProgressEvent: {
    "^": "Event;",
    "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
  },
  ScriptElement: {
    "^": "HtmlElement;crossOrigin},src}",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;length=,name=,value%",
    "%": "HTMLSelectElement"
  },
  SourceElement: {
    "^": "HtmlElement;src}",
    "%": "HTMLSourceElement"
  },
  SpeechRecognitionError: {
    "^": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  TemplateElement: {
    "^": "HtmlElement;content=",
    "%": "HTMLTemplateElement"
  },
  TextAreaElement: {
    "^": "HtmlElement;name=,value%",
    "%": "HTMLTextAreaElement"
  },
  TextMetrics: {
    "^": "Interceptor;width=",
    "%": "TextMetrics"
  },
  Touch: {
    "^": "Interceptor;identifier=",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point0(receiver.clientX, receiver.clientY), [null]);
    },
    "%": "Touch"
  },
  TouchEvent: {
    "^": "UIEvent;changedTouches=",
    "%": "TouchEvent"
  },
  TouchList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "TouchList"
  },
  TrackElement: {
    "^": "HtmlElement;src}",
    "%": "HTMLTrackElement"
  },
  UIEvent: {
    "^": "Event;",
    "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"
  },
  VideoElement: {
    "^": "MediaElement;height%,width%",
    $isVideoElement: true,
    "%": "HTMLVideoElement"
  },
  Window: {
    "^": "EventTarget;",
    requestAnimationFrame$1: [function(receiver, callback) {
      this._ensureRequestAnimationFrame$0(receiver);
      return this._requestAnimationFrame$1(receiver, W._wrapZone(callback));
    }, "call$1", "get$requestAnimationFrame", 2, 0, 40],
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isWindow: true,
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "^": "Node;name=,value=",
    "%": "Attr"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle0)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4, hash;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      t4 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4);
      hash = 536870911 & t4 + ((67108863 & t4) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    $isRectangle0: true,
    $asRectangle0: function() {
      return [null];
    },
    "%": "ClientRect|DOMRect"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin2;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    get$content: function(receiver) {
      return this.getPropertyValue$1(receiver, "content");
    },
    set$cursor: function(receiver, value) {
      this.setProperty$3(receiver, "cursor", value, "");
    },
    set$display: function(receiver, value) {
      this.setProperty$3(receiver, "display", value, "");
    },
    get$height: function(receiver) {
      return this.getPropertyValue$1(receiver, "height");
    },
    get$width: function(receiver) {
      return this.getPropertyValue$1(receiver, "width");
    }
  },
  _ChildrenElementList: {
    "^": "ListBase;_element,_childElements",
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new H.ListIterator(t1, t1.length, 0, null);
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asObject_ListMixin: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    }
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this",
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asListBase: function() {
      return [W.Node];
    },
    $asObject_ListMixin: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin2: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin2: {
    "^": "Interceptor_ListMixin2+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  _AttributeMap: {
    "^": "Object;",
    forEach$1: function(_, f) {
      var t1, key;
      for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._current;
        f.call$2(key, this.$index(0, key));
      }
    },
    get$keys: function() {
      var attributes, keys, len, i;
      attributes = this._element.attributes;
      keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          keys.push(J.get$name$x(attributes[i]));
        }
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i;
      attributes = this._element.attributes;
      values = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          values.push(J.get$value$x(attributes[i]));
        }
      }
      return values;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    }
  },
  _ElementAttributeMap: {
    "^": "_AttributeMap;_element",
    containsKey$1: function(key) {
      return this._element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._element.setAttribute(key, value);
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  _DataAttributeMap: {
    "^": "Object;_attributes",
    containsKey$1: function(key) {
      return this._attributes._element.hasAttribute("data-" + this._toHyphenedName$1(key));
    },
    $index: function(_, key) {
      return this._attributes._element.getAttribute("data-" + this._toHyphenedName$1(key));
    },
    $indexSet: function(_, key, value) {
      this._attributes._element.setAttribute("data-" + this._toHyphenedName$1(key), value);
    },
    forEach$1: function(_, f) {
      this._attributes.forEach$1(0, new W._DataAttributeMap_forEach_closure(this, f));
    },
    get$keys: function() {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this._attributes.forEach$1(0, new W._DataAttributeMap_keys_closure(this, keys));
      return keys;
    },
    get$values: function(_) {
      var values = H.setRuntimeTypeInfo([], [P.String]);
      this._attributes.forEach$1(0, new W._DataAttributeMap_values_closure(this, values));
      return values;
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    _toCamelCase$2$startUppercase: function(hyphenedName, startUppercase) {
      var segments, start, i, segment, t1;
      segments = hyphenedName.split("-");
      start = startUppercase ? 0 : 1;
      for (i = start; i < segments.length; ++i) {
        segment = segments[i];
        t1 = J.getInterceptor$asx(segment);
        if (J.$gt$n(t1.get$length(segment), 0)) {
          t1 = J.toUpperCase$0$s(t1.$index(segment, 0)) + t1.substring$1(segment, 1);
          if (i >= segments.length)
            return H.ioore(segments, i);
          segments[i] = t1;
        }
      }
      return C.JSArray_methods.join$1(segments, "");
    },
    _toCamelCase$1: function(hyphenedName) {
      return this._toCamelCase$2$startUppercase(hyphenedName, false);
    },
    _toHyphenedName$1: function(word) {
      var sb, t1, i, t2, lower;
      sb = P.StringBuffer$("");
      t1 = J.getInterceptor$asx(word);
      i = 0;
      while (true) {
        t2 = t1.get$length(word);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        lower = J.toLowerCase$0$s(t1.$index(word, i));
        if (!J.$eq(t1.$index(word, i), lower) && i > 0)
          sb._contents += "-";
        sb._contents += lower;
        ++i;
      }
      return sb._contents;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    }
  },
  _DataAttributeMap_forEach_closure: {
    "^": "Closure:82;this_0,f_1",
    call$2: function(key, value) {
      var t1 = J.getInterceptor$s(key);
      if (t1.startsWith$1(key, "data-"))
        this.f_1.call$2(this.this_0._toCamelCase$1(t1.substring$1(key, 5)), value);
    },
    $isFunction: true
  },
  _DataAttributeMap_keys_closure: {
    "^": "Closure:82;this_0,keys_1",
    call$2: function(key, value) {
      var t1 = J.getInterceptor$s(key);
      if (t1.startsWith$1(key, "data-"))
        this.keys_1.push(this.this_0._toCamelCase$1(t1.substring$1(key, 5)));
    },
    $isFunction: true
  },
  _DataAttributeMap_values_closure: {
    "^": "Closure:82;this_0,values_1",
    call$2: function(key, value) {
      if (J.startsWith$1$s(key, "data-"))
        this.values_1.push(value);
    },
    $isFunction: true
  },
  EventStreamProvider: {
    "^": "Object;_eventType"
  },
  _EventStream: {
    "^": "Stream;_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_target,_eventType,_useCapture"
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
    cancel$0: function() {
      if (this._target == null)
        return;
      this._unlisten$0();
      this._target = null;
      this._onData = null;
      return;
    },
    pause$1: function(_, resumeSignal) {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    get$isPaused: function() {
      return this._pauseCount > 0;
    },
    resume$0: function() {
      if (this._target == null || this._pauseCount <= 0)
        return;
      --this._pauseCount;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    }
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_html$_length,_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  }
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": "",
  KeyRange: {
    "^": "Interceptor;",
    $isKeyRange: true,
    "%": "IDBKeyRange"
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  FEBlendElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGAElement|SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGPatternElement"
  },
  Rect: {
    "^": "Interceptor;height=,width=,x=,y=",
    "%": "SVGRect"
  },
  RectElement: {
    "^": "GeometryElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  SvgElement: {
    "^": "Element;",
    get$children: function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
    },
    click$0: [function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot invoke click SVG."));
    }, "call$0", "get$click", 0, 0, 16],
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_error._eventType, false), [null]);
    },
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load0._eventType, false), [null]);
    },
    get$onMouseDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_mousedown._eventType, false), [null]);
    },
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGUseElement"
  }
}],
["dart.dom.web_gl", "dart:web_gl", , P, {
  "^": "",
  ContextEvent: {
    "^": "Event;",
    "%": "WebGLContextEvent"
  },
  RenderingContext: {
    "^": "CanvasRenderingContext;",
    activeTexture$1: function(receiver, texture) {
      return receiver.activeTexture(texture);
    },
    attachShader$2: function(receiver, program, shader) {
      return receiver.attachShader(program, shader);
    },
    bindBuffer$2: function(receiver, target, buffer) {
      return receiver.bindBuffer(target, buffer);
    },
    bindFramebuffer$2: function(receiver, target, framebuffer) {
      return receiver.bindFramebuffer(target, framebuffer);
    },
    bindTexture$2: function(receiver, target, texture) {
      return receiver.bindTexture(target, texture);
    },
    blendFunc$2: function(receiver, sfactor, dfactor) {
      return receiver.blendFunc(sfactor, dfactor);
    },
    bufferData$3: function(receiver, target, data_OR_size, usage) {
      return receiver.bufferData(target, data_OR_size, usage);
    },
    bufferSubData$3: function(receiver, target, offset, data) {
      return receiver.bufferSubData(target, offset, data);
    },
    clear$1: function(receiver, mask) {
      return receiver.clear(mask);
    },
    clearColor$4: function(receiver, red, green, blue, alpha) {
      return receiver.clearColor(red, green, blue, alpha);
    },
    colorMask$4: function(receiver, red, green, blue, alpha) {
      return receiver.colorMask(red, green, blue, alpha);
    },
    compileShader$1: function(receiver, shader) {
      return receiver.compileShader(shader);
    },
    createBuffer$0: function(receiver) {
      return receiver.createBuffer();
    },
    createProgram$0: function(receiver) {
      return receiver.createProgram();
    },
    createShader$1: function(receiver, type) {
      return receiver.createShader(type);
    },
    createTexture$0: function(receiver) {
      return receiver.createTexture();
    },
    deleteTexture$1: function(receiver, texture) {
      return receiver.deleteTexture(texture);
    },
    disable$1: function(receiver, cap) {
      return receiver.disable(cap);
    },
    disableVertexAttribArray$1: function(receiver, index) {
      return receiver.disableVertexAttribArray(index);
    },
    drawElements$4: function(receiver, mode, count, type, offset) {
      return receiver.drawElements(mode, count, type, offset);
    },
    enable$1: function(receiver, cap) {
      return receiver.enable(cap);
    },
    enableVertexAttribArray$1: function(receiver, index) {
      return receiver.enableVertexAttribArray(index);
    },
    getAttribLocation$2: function(receiver, program, $name) {
      return receiver.getAttribLocation(program, $name);
    },
    getProgramParameter$2: function(receiver, program, pname) {
      return receiver.getProgramParameter(program, pname);
    },
    getShaderInfoLog$1: function(receiver, shader) {
      return receiver.getShaderInfoLog(shader);
    },
    getShaderParameter$2: function(receiver, shader, pname) {
      return receiver.getShaderParameter(shader, pname);
    },
    getUniformLocation$2: function(receiver, program, $name) {
      return receiver.getUniformLocation(program, $name);
    },
    lineWidth$1: [function(receiver, width) {
      return receiver.lineWidth(width);
    }, "call$1", "get$lineWidth", 2, 0, 36, 41],
    linkProgram$1: function(receiver, program) {
      return receiver.linkProgram(program);
    },
    pixelStorei$2: function(receiver, pname, param) {
      return receiver.pixelStorei(pname, param);
    },
    shaderSource$2: function(receiver, shader, string) {
      return receiver.shaderSource(shader, string);
    },
    texImage2D$9: function(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
      var t1;
      if (border_OR_canvas_OR_image_OR_pixels_OR_video == null && format == null && type == null && true) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, P.convertDartToNative_ImageData(border_OR_canvas_OR_image_OR_pixels_OR_video));
        return;
      }
      t1 = J.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video);
      if ((!!t1.$isImageElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && format == null && type == null && true) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if ((!!t1.$isCanvasElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && format == null && type == null && true) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if ((!!t1.$isVideoElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && format == null && type == null && true) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      throw H.wrapException(P.ArgumentError$("Incorrect number or type of arguments"));
    },
    texImage2D$6: function($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video) {
      return this.texImage2D$9($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, null, null, null);
    },
    texParameteri$3: function(receiver, target, pname, param) {
      return receiver.texParameteri(target, pname, param);
    },
    uniform1f$2: [function(receiver, $location, x) {
      return receiver.uniform1f($location, x);
    }, "call$2", "get$uniform1f", 4, 0, 42, 43, 44],
    uniform1i$2: [function(receiver, $location, x) {
      return receiver.uniform1i($location, x);
    }, "call$2", "get$uniform1i", 4, 0, 45, 43, 44],
    uniform2f$3: [function(receiver, $location, x, y) {
      return receiver.uniform2f($location, x, y);
    }, "call$3", "get$uniform2f", 6, 0, 46, 43, 44, 47],
    uniform2fv$2: [function(receiver, $location, v) {
      return receiver.uniform2fv($location, v);
    }, "call$2", "get$uniform2fv", 4, 0, 48, 43, 49],
    uniform2i$3: [function(receiver, $location, x, y) {
      return receiver.uniform2i($location, x, y);
    }, "call$3", "get$uniform2i", 6, 0, 50, 43, 44, 47],
    uniform3f$4: [function(receiver, $location, x, y, z) {
      return receiver.uniform3f($location, x, y, z);
    }, "call$4", "get$uniform3f", 8, 0, 51, 43, 44, 47, 52],
    uniform3fv$2: [function(receiver, $location, v) {
      return receiver.uniform3fv($location, v);
    }, "call$2", "get$uniform3fv", 4, 0, 48, 43, 49],
    uniform3i$4: [function(receiver, $location, x, y, z) {
      return receiver.uniform3i($location, x, y, z);
    }, "call$4", "get$uniform3i", 8, 0, 53, 43, 44, 47, 52],
    uniform4f$5: [function(receiver, $location, x, y, z, w) {
      return receiver.uniform4f($location, x, y, z, w);
    }, "call$5", "get$uniform4f", 10, 0, 54, 43, 44, 47, 52, 55],
    uniform4fv$2: [function(receiver, $location, v) {
      return receiver.uniform4fv($location, v);
    }, "call$2", "get$uniform4fv", 4, 0, 48, 43, 49],
    uniform4i$5: [function(receiver, $location, x, y, z, w) {
      return receiver.uniform4i($location, x, y, z, w);
    }, "call$5", "get$uniform4i", 10, 0, 56, 43, 44, 47, 52, 55],
    useProgram$1: function(receiver, program) {
      return receiver.useProgram(program);
    },
    vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
      return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
    },
    viewport$4: function(receiver, x, y, width, height) {
      return receiver.viewport(x, y, width, height);
    },
    "%": "WebGLRenderingContext"
  },
  UniformLocation: {
    "^": "Interceptor;",
    "%": "WebGLUniformLocation"
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  ReceivePort_ReceivePort: function() {
    var t1, t2, t3;
    t1 = $.RawReceivePortImpl__nextFreeId;
    $.RawReceivePortImpl__nextFreeId = t1 + 1;
    t2 = new H.RawReceivePortImpl(t1, null, false);
    t3 = init.globalState.currentContext;
    t3._addRegistration$2(t1, t2);
    t3._updateGlobalState$0();
    t3 = new H.ReceivePortImpl(t2, null);
    t3.ReceivePortImpl$fromRawReceivePort$1(t2);
    return t3;
  },
  Capability: {
    "^": "Object;",
    $isCapability: true,
    static: {Capability_Capability: function() {
        return new H.CapabilityImpl((Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296);
      }}
  }
}],
["dart.js", "dart:js", , P, {
  "^": "",
  _callDartFunction: [function(callback, captureThis, $self, $arguments) {
    var arguments0;
    if (captureThis === true) {
      arguments0 = [$self];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      $arguments = arguments0;
    }
    return P._convertToJS(H.Primitives_applyFunction(callback, P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure()), true, null), P.Function__toMangledNames(null)));
  }, "call$4", "_callDartFunction$closure", 8, 0, null, 29, 30, 31, 32],
  _defineProperty: function(o, $name, value) {
    var exception;
    if (Object.isExtensible(o))
      try {
        Object.defineProperty(o, $name, {value: value});
        return true;
      } catch (exception) {
        H.unwrapException(exception);
      }

    return false;
  },
  _getOwnProperty: function(o, $name) {
    if (Object.prototype.hasOwnProperty.call(o, $name))
      return o[$name];
    return;
  },
  _convertToJS: [function(o) {
    var t1;
    if (o == null)
      return;
    else if (typeof o === "string" || typeof o === "number" || typeof o === "boolean")
      return o;
    else {
      t1 = J.getInterceptor(o);
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      else if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      else if (!!t1.$isJsObject)
        return o._jsObject;
      else if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      else
        return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.get$_dartProxyCtor()));
    }
  }, "call$1", "_convertToJS$closure", 2, 0, 33, 34],
  _getJsProxy: function(o, propertyName, createProxy) {
    var jsProxy = P._getOwnProperty(o, propertyName);
    if (jsProxy == null) {
      jsProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, jsProxy);
    }
    return jsProxy;
  },
  _convertToDart: [function(o) {
    var t1;
    if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
      return o;
    else {
      if (o instanceof Object) {
        t1 = J.getInterceptor(o);
        t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
      } else
        t1 = false;
      if (t1)
        return o;
      else if (o instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
      else if (o.constructor === $.get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }
  }, "call$1", "_convertToDart$closure", 2, 0, 35, 34],
  _wrapToDart: function(o) {
    if (typeof o == "function")
      return P._getDartProxy(o, $.get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
    else if (o instanceof Array)
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
    else
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
  },
  _getDartProxy: function(o, propertyName, createProxy) {
    var dartProxy = P._getOwnProperty(o, propertyName);
    if (dartProxy == null || !(o instanceof Object)) {
      dartProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, dartProxy);
    }
    return dartProxy;
  },
  JsObject: {
    "^": "Object;_jsObject",
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isJsObject && this._jsObject === other._jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return P.Object.prototype.toString$0.call(this, this);
      }

    },
    callMethod$2: function(method, args) {
      var t1, t2;
      t1 = this._jsObject;
      t2 = args == null ? null : P.List_List$from(H.setRuntimeTypeInfo(new H.MappedListIterable(args, P._convertToJS$closure()), [null, null]), true, null);
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    $isJsObject: true,
    static: {JsObject_JsObject$fromBrowserObject: function(object) {
        if (typeof object === "number" || typeof object === "string" || typeof object === "boolean" || object == null)
          throw H.wrapException(P.ArgumentError$("object cannot be a num, string, bool, or null"));
        return P._wrapToDart(P._convertToJS(object));
      }}
  },
  JsFunction: {
    "^": "JsObject;_jsObject",
    apply$2$thisArg: function(args, thisArg) {
      var t1, t2;
      t1 = P._convertToJS(thisArg);
      t2 = P.List_List$from(H.setRuntimeTypeInfo(new H.MappedListIterable(args, P._convertToJS$closure()), [null, null]), true, null);
      return P._convertToDart(this._jsObject.apply(t1, t2));
    }
  },
  JsArray: {
    "^": "JsObject_ListMixin;_jsObject",
    $index: function(_, index) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this)));
      }
      return P.JsObject.prototype.$index.call(this, this, index);
    },
    $indexSet: function(_, index, value) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this)));
      }
      P.JsObject.prototype.$indexSet.call(this, this, index, value);
    },
    get$length: function(_) {
      var len = this._jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      P.JsObject.prototype.$indexSet.call(this, this, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [value]);
    }
  },
  JsObject_ListMixin: {
    "^": "JsObject+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  _convertToJS_closure: {
    "^": "Closure:33;",
    call$1: function(o) {
      var jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunction, o, false);
      P._defineProperty(jsFunction, $.get$_DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $isFunction: true
  },
  _convertToJS_closure0: {
    "^": "Closure:33;ctor_0",
    call$1: function(o) {
      return new this.ctor_0(o);
    },
    $isFunction: true
  },
  _wrapToDart_closure: {
    "^": "Closure:33;",
    call$1: function(o) {
      return new P.JsFunction(o);
    },
    $isFunction: true
  },
  _wrapToDart_closure0: {
    "^": "Closure:33;",
    call$1: function(o) {
      return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
    },
    $isFunction: true
  },
  _wrapToDart_closure1: {
    "^": "Closure:33;",
    call$1: function(o) {
      return new P.JsObject(o);
    },
    $isFunction: true
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    var t1;
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0)
        t1 = b === 0 ? 1 / b < 0 : b < 0;
      else
        t1 = false;
      if (t1 || isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
  },
  Point0: {
    "^": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isPoint0)
        return false;
      t1 = this.x;
      t2 = other.x;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.y;
        t2 = other.y;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point0(t1 + t3, t4 + t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point0(t1 - t3, t4 - t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $mul: function(_, factor) {
      var t1, t2;
      t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof factor !== "number")
        return H.iae(factor);
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 = new P.Point0(t1 * factor, t2 * factor);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $isPoint0: true
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      return this.get$left(this) + this.width;
    },
    get$bottom: function(_) {
      return this.get$top(this) + this.height;
    },
    toString$0: function(_) {
      return "Rectangle (" + this.get$left(this) + ", " + this.top + ") " + this.width + " x " + this.height;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle0)
        return false;
      if (this.get$left(this) === t1.get$left(other)) {
        t2 = this.top;
        t1 = t2 === t1.get$top(other) && this.left + this.width === t1.get$right(other) && t2 + this.height === t1.get$bottom(other);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this.top;
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, this.get$left(this) & 0x1FFFFFFF), t1 & 0x1FFFFFFF), this.left + this.width & 0x1FFFFFFF), t1 + this.height & 0x1FFFFFFF));
    }
  },
  Rectangle0: {
    "^": "_RectangleBase;left>,top>,width>,height>",
    $isRectangle0: true,
    $asRectangle0: null,
    static: {Rectangle$: function(left, $top, width, height, $T) {
        var t1, t2;
        t1 = width < 0 ? -width * 0 : width;
        t2 = height < 0 ? -height * 0 : height;
        return H.setRuntimeTypeInfo(new P.Rectangle0(left, $top, t1, t2), [$T]);
      }}
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  "^": "",
  Float32List: {
    "^": "Object;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isTypedData: true
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  _ensureNativeList: function(list) {
    return list;
  },
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    _checkSublistArguments$3: function(receiver, start, end, $length) {
      var t1 = $length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end));
      return end;
    },
    $isTypedData: true,
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeByteData: {
    "^": "NativeTypedData;",
    $isTypedData: true,
    "%": "DataView"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isTypedData: true,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isTypedData: true,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isTypedData: true,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isTypedData: true,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isTypedData: true,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isTypedData: true,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isTypedData: true,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isTypedData: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isTypedData: true,
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  convertDartToNative_Dictionary: function(dict) {
    var object;
    if (dict == null)
      return;
    object = {};
    dict.forEach$1(0, new P.convertDartToNative_Dictionary_closure(object));
    return object;
  },
  convertNativeToDart_ImageData: function(nativeImageData) {
    var t1, data;
    t1 = J.getInterceptor(nativeImageData);
    if (!!t1.$isImageData) {
      data = t1.get$data(nativeImageData);
      if (data.constructor === Array)
        if (typeof CanvasPixelArray !== "undefined") {
          data.constructor = CanvasPixelArray;
          data.BYTES_PER_ELEMENT = 1;
        }
      return nativeImageData;
    }
    return new P._TypedImageData(nativeImageData.data, nativeImageData.height, nativeImageData.width);
  },
  convertDartToNative_ImageData: function(imageData) {
    if (!!J.getInterceptor(imageData).$is_TypedImageData)
      return {data: imageData.data, height: imageData.height, width: imageData.width};
    return imageData;
  },
  convertDartToNative_Dictionary_closure: {
    "^": "Closure:69;object_0",
    call$2: function(key, value) {
      this.object_0[key] = value;
    },
    $isFunction: true
  },
  _TypedImageData: {
    "^": "Object;data>,height>,width>",
    $is_TypedImageData: true,
    $isImageData: true
  },
  FilteredElementList: {
    "^": "ListBase;_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    },
    forEach$1: function(_, f) {
      H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len = this.get$_filtered().length;
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    removeRange$2: function(_, start, end) {
      H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1 = this.get$_filtered();
      return new H.ListIterator(t1, t1.length, 0, null);
    }
  },
  FilteredElementList__filtered_closure: {
    "^": "Closure:33;",
    call$1: function(n) {
      return !!J.getInterceptor(n).$isElement;
    },
    $isFunction: true
  },
  FilteredElementList_removeRange_closure: {
    "^": "Closure:33;",
    call$1: function(el) {
      return J.remove$0$ax(el);
    },
    $isFunction: true
  }
}],
["ld30", "main.dart", , M, {
  "^": "",
  animate: [function(time) {
    var passedTime, t1, t2, t3, t4, t5, t6, currFacingRight, t7, t8, t9;
    $.currentTime = time;
    passedTime = J.$sub$n(time, $.lastTime);
    $.dt = J.$mul$ns(J.$gt$n(passedTime, 100) ? 100 : passedTime, 0.06);
    t1 = $.get$game();
    t2 = t1.startText;
    t3 = $.width;
    if (typeof t3 !== "number")
      return t3.$div();
    t2.position.x = t3 / 2 - J.$div$n(t2.get$width(t2), 2);
    t2 = t1.startText;
    t3 = $.height;
    if (typeof t3 !== "number")
      return t3.$div();
    t2.position.y = t3 / 2 - J.$div$n(t2.get$height(t2), 2);
    t1.cutsceneManager.update$0();
    t2 = t1.world;
    t3 = t2.map;
    t4 = t2.game.camera;
    t5 = t3.position;
    t5.x = J.$sub$n(t4.x, 10);
    t6 = $.height;
    if (typeof t6 !== "number")
      return t6.$le();
    t4 = t4.y;
    if (t6 <= 224) {
      t4 = J.$add$ns(t4, 5);
      t5.y = t4;
    } else {
      t4 = J.$add$ns(t4, 10);
      t5.y = t4;
    }
    t2 = t2.foreground;
    t6 = t2.position;
    t6.x = t5.x;
    t6.y = t4;
    t2.set$width(0, J.$mul$ns(t3.scale.x, t3.texture.get$frame().width));
    t2.set$height(0, J.$mul$ns(t3.scale.y, t3.texture.get$frame().height));
    t2 = $.currentState;
    t3 = $.get$states().$index(0, "paused");
    if (t2 == null ? t3 != null : t2 !== t3) {
      t2 = t1.player;
      currFacingRight = t2.facingRight;
      t3 = t2.view;
      t4 = t2.realAnimationSpeed;
      t5 = $.dt;
      if (typeof t5 !== "number")
        return H.iae(t5);
      t3.animationSpeed = t4 * t5;
      t5 = t2.game;
      t5.collisionManager.floorCheck$1(t2);
      if (!t2.grounded) {
        t3 = t2.acceleration;
        t3.y = J.$add$ns(t3.y, t5.gravity);
      } else {
        t3 = t2.acceleration;
        t3.y = 0;
      }
      if (J.$gt$n(t3.x, 0)) {
        t4 = t3.x;
        t6 = t2.drag;
        if (J.$gt$n(t4, t6))
          t3.x = J.$sub$n(t3.x, t6);
        else
          t3.x = 0;
      }
      if (J.$lt$n(t3.x, 0)) {
        t4 = t3.x;
        t6 = t2.drag;
        if (J.$lt$n(t4, -t6))
          t3.x = J.$add$ns(t3.x, t6);
        else
          t3.x = 0;
      }
      if (t5.inputHelper._keys.containsKey$1(68) || t5.inputHelper._keys.containsKey$1(39)) {
        if (J.$le$n(t3.x, t2.maxSpeed))
          t3.x = J.$add$ns(t3.x, 2);
        t2.facingRight = true;
      }
      if (t5.inputHelper._keys.containsKey$1(65) || t5.inputHelper._keys.containsKey$1(37)) {
        if (J.$ge$n(t3.x, -t2.maxSpeed))
          t3.x = J.$sub$n(t3.x, 2);
        t2.facingRight = false;
      }
      t4 = t2.position;
      t4.y = J.$add$ns(t4.y, t3.y);
      t2.view.position.x = J.$mul$ns(t4.x, $.modulo);
      t2.view.position.y = J.$mul$ns(t4.y, $.modulo);
      t6 = J.$add$ns(t2.view.position.x, J.$mul$ns(t3.x, $.modulo));
      t7 = $.width;
      if (typeof t7 !== "number")
        return t7.$div();
      if (J.$gt$n(t6, t7 / 2)) {
        t4 = t5.camera;
        t6 = J.$sub$n(t4.x, J.$mul$ns(t3.x, $.modulo));
        t7 = t5.world.map;
        if (J.$lt$n(t6, J.$mul$ns(t7.scale.x, t7.texture.get$frame().width)))
          t4.x = J.$sub$n(t4.x, J.$mul$ns(t3.x, $.modulo));
      } else if (J.$lt$n(J.$add$ns(t2.view.position.x, J.$mul$ns(t3.x, $.modulo)), 50 * $.modulo)) {
        t4 = t5.camera;
        if (J.$lt$n(J.$sub$n(t4.x, J.$mul$ns(t3.x, $.modulo)), 0))
          t4.x = J.$sub$n(t4.x, J.$mul$ns(t3.x, $.modulo));
      } else
        t4.x = J.$add$ns(t4.x, t3.x);
      if (currFacingRight !== t2.facingRight) {
        t4 = t2.view.scale;
        t4.x = J.$mul$ns(t4.x, -1);
        t4 = t2.view;
        t6 = J.$div$n(J.$mul$ns(t4.scale.x, t4.texture.get$frame().width), 2);
        t7 = t2.view;
        t8 = t7.scale.x;
        t9 = J.getInterceptor$ns(t8);
        t4.position.x = t6 - J.$div$n(t9.$mul(t8, t9.$mul(t8, t7.texture.get$frame().width)), 2);
      }
      if (J.$eq(t3.x, 0))
        t2.view.textures = t2.idleFrames;
      else
        t2.view.textures = t2.runningFrames;
      if (t5.inputHelper._keys.containsKey$1(32) || t5.inputHelper._keys.containsKey$1(13) || t5.inputHelper._keys.containsKey$1(90) || t5.inputHelper._keys.containsKey$1(88) || t5.inputHelper._keys.containsKey$1(96) || t5.inputHelper._keys.containsKey$1(16) || t5.inputHelper._keys.containsKey$1(190))
        if (J.$gt$n(J.$sub$n($.currentTime, t2.lastBulletShot), t2.shotDelay)) {
          t3 = t5.bulletManager;
          t4 = t2.view.position;
          t5 = t4.x;
          t4 = t4.y;
          t6 = t2.facingRight ? 1 : -1;
          t7 = t3.bulletPool;
          t3 = t3.game;
          t8 = new M.Point(null, null);
          t8.x = 0;
          t8.y = 0;
          t9 = new M.Point(null, null);
          t9.x = 0;
          t9.y = 0;
          t9 = new M.Bullet(false, false, true, 2.5, t3, t8, t9, M.Sprite_fromFrame("fireball.png"));
          t9.Bullet$4(t3, t5, t4, t6);
          t7.push(t9);
          t2.lastBulletShot = $.currentTime;
        }
      t1.npcManager.update$0();
      t1.bulletManager.update$0();
      t1.npcManager.update$0();
    }
    t1.inputHelper.update$0();
    $.get$renderer().render$1($.get$stage());
    $.get$requestAnimFrame().call$1(M.animate$closure());
    $.lastTime = $.currentTime;
  }, "call$1", "animate$closure", 2, 0, 36, 37],
  main: [function() {
    var t1, progressBar, t2;
    t1 = {};
    J.set$display$x($.get$renderer().view.style, "none");
    document.body.appendChild($.get$renderer().view);
    progressBar = document.querySelector("#progressBar");
    t1.loaded_0 = 0;
    t2 = $.get$loader();
    t2.onProgress = new M.main_closure(t1, progressBar);
    t2.onComplete = new M.main_closure0(progressBar);
    t2 = J.get$onLoad$x($.get$worldColl());
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new M.main_closure1()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
    t2 = H.setRuntimeTypeInfo(new W._EventStream(window, C.EventStreamProvider_resize._eventType, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(M.resize$closure()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
    C.Window_methods.addEventListener$2(window, "orientationchange", M.resize$closure());
  }, "call$0", "main$closure", 0, 0, 16],
  resize: [function(_) {
    var t1, t2, t3, t4, i, tempBullet, tempEnemy;
    t1 = window.innerWidth;
    if (typeof t1 !== "number")
      return t1.$gt();
    if (t1 > 1920)
      $.width = 1920;
    else
      $.width = window.innerWidth;
    t1 = window.innerHeight;
    if (typeof t1 !== "number")
      return t1.$gt();
    if (t1 > 1080) {
      $.height = 1080;
      t1 = 1080;
    } else {
      t1 = window.innerHeight;
      $.height = t1;
    }
    if (typeof t1 !== "number")
      return t1.$tdiv();
    t1 = C.JSInt_methods._tdivFast$1(t1, 224) + 1;
    $.modulo = t1;
    P.print("Scale: " + C.JSInt_methods.toString$0(t1));
    t1 = $.width;
    t2 = $.height;
    if (typeof t1 !== "number")
      return t1.$gt();
    if (typeof t2 !== "number")
      return H.iae(t2);
    if (t1 > t2) {
      $.currentState = $.get$states().$index(0, "playing");
      t1 = $.get$game().player;
      t1.view.set$height(0, J.$mul$ns(t1.originalHeight, $.modulo));
      t1 = $.get$game().player;
      t1.view.set$width(0, J.$mul$ns(t1.originalWidth, $.modulo));
      t1 = $.get$game().player.position;
      t1.y = J.$div$n(t1.y, $.modulo);
      t1 = $.get$game().world;
      t1.map.set$height(0, J.$mul$ns(t1.originalHeight, $.modulo));
      t1 = $.get$game().world;
      t1.map.set$width(0, J.$mul$ns(t1.originalWidth, $.modulo));
      t1 = $.get$game();
      t2 = t1.camera;
      t3 = $.height;
      t1 = J.$mul$ns(t1.world.originalHeight, $.modulo);
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2.y = t3 - t1;
      t1 = $.get$game().world;
      t3 = t1.myCanvas;
      t1 = t1.map;
      J.set$height$x(t3, J.round$0$n(J.$mul$ns(t1.scale.y, t1.texture.get$frame().height)));
      t1 = $.get$game().world;
      t3 = t1.myCanvas;
      t1 = t1.map;
      J.set$width$x(t3, J.round$0$n(J.$mul$ns(t1.scale.x, t1.texture.get$frame().width)));
      t1 = $.get$game().world;
      t3 = t1.CanvasCtx;
      t2 = $.get$worldColl();
      t1 = t1.map;
      t1 = J.$mul$ns(t1.scale.x, t1.texture.get$frame().width);
      t4 = $.get$game().world.map;
      t3.drawImage(t2, 0, 0, t1, J.$mul$ns(t4.scale.y, t4.texture.get$frame().height));
      t4 = $.get$game().inputHelper;
      t1 = t4.leftTouch;
      t2 = $.width;
      if (typeof t2 !== "number")
        return t2.$div();
      t3 = $.height;
      t1.hitArea = new M.Rectangle(0, 0, t2 / 4, t3);
      t1 = t2 / 4;
      t4.rightTouch.hitArea = new M.Rectangle(t1, 0, t1, t3);
      t2 /= 2;
      t4.shootTouch.hitArea = new M.Rectangle(t2, 0, t2, t3);
      for (i = 0; t1 = $.get$game().bulletManager.bulletPool, i < t1.length; ++i) {
        tempBullet = t1[i];
        t1 = tempBullet.view;
        t2 = tempBullet.origSize;
        t3 = J.$mul$ns(t2.x, $.modulo);
        t1.scale.x = J.$div$n(t3, t1.texture.get$frame().width);
        t1.PIXI$Sprite$_width = t3;
        t3 = tempBullet.view;
        t2 = J.$mul$ns(t2.y, $.modulo);
        t3.scale.y = J.$div$n(t2, t3.texture.get$frame().height);
        t3.PIXI$Sprite$_height = t2;
      }
      for (i = 0; t1 = $.get$game().npcManager.allyPool, i < t1.length; ++i) {
        tempEnemy = t1[i];
        t1 = tempEnemy.view;
        t2 = J.$mul$ns(tempEnemy.originalHeight, $.modulo);
        t1.scale.y = J.$div$n(t2, t1.texture.get$frame().height);
        t1.PIXI$Sprite$_height = t2;
        t2 = tempEnemy.view;
        t1 = J.$mul$ns(tempEnemy.originalWidth, $.modulo);
        t2.scale.x = J.$div$n(t1, t2.texture.get$frame().width);
        t2.PIXI$Sprite$_width = t1;
        t1 = tempEnemy.position;
        t1.y = J.$div$n(t1.y, $.modulo);
      }
    } else
      $.currentState = $.get$states().$index(0, "paused");
    $.get$renderer().resize$2(0, $.width, $.height);
  }, function() {
    return M.resize(null);
  }, null, "call$1", "call$0", "resize$closure", 0, 2, 38, 20, 39],
  BulletManager: {
    "^": "Object;game,bulletPool",
    update$0: function() {
      var t1, i;
      for (t1 = this.bulletPool, i = 0; i < t1.length; ++i) {
        t1[i].update$0();
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (t1[i].destroy)
          C.JSArray_methods.removeAt$1(t1, i);
      }
    }
  },
  Bullet: {
    "^": "Object;destroy,grounded?,virgin,bulletSpeed,game,acceleration>,origSize,view>",
    update$0: function() {
      var t1, t2, t3, t4, i, tempEnemy;
      t1 = this.game;
      t1.collisionManager.floorCheck$1(this);
      if (t1.collisionManager.spritesColliding$2(this, t1.player)) {
        if (!this.virgin) {
          t2 = t1.player;
          t3 = t2.game;
          t4 = M.TextStyle$("left", "black", "bold 20pt Arial", "black", 0, 16777215);
          t4.font = "bold 35px Arial";
          t4.fill = "white";
          t4 = M.Text$("You died", t4);
          t3.startText = t4;
          t3 = t3.container;
          t3.addChildAt$2(t4, t3.children.length);
          t2.view.textures = t2.dyingFrames;
          $.currentState = $.get$states().$index(0, "paused");
        }
      } else
        this.virgin = false;
      for (i = 0; t2 = t1.npcManager.allyPool, i < t2.length; ++i) {
        tempEnemy = t2[i];
        if (t1.collisionManager.spritesColliding$2(this, tempEnemy)) {
          this.grounded = true;
          tempEnemy.dead = true;
          tempEnemy.view.textures = tempEnemy.dyingFrames;
        }
      }
      if (this.grounded) {
        this.destroy = true;
        t2 = t1.gameFront;
        t3 = t2.children;
        t2.removeChildAt$1(H.Lists_indexOf(t3, this.view, 0, t3.length));
      }
      t2 = this.acceleration;
      t2.y = J.$add$ns(t2.y, t1.gravity * (this.bulletSpeed / 3) * $.modulo);
      t1 = this.view.position;
      t1.x = J.$add$ns(t1.x, t2.x);
      t1 = this.view.position;
      t1.y = J.$add$ns(t1.y, t2.y);
    },
    Bullet$4: function(game, x, y, d) {
      var t1, t2, t3;
      t1 = this.acceleration;
      t2 = this.bulletSpeed;
      t3 = $.modulo;
      t1.x = d * t2 * t3;
      t1.y = -t2 * t3;
      t3 = this.origSize;
      t2 = this.view;
      t3.x = J.$mul$ns(t2.scale.x, t2.texture.get$frame().width);
      t2 = this.view;
      t3.y = J.$mul$ns(t2.scale.y, t2.texture.get$frame().height);
      this.view.set$width(0, J.$mul$ns(t3.x, $.modulo));
      this.view.set$height(0, J.$mul$ns(t3.y, $.modulo));
      t3 = this.view;
      t2 = J.$mul$ns(t3.scale.x, t3.texture.get$frame().width);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = J.$add$ns(x, d * t2 / 2);
      t1 = this.view;
      t3.position.x = J.$sub$n(t2, J.$div$n(J.$mul$ns(t1.scale.x, t1.texture.get$frame().width), 2));
      t1 = this.view;
      t1.position.y = J.$sub$n(J.$sub$n(y, J.$div$n(J.$mul$ns(t1.scale.y, t1.texture.get$frame().height), 2)), 5 * $.modulo);
      t1 = this.game.gameFront;
      t1.addChildAt$2(this.view, t1.children.length);
    },
    $isBullet: true
  },
  CollisionManager: {
    "^": "Object;game",
    spritesColliding$2: function(a, b) {
      var t1, t2, t3;
      t1 = J.abs$0$n(J.$sub$n(a.get$view(a).position.x, b.get$view(b).position.x));
      t2 = a.get$view(a);
      t2 = J.abs$0$n(t2.get$width(t2));
      t3 = b.get$view(b);
      if (t1 * 2.5 < t2 + J.abs$0$n(J.$mul$ns(t3.scale.x, t3.texture.get$frame().width))) {
        t1 = J.abs$0$n(J.$sub$n(a.get$view(a).position.y, b.get$view(b).position.y));
        t2 = a.get$view(a);
        t2 = J.abs$0$n(t2.get$height(t2));
        t3 = b.get$view(b);
        t3 = t1 * 2.5 < t2 + J.abs$0$n(J.$mul$ns(t3.scale.y, t3.texture.get$frame().height));
        t1 = t3;
      } else
        t1 = false;
      return t1;
    },
    floorCheck$1: function(o) {
      var t1, t2, t3, texelX, t4, t5, texelY;
      t1 = o.get$view(o).position.x;
      t2 = o.get$view(o);
      t3 = this.game;
      texelX = J.round$0$n(J.$add$ns(J.$sub$n(J.$sub$n(t1, J.$div$n(t2.get$width(t2), 2)), t3.world.map.position.x), 10));
      t2 = J.$div$n(J.get$height$x(t3.world.myCanvas), $.modulo);
      t1 = $.height;
      if (typeof t1 !== "number")
        return t1.$mod();
      t1 = C.JSInt_methods.$mod(t1, 224);
      t4 = o.get$view(o).position.y;
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = o.get$view(o);
      texelY = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t2 - t1 + t4 + J.$div$n(t5.get$height(t5), 2))) + 224 * ($.modulo - 1);
      if (C.NativeUint8ClampedList_methods.toString$0(J.get$data$x(P.convertNativeToDart_ImageData(t3.world.CanvasCtx.getImageData(texelX, texelY, 1, 1)))) !== "[0, 0, 0, 0]")
        o.set$grounded(true);
      else
        o.set$grounded(false);
      if (!o.$isBullet)
        if (C.NativeUint8ClampedList_methods.toString$0(J.get$data$x(P.convertNativeToDart_ImageData(t3.world.CanvasCtx.getImageData(texelX, texelY - 2, 1, 1)))) !== "[0, 0, 0, 0]") {
          t1 = o.get$position(o);
          t1.y = J.$sub$n(t1.y, 1);
          o.get$acceleration(o).y = t3.gravity * -2;
        }
    }
  },
  CutsceneManager: {
    "^": "Object;initialized?,playing,scene,friendlyCounter,startCamera,game,cutscenes",
    play$1: function(_, s) {
      if (!this.playing) {
        this.playing = true;
        this.initialized = false;
        this.scene = s;
      }
    },
    update$0: function() {
      var body, t1, t2, t3, t4, t5, i, t6, texture, texture0, texture1, texture2, texture3, texture4, texture5, texture6;
      if (this.playing)
        switch (this.scene) {
          case 0:
            body = document.querySelector("body");
            body.toString;
            t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(body, C.EventStreamProvider_touchstart._eventType, false), [null]);
            t1.get$first(t1).then$1(new M.CutsceneManager_update_closure(this, body));
            t1 = J.get$onMouseDown$x(body);
            t1.get$first(t1).then$1(new M.CutsceneManager_update_closure0(this));
            break;
          case 1:
            if (!this.initialized) {
              t1 = this.game;
              t2 = t1.camera;
              t3 = t2.x;
              t4 = t2.y;
              t5 = new M.Point(null, null);
              t5.x = t3;
              t5.y = t4;
              this.startCamera = t5;
              t5 = t1.container;
              t4 = t5.children;
              t5.removeChildAt$1(H.Lists_indexOf(t4, t1.startText, 0, t4.length));
              $.currentState = $.get$states().$index(0, "paused");
              t2.y = 0;
              this.initialized = true;
            }
            t1 = this.game;
            t2 = t1.camera;
            if (J.$gt$n(t2.y, this.startCamera.y))
              t2.y = J.$sub$n(t2.y, 5);
            if (J.$le$n(t2.y, this.startCamera.y)) {
              t1.player.view.visible = true;
              $.currentState = $.get$states().$index(0, "playing");
              for (i = 1; i <= 15; ++i) {
                t2 = t1.npcManager;
                t3 = J.$sub$n(J.$sub$n(t1.world.originalWidth, 200), 25 * i);
                t4 = t2.allyPool;
                t2 = t2.game;
                t5 = new M.Point(null, null);
                t5.x = 0;
                t5.y = 0;
                t6 = new M.Point(null, null);
                t6.x = 0;
                t6.y = 0;
                texture = $.get$TextureCache().$index(0, "Death1.png");
                if (texture == null)
                  H.throwExpression(P.Exception_Exception("The frameId \"Death1.png\" does not exist in the texture cache"));
                texture0 = $.get$TextureCache().$index(0, "Death2.png");
                if (texture0 == null)
                  H.throwExpression(P.Exception_Exception("The frameId \"Death2.png\" does not exist in the texture cache"));
                texture1 = $.get$TextureCache().$index(0, "death3.png");
                if (texture1 == null)
                  H.throwExpression(P.Exception_Exception("The frameId \"death3.png\" does not exist in the texture cache"));
                texture2 = $.get$TextureCache().$index(0, "Side View/W1.png");
                if (texture2 == null)
                  H.throwExpression(P.Exception_Exception("The frameId \"Side View/W1.png\" does not exist in the texture cache"));
                texture3 = $.get$TextureCache().$index(0, "Side View/W1.png");
                if (texture3 == null)
                  H.throwExpression(P.Exception_Exception("The frameId \"Side View/W1.png\" does not exist in the texture cache"));
                texture4 = $.get$TextureCache().$index(0, "Side View/W2.png");
                if (texture4 == null)
                  H.throwExpression(P.Exception_Exception("The frameId \"Side View/W2.png\" does not exist in the texture cache"));
                texture5 = $.get$TextureCache().$index(0, "Side View/W3.png");
                if (texture5 == null)
                  H.throwExpression(P.Exception_Exception("The frameId \"Side View/W3.png\" does not exist in the texture cache"));
                texture6 = $.get$TextureCache().$index(0, "Side View/W4.png");
                if (texture6 == null)
                  H.throwExpression(P.Exception_Exception("The frameId \"Side View/W4.png\" does not exist in the texture cache"));
                t5 = new M.Enemy(true, false, false, false, 0, null, null, t2, t5, t6, [texture, texture0, texture1], [texture2], [texture3, texture4, texture5, texture6], null);
                t5.Enemy$3(t2, t3, true);
                t4.push(t5);
              }
              this.playing = false;
            }
            break;
          case 2:
            break;
          case 3:
            break;
          case 4:
            break;
          case 5:
            break;
          case 6:
            break;
          case 7:
            break;
          case 8:
            break;
          default:
            break;
        }
    }
  },
  CutsceneManager_update_closure: {
    "^": "Closure:33;this_0,body_1",
    call$1: [function(e) {
      var t1;
      this.body_1.webkitRequestFullscreen();
      t1 = this.this_0;
      t1.playing = false;
      t1 = t1.game.cutsceneManager;
      t1.play$1(0, t1.cutscenes.$index(0, "intro"));
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  CutsceneManager_update_closure0: {
    "^": "Closure:33;this_2",
    call$1: [function(e) {
      var t1 = this.this_2;
      t1.playing = false;
      t1 = t1.game.cutsceneManager;
      t1.play$1(0, t1.cutscenes.$index(0, "intro"));
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  Game: {
    "^": "Object;bulletManager,collisionManager,cutsceneManager,inputHelper,npcManager,player,world,camera,startText,container,game,gameFront,gravity",
    Game$0: function() {
      var t1, t2;
      this.bulletManager = new M.BulletManager(this, H.setRuntimeTypeInfo([], [M.Bullet]));
      this.collisionManager = new M.CollisionManager(this);
      this.cutsceneManager = new M.CutsceneManager(false, false, 0, 0, null, this, P.LinkedHashMap_LinkedHashMap$_literal(["tap", 0, "intro", 1, "battlefield", 2, "mercy", 3, "sourrounded", 4, "final_choice", 5, "outro_good", 6, "outro_bad", 7, "Dying", 8], null, null));
      this.inputHelper = M.InputHelper$(this);
      t1 = new M.Point(null, null);
      t1.x = 0;
      t1.y = 0;
      t2 = new M.Point(null, null);
      t2.x = 0;
      t2.y = 0;
      t2 = new M.Player(false, true, false, 0.6, 0, 0.8, null, null, 200, 0.1, this, t1, t2, [M.Texture_fromFrame("Death/1.png"), M.Texture_fromFrame("Death/2.png"), M.Texture_fromFrame("Death/3.png"), M.Texture_fromFrame("Death/4.png"), M.Texture_fromFrame("Death/5.png")], [M.Texture_fromFrame("Side View/Standing_Down.png"), M.Texture_fromFrame("Side View/Standing_Up.png")], [M.Texture_fromFrame("Side View/1.png"), M.Texture_fromFrame("Side View/2.png"), M.Texture_fromFrame("Side View/3.png"), M.Texture_fromFrame("Side View/4.png")], null);
      t2.Player$1(this);
      this.player = t2;
      t2 = new M.World(this, null, null, M.Sprite_fromFrame("world.png"), M.Sprite_fromFrame("worldFrontView.png"), null, null);
      t2.World$1(this);
      this.world = t2;
      this.npcManager = new M.NPCManager(this, 0.4, H.setRuntimeTypeInfo([], [M.Enemy]));
      t2 = this.container;
      t2.hitArea = $.get$stage().PIXI$Stage$hitArea;
      t2.set$interactive(true);
      t1 = t2.children;
      t2.addChildAt$2(this.gameFront, t1.length);
      t2.addChildAt$2(this.game, t1.length);
      t2.addChildAt$2(this.startText, t1.length);
      t1 = $.get$stage();
      t1.addChildAt$2(t2, t1.children.length);
    }
  },
  InputHelper: {
    "^": "Object;_keys,leftTouch,rightTouch,shootTouch,game",
    update$0: function() {
      var t1, t2, t3, t4;
      t1 = this.leftTouch;
      t2 = new M.InputHelper_update_closure(this);
      t1.touchstart = t2;
      t1.mousedown = t2;
      t2 = this.rightTouch;
      t3 = new M.InputHelper_update_closure0(this);
      t2.touchstart = t3;
      t2.mousedown = t3;
      t3 = this.shootTouch;
      t4 = new M.InputHelper_update_closure1(this);
      t3.touchstart = t4;
      t3.mousedown = t4;
      t4 = new M.InputHelper_update_closure2(this);
      t1.touchendoutside = t4;
      t1.touchend = t4;
      t1.mouseupoutside = t4;
      t1.mouseup = t4;
      t4 = new M.InputHelper_update_closure3(this);
      t2.touchendoutside = t4;
      t2.touchend = t4;
      t2.mouseupoutside = t4;
      t2.mouseup = t4;
      t4 = new M.InputHelper_update_closure4(this);
      t3.touchendoutside = t4;
      t3.touchend = t4;
      t3.mouseupoutside = t4;
      t3.mouseup = t4;
    },
    InputHelper$1: function(game) {
      var t1, t2, t3, t4;
      t1 = H.setRuntimeTypeInfo(new W._EventStream(window, C.EventStreamProvider_keydown._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.InputHelper_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(window, C.EventStreamProvider_keyup._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.InputHelper_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = this.leftTouch;
      t1.set$interactive(true);
      t2 = $.width;
      if (typeof t2 !== "number")
        return t2.$div();
      t1.hitArea = new M.Rectangle(0, 0, t2 / 4, $.height);
      t2 = this.game.game;
      t3 = t2.children;
      t2.addChildAt$2(t1, t3.length);
      t1 = this.rightTouch;
      t1.set$interactive(true);
      t4 = $.width;
      if (typeof t4 !== "number")
        return t4.$div();
      t4 /= 4;
      t1.hitArea = new M.Rectangle(t4, 0, t4, $.height);
      t2.addChildAt$2(t1, t3.length);
      t1 = this.shootTouch;
      t1.set$interactive(true);
      t4 = $.width;
      if (typeof t4 !== "number")
        return t4.$div();
      t4 /= 2;
      t1.hitArea = new M.Rectangle(t4, 0, t4, $.height);
      t2.addChildAt$2(t1, t3.length);
    },
    static: {InputHelper$: function(game) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, P.$int);
        t2 = new M.Point(null, null);
        t2.x = 0;
        t2.y = 0;
        t3 = new M.Point(null, null);
        t3.x = 1;
        t3.y = 1;
        t4 = new M.Point(null, null);
        t4.x = 0;
        t4.y = 0;
        t5 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t6 = new Float32Array(9);
        t7 = new M.Point(null, null);
        t7.x = 0;
        t7.y = 0;
        t8 = new M.Point(null, null);
        t8.x = 1;
        t8.y = 1;
        t9 = new M.Point(null, null);
        t9.x = 0;
        t9.y = 0;
        t10 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t11 = new Float32Array(9);
        t12 = new M.Point(null, null);
        t12.x = 0;
        t12.y = 0;
        t13 = new M.Point(null, null);
        t13.x = 1;
        t13.y = 1;
        t14 = new M.Point(null, null);
        t14.x = 0;
        t14.y = 0;
        t15 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t1 = new M.InputHelper(t1, new M.DisplayObjectContainer([], false, 0, 0, t2, t3, t4, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t5, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, t6), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0), new M.DisplayObjectContainer([], false, 0, 0, t7, t8, t9, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t10, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, t11), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0), new M.DisplayObjectContainer([], false, 0, 0, t12, t13, t14, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t15, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, new Float32Array(9)), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0), game);
        t1.InputHelper$1(game);
        return t1;
      }}
  },
  InputHelper_closure: {
    "^": "Closure:83;this_0",
    call$1: [function(e) {
      var t1, t2;
      t1 = this.this_0._keys;
      t2 = J.getInterceptor$x(e);
      if (!t1.containsKey$1(t2.get$keyCode(e)))
        t1.$indexSet(0, t2.get$keyCode(e), t2.get$timeStamp(e));
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  InputHelper_closure0: {
    "^": "Closure:83;this_1",
    call$1: [function(e) {
      return this.this_1._keys.remove$1(0, J.get$keyCode$x(e));
    }, "call$1", null, 2, 0, null, 3, "call"],
    $isFunction: true
  },
  InputHelper_update_closure: {
    "^": "Closure:33;this_0",
    call$1: function(d) {
      var t1 = this.this_0._keys;
      if (!t1.containsKey$1(37))
        t1.$indexSet(0, 37, null);
    },
    $isFunction: true
  },
  InputHelper_update_closure0: {
    "^": "Closure:33;this_1",
    call$1: function(d) {
      var t1 = this.this_1._keys;
      if (!t1.containsKey$1(39))
        t1.$indexSet(0, 39, null);
    },
    $isFunction: true
  },
  InputHelper_update_closure1: {
    "^": "Closure:33;this_2",
    call$1: function(d) {
      var t1 = this.this_2._keys;
      if (!t1.containsKey$1(32))
        t1.$indexSet(0, 32, null);
    },
    $isFunction: true
  },
  InputHelper_update_closure2: {
    "^": "Closure:33;this_3",
    call$1: function(d) {
      return this.this_3._keys.remove$1(0, 37);
    },
    $isFunction: true
  },
  InputHelper_update_closure3: {
    "^": "Closure:33;this_4",
    call$1: function(d) {
      return this.this_4._keys.remove$1(0, 39);
    },
    $isFunction: true
  },
  InputHelper_update_closure4: {
    "^": "Closure:33;this_5",
    call$1: function(d) {
      return this.this_5._keys.remove$1(0, 32);
    },
    $isFunction: true
  },
  NPCManager: {
    "^": "Object;game,drag,allyPool",
    update$0: function() {
      var t1, t2, i, t3, t4, j, currFacingRight, t5, t6, t7, t8;
      for (t1 = this.allyPool, t2 = this.game, i = 0; i < t1.length; ++i) {
        t3 = t1[i];
        if (t3.ally) {
          t4 = t3.game.cutsceneManager;
          switch (t4.scene) {
            case 0:
              break;
            case 1:
              t3.acceleration.x = -t4.game.player.maxSpeed;
              if (J.$ge$n(J.$sub$n($.currentTime, t4.friendlyCounter), 5000)) {
                M.resize(null);
                t4.friendlyCounter = J.$mul$ns($.currentTime, 100000);
              }
              break;
            case 2:
              break;
            case 3:
              break;
            case 4:
              break;
            case 5:
              break;
            case 6:
              break;
            case 7:
              break;
            case 8:
              break;
            default:
              break;
          }
        }
        for (j = 0; t3 = t1.length, j < t3; ++j)
          if (i !== j && !t1[j].dead) {
            t4 = t2.collisionManager;
            if (i >= t3)
              return H.ioore(t1, i);
            if (t4.spritesColliding$2(t1[i], t1[j])) {
              if (i >= t1.length)
                return H.ioore(t1, i);
              t1[i].acceleration.x = 0;
            }
          }
        if (i >= t3)
          return H.ioore(t1, i);
        t3 = t1[i];
        currFacingRight = t3.facingRight;
        if (t3.dead) {
          t4 = t3.acceleration;
          t4.x = 0;
        } else {
          t4 = t3.acceleration;
          t5 = J.$eq(t4.x, 0);
          t6 = t3.view;
          if (t5)
            t6.textures = t3.idleFrames;
          else
            t6.textures = t3.runningFrames;
        }
        t5 = t3.view;
        t6 = t3.game;
        t7 = t6.player.realAnimationSpeed;
        t8 = $.dt;
        if (typeof t8 !== "number")
          return H.iae(t8);
        t5.animationSpeed = t7 * t8;
        t6.collisionManager.floorCheck$1(t3);
        if (!t3.grounded)
          t4.y = J.$add$ns(t4.y, t6.gravity);
        else
          t4.y = 0;
        if (J.$gt$n(t4.x, 0))
          if (J.$gt$n(t4.x, t6.npcManager.drag))
            t4.x = J.$sub$n(t4.x, t6.npcManager.drag);
          else
            t4.x = 0;
        if (J.$lt$n(t4.x, 0))
          if (J.$lt$n(t4.x, -t6.npcManager.drag)) {
            t4.x = J.$add$ns(t4.x, t6.npcManager.drag);
            t3.facingRight = false;
          } else
            t4.x = 0;
        t5 = t3.position;
        t5.y = J.$add$ns(t5.y, t4.y);
        if (J.$lt$n(t6.player.acceleration.x, 0)) {
          t7 = t6.player;
          t7 = J.$lt$n(J.$add$ns(t7.view.position.x, J.$mul$ns(t7.acceleration.x, $.modulo)), 50 * $.modulo);
        } else
          t7 = false;
        if (t7) {
          t7 = t5.x;
          t4 = t4.x;
          t8 = $.modulo;
          t6 = t6.player.acceleration.x;
          if (typeof t6 !== "number")
            return H.iae(t6);
          t8 = J.$add$ns(t7, J.$sub$n(t4, t8 / 2 * t6 / t8));
          t5.x = t8;
          t4 = t8;
        } else {
          if (J.$gt$n(t6.player.acceleration.x, 0)) {
            t7 = t6.player;
            t7 = J.$add$ns(t7.view.position.x, J.$mul$ns(t7.acceleration.x, $.modulo));
            t8 = $.width;
            if (typeof t8 !== "number")
              return t8.$div();
            t8 = J.$gt$n(t7, t8 / 2);
            t7 = t8;
          } else
            t7 = false;
          t8 = t5.x;
          t4 = t4.x;
          if (t7) {
            t7 = $.modulo;
            t6 = t6.player.acceleration.x;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t7 = J.$add$ns(t8, J.$sub$n(t4, t7 / 2 * t6 / t7));
            t5.x = t7;
            t4 = t7;
          } else {
            t4 = J.$add$ns(t8, t4);
            t5.x = t4;
          }
        }
        t3.view.position.x = J.$mul$ns(t4, $.modulo);
        t3.view.position.y = J.$mul$ns(t5.y, $.modulo);
        if (currFacingRight !== t3.facingRight) {
          t4 = t3.view.scale;
          t4.x = J.$mul$ns(t4.x, -1);
          t4 = t3.view;
          t5 = J.$div$n(J.$mul$ns(t4.scale.x, t4.texture.get$frame().width), 2);
          t6 = t3.view;
          t7 = t6.scale.x;
          t8 = J.getInterceptor$ns(t7);
          t4.position.x = t5 - J.$div$n(t8.$mul(t7, t8.$mul(t7, t6.texture.get$frame().width)), 2);
        }
        if (t3.dead) {
          t4 = t3.deadFrame;
          t5 = t3.view;
          if (t4 < 2 / t5.animationSpeed)
            t3.deadFrame = t4 + 1;
          else
            t5._playing = false;
        }
      }
    }
  },
  Enemy: {
    "^": "Object;ally,facingRight,grounded?,dead,deadFrame,originalHeight,originalWidth,game,position>,acceleration>,dyingFrames,idleFrames,runningFrames,view>",
    Enemy$3: function(game, x, ally) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.idleFrames;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = t1[0];
      t3 = new M.Point(null, null);
      t3.x = 0;
      t3.y = 0;
      t4 = new M.Point(null, null);
      t4.x = 0;
      t4.y = 0;
      t5 = new M.Point(null, null);
      t5.x = 1;
      t5.y = 1;
      t6 = new M.Point(null, null);
      t6.x = 0;
      t6.y = 0;
      t7 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t4 = new M.MovieClip(null, 1, true, null, 0, false, t3, null, false, 0, 0, null, null, null, 16777215, null, C.BlendModes_0, [], false, 0, 0, t4, t5, t6, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t7, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, new Float32Array(9)), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0);
      t4.texture = t2;
      t4._setupTexture$0();
      t4.textures = t1;
      this.view = t4;
      t4.animationSpeed = 0.23;
      t3.x = 0.5;
      t3.y = 0.5;
      t4.visible = true;
      this.originalHeight = J.$mul$ns(t4.scale.y, t4.texture.get$frame().height);
      t4 = this.view;
      t4 = J.$mul$ns(t4.scale.x, t4.texture.get$frame().width);
      this.originalWidth = t4;
      this.view.set$width(0, J.$mul$ns(t4, $.modulo));
      this.view.set$height(0, J.$mul$ns(this.originalHeight, $.modulo));
      t4 = this.position;
      t3 = this.game;
      t4.y = t3.player.position.y;
      t4.x = x;
      t4 = this.view;
      t4._playing = true;
      t3 = t3.gameFront;
      t3.addChildAt$2(t4, t3.children.length);
    }
  },
  Player: {
    "^": "Object;dead,facingRight,grounded?,drag,lastBulletShot,maxSpeed,originalHeight,originalWidth,shotDelay,realAnimationSpeed,game,position>,acceleration>,dyingFrames,idleFrames,runningFrames,view>",
    Player$1: function(game) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.idleFrames;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = t1[0];
      t3 = new M.Point(null, null);
      t3.x = 0;
      t3.y = 0;
      t4 = new M.Point(null, null);
      t4.x = 0;
      t4.y = 0;
      t5 = new M.Point(null, null);
      t5.x = 1;
      t5.y = 1;
      t6 = new M.Point(null, null);
      t6.x = 0;
      t6.y = 0;
      t7 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t4 = new M.MovieClip(null, 1, true, null, 0, false, t3, null, false, 0, 0, null, null, null, 16777215, null, C.BlendModes_0, [], false, 0, 0, t4, t5, t6, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t7, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, new Float32Array(9)), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0);
      t4.texture = t2;
      t4._setupTexture$0();
      t4.textures = t1;
      this.view = t4;
      t4.animationSpeed = 0.23;
      t3.x = 0.5;
      t3.y = 0.5;
      t4.visible = false;
      this.originalHeight = J.$mul$ns(t4.scale.y, t4.texture.get$frame().height);
      t4 = this.view;
      this.originalWidth = J.$mul$ns(t4.scale.x, t4.texture.get$frame().width);
      t4 = this.position;
      t4.y = -10;
      t4.x = 150;
      t4 = this.view;
      t4._playing = true;
      t3 = this.game.game;
      t3.addChildAt$2(t4, t3.children.length);
    }
  },
  World: {
    "^": "Object;game,originalHeight,originalWidth,map,foreground,myCanvas,CanvasCtx",
    map$1: function($receiver, arg0) {
      return this.map.call$1(arg0);
    },
    World$1: function(game) {
      var t1, t2, t3;
      t1 = this.map;
      this.originalHeight = J.$mul$ns(t1.scale.y, t1.texture.get$frame().height);
      this.originalWidth = J.$mul$ns(t1.scale.x, t1.texture.get$frame().width);
      t2 = J.$mul$ns(t1.scale.x, t1.texture.get$frame().width);
      t2 = W.CanvasElement_CanvasElement(J.$mul$ns(t1.scale.y, t1.texture.get$frame().height), t2);
      this.myCanvas = t2;
      t2 = J.get$context2D$x(t2);
      this.CanvasCtx = t2;
      t2.drawImage($.get$worldColl(), 0, 0, J.$mul$ns(t1.scale.x, t1.texture.get$frame().width), J.$mul$ns(t1.scale.y, t1.texture.get$frame().height));
      t2 = this.game;
      t3 = t2.gameFront;
      t3.addChildAt$2(t1, t3.children.length);
      t2 = t2.game;
      t2.addChildAt$2(this.foreground, t2.children.length);
    }
  },
  main_closure: {
    "^": "Closure:33;box_0,progressBar_1",
    call$1: function(_) {
      J.set$value$x(this.progressBar_1, ++this.box_0.loaded_0);
    },
    $isFunction: true
  },
  main_closure0: {
    "^": "Closure:62;progressBar_2",
    call$0: function() {
      $._initialized = true;
      J.set$display$x(this.progressBar_2.style, "none");
      $.currentState = $.get$states().$index(0, "playing");
      M.resize(null);
      J.set$display$x($.get$renderer().view.style, "block");
      $.get$requestAnimFrame().call$1(M.animate$closure());
      var t1 = $.get$game().cutsceneManager;
      t1.play$1(0, t1.cutscenes.$index(0, "tap"));
    },
    $isFunction: true
  },
  main_closure1: {
    "^": "Closure:33;",
    call$1: [function(_) {
      return $.get$loader().load$0(0);
    }, "call$1", null, 2, 0, null, 39, "call"],
    $isFunction: true
  }
},
1],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
P.$int.$is$int = true;
P.$int.$isnum = true;
P.$int.$isComparable = true;
P.$int.$asComparable = [P.num];
P.$int.$isObject = true;
P.$double.$isnum = true;
P.$double.$isComparable = true;
P.$double.$asComparable = [P.num];
P.$double.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
W.Touch.$isObject = true;
P.String.$isString = true;
P.String.$isPattern = true;
P.String.$isComparable = true;
P.String.$asComparable = [P.String];
P.String.$isObject = true;
P.num.$isnum = true;
P.num.$isComparable = true;
P.num.$asComparable = [P.num];
P.num.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
P.Object.$isObject = true;
W.Event.$isObject = true;
M.Bullet.$isObject = true;
M.Enemy.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isObject = true;
P.RenderingContext.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.ContextEvent.$isObject = true;
W.TouchEvent.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isObject = true;
W.ProgressEvent.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.bool.$isbool = true;
P.bool.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
M.PixiEvent.$isPixiEvent = true;
M.PixiEvent.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
M.Texture.$isTexture = true;
M.Texture.$isObject = true;
W.CanvasElement.$isCanvasElement = true;
W.CanvasElement.$isElement = true;
W.CanvasElement.$isNode = true;
W.CanvasElement.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
P.UniformLocation.$isUniformLocation = true;
P.UniformLocation.$isObject = true;
P.Float32List.$isFloat32List = true;
P.Float32List.$isIterable = true;
P.Float32List.$asIterable = [P.$double];
P.Float32List.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
P.Pattern.$isPattern = true;
P.Pattern.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J._checkSublistArguments$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver)._checkSublistArguments$3(receiver, a0, a1, a2);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.activeTexture$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).activeTexture$1(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addEventListener$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).addEventListener$2(receiver, a0, a1);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.bindBuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
};
J.bindFramebuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindFramebuffer$2(receiver, a0, a1);
};
J.bindTexture$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindTexture$2(receiver, a0, a1);
};
J.blendFunc$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).blendFunc$2(receiver, a0, a1);
};
J.bufferSubData$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferSubData$3(receiver, a0, a1, a2);
};
J.clear$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
J.clearColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
};
J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
J.colorMask$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).colorMask$4(receiver, a0, a1, a2, a3);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.disable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disable$1(receiver, a0);
};
J.disableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disableVertexAttribArray$1(receiver, a0);
};
J.drawElements$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).drawElements$4(receiver, a0, a1, a2, a3);
};
J.drawImageScaledFromSource$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return J.getInterceptor$x(receiver).drawImageScaledFromSource$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.enable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enable$1(receiver, a0);
};
J.enableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enableVertexAttribArray$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
J.fillText$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).fillText$3(receiver, a0, a1, a2);
};
J.floor$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).floor$0(receiver);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$changedTouches$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$changedTouches(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$click$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$click(receiver);
};
J.get$content$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$content(receiver);
};
J.get$context2D$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$context2D(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$keyCode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keyCode(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$lineWidth$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lineWidth(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$onError$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onError(receiver);
};
J.get$onLoad$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onLoad(receiver);
};
J.get$onMouseDown$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onMouseDown(receiver);
};
J.get$onWebGlContextLost$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onWebGlContextLost(receiver);
};
J.get$onWebGlContextRestored$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onWebGlContextRestored(receiver);
};
J.get$trim$s = function(receiver) {
  return J.getInterceptor$s(receiver).get$trim(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.getAttribLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getAttribLocation$2(receiver, a0, a1);
};
J.getAttribute$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getAttribute$1(receiver, a0);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.getContext$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getContext$2(receiver, a0, a1);
};
J.getContext3d$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getContext3d$0(receiver);
};
J.getUniformLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.insert$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
};
J.join$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).join$1(receiver, a0);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.measureText$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).measureText$1(receiver, a0);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.open$3$async$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).open$3$async(receiver, a0, a1, a2);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$crossOrigin$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$crossOrigin(receiver, value);
};
J.set$cursor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cursor(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$fillStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
J.set$font$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$font(receiver, value);
};
J.set$globalAlpha$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$globalAlpha(receiver, value);
};
J.set$globalCompositeOperation$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$globalCompositeOperation(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$imageSmoothingEnabled$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$imageSmoothingEnabled(receiver, value);
};
J.set$lineWidth$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lineWidth(receiver, value);
};
J.set$src$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$src(receiver, value);
};
J.set$strokeStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$strokeStyle(receiver, value);
};
J.set$textBaseline$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$textBaseline(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.setTransform$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).setTransform$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.strokeText$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).strokeText$3(receiver, a0, a1, a2);
};
J.toDataUrl$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).toDataUrl$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toUpperCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
J.uniform2f$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniform2f$3(receiver, a0, a1, a2);
};
J.useProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
};
J.vertexAttribPointer$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).vertexAttribPointer$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.viewport$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
};
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.NativeUint8ClampedList_methods = H.NativeUint8ClampedList.prototype;
C.NodeList_methods = W.NodeList.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
C.BlendModes_0 = new M.BlendModes(0);
C.BlendModes_1 = new M.BlendModes(1);
C.BlendModes_10 = new M.BlendModes(10);
C.BlendModes_11 = new M.BlendModes(11);
C.BlendModes_12 = new M.BlendModes(12);
C.BlendModes_13 = new M.BlendModes(13);
C.BlendModes_14 = new M.BlendModes(14);
C.BlendModes_15 = new M.BlendModes(15);
C.BlendModes_16 = new M.BlendModes(16);
C.BlendModes_2 = new M.BlendModes(2);
C.BlendModes_3 = new M.BlendModes(3);
C.BlendModes_4 = new M.BlendModes(4);
C.BlendModes_5 = new M.BlendModes(5);
C.BlendModes_6 = new M.BlendModes(6);
C.BlendModes_7 = new M.BlendModes(7);
C.BlendModes_8 = new M.BlendModes(8);
C.BlendModes_9 = new M.BlendModes(9);
C.BlendModes_99999 = new M.BlendModes(99999);
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__DelayedDone = new P._DelayedDone();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_error = new W.EventStreamProvider("error");
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.EventStreamProvider_load0 = new W.EventStreamProvider("load");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_readystatechange = new W.EventStreamProvider("readystatechange");
C.EventStreamProvider_resize = new W.EventStreamProvider("resize");
C.EventStreamProvider_touchstart = new W.EventStreamProvider("touchstart");
C.EventStreamProvider_webglcontextlost = new W.EventStreamProvider("webglcontextlost");
C.EventStreamProvider_webglcontextrestored = new W.EventStreamProvider("webglcontextrestored");
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JsonCodec_null_null = new P.JsonCodec(null, null);
C.JsonDecoder_null = new P.JsonDecoder(null);
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
;
C.List_empty = Isolate.makeConstantList([]);
C.Symbol_call = new H.Symbol0("call");
C.Type_AHF = H.createRuntimeType('NativeTypedArray');
C.Type_EQs = H.createRuntimeType('GlobalEventHandlers');
C.Type_NlB = H.createRuntimeType('NativeTypedArrayOfDouble');
C.Type_QyU = H.createRuntimeType('WindowEventHandlers');
C.Type_wOW = H.createRuntimeType('NativeTypedArrayOfInt');
C.scaleModes_0 = new M.scaleModes(0);
$.libraries_to_load = {};
$.defaultRenderer = null;
$.blendModesWebGL = null;
$.blendModesCanvas = null;
$._UID = 0;
$.Graphics_POLY = 0;
$.Graphics_RECT = 1;
$.Graphics_CIRC = 2;
$.Graphics_ELIP = 3;
$.Graphics_RREC = 4;
$.CanvasTinter_cacheStepsPerColorChannel = 8;
$.CanvasTinter_convertTintToImage = false;
$.CanvasTinter_canvas = null;
$.BaseTextureCacheIdGenerator = 0;
$.TextureCacheIdGenerator = 0;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.currentState = null;
$.currentTime = null;
$.dt = null;
$.lastTime = 0;
$.modulo = 0;
$.width = null;
$.height = null;
$._initialized = false;
Isolate.$lazy($, "IdentityMatrix", "IdentityMatrix", "get$IdentityMatrix", function() {
  return new M.Matrix(1, 0, 0, 1, 0, 0, new Float32Array(9));
});
Isolate.$lazy($, "EmptyRectangle", "EmptyRectangle", "get$EmptyRectangle", function() {
  return new M.Rectangle(0, 0, 0, 0);
});
Isolate.$lazy($, "AnimCache", "AnimCache", "get$AnimCache", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "AttachmentType", "AttachmentType", "get$AttachmentType", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal(["region", 0], null, null);
});
Isolate.$lazy($, "baseReg", "Loader_baseReg", "get$Loader_baseReg", function() {
  return new H.JSSyntaxRegExp("[^/]*$", H.JSSyntaxRegExp_makeNative("[^/]*$", false, true, false), null, null);
});
Isolate.$lazy($, "resultReg", "Loader_resultReg", "get$Loader_resultReg", function() {
  return new H.JSSyntaxRegExp("\r?\n", H.JSSyntaxRegExp_makeNative("\r?\n", false, true, false), null, null);
});
Isolate.$lazy($, "resultSplit", "Loader_resultSplit", "get$Loader_resultSplit", function() {
  return new H.JSSyntaxRegExp("^s+|s+$", H.JSSyntaxRegExp_makeNative("^s+|s+$", true, true, false), null, null);
});
Isolate.$lazy($, "requestAnimFrame", "requestAnimFrame", "get$requestAnimFrame", function() {
  return C.Window_methods.get$requestAnimationFrame(window);
});
Isolate.$lazy($, "canUseMultiply", "CanvasTinter_canUseMultiply", "get$CanvasTinter_canUseMultiply", function() {
  return M.canUseNewCanvasBlendModes();
});
Isolate.$lazy($, "tintMethod", "CanvasTinter_tintMethod", "get$CanvasTinter_tintMethod", function() {
  return $.get$CanvasTinter_canUseMultiply() != null ? M.CanvasTinter_tintWithMultiply$closure() : M.CanvasTinter_tintWithPerPixel$closure();
});
Isolate.$lazy($, "defaultVertexSrc", "PixiShader_defaultVertexSrc", "get$PixiShader_defaultVertexSrc", function() {
  return ["attribute vec2 aVertexPosition;", "attribute vec2 aTextureCoord;", "attribute vec2 aColor;", "uniform vec2 projectionVector;", "uniform vec2 offsetVector;", "varying vec2 vTextureCoord;", "varying vec4 vColor;", "const vec2 center = vec2(-1.0, 1.0);", "void main(void) {", "   gl_Position = vec4( ((aVertexPosition + offsetVector) / projectionVector) + center , 0.0, 1.0);", "   vTextureCoord = aTextureCoord;", "   vec3 color = mod(vec3(aColor.y/65536.0, aColor.y/256.0, aColor.y), 256.0) / 256.0;", "   vColor = vec4(color * aColor.x, aColor.x);", "}"];
});
Isolate.$lazy($, "glContexts", "glContexts", "get$glContexts", function() {
  return P.LinkedHashSet_LinkedHashSet(null, null, null, null);
});
Isolate.$lazy($, "fonts", "BitmapText_fonts", "get$BitmapText_fonts", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "splitReg", "Text_splitReg", "get$Text_splitReg", function() {
  return new H.JSSyntaxRegExp("(?:\r\n|\r|\n)", H.JSSyntaxRegExp_makeNative("(?:\r\n|\r|\n)", false, true, false), null, null);
});
Isolate.$lazy($, "heightCache", "Text_heightCache", "get$Text_heightCache", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "BaseTextureCache", "BaseTextureCache", "get$BaseTextureCache", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "texturesToUpdate", "texturesToUpdate", "get$texturesToUpdate", function() {
  return [];
});
Isolate.$lazy($, "texturesToDestroy", "texturesToDestroy", "get$texturesToDestroy", function() {
  return [];
});
Isolate.$lazy($, "TextureCache", "TextureCache", "get$TextureCache", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "frameUpdates", "Texture_frameUpdates", "get$Texture_frameUpdates", function() {
  return [];
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() {
    return this;
  }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "scheduleImmediateClosure", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
});
Isolate.$lazy($, "_nullFuture", "Future__nullFuture", "get$Future__nullFuture", function() {
  var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [null]);
  t1._async$_Future$immediate$1(null, null);
  return t1;
});
Isolate.$lazy($, "_toStringVisiting", "IterableBase__toStringVisiting", "get$IterableBase__toStringVisiting", function() {
  return [];
});
Isolate.$lazy($, "_DART_OBJECT_PROPERTY_NAME", "_DART_OBJECT_PROPERTY_NAME", "get$_DART_OBJECT_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartObject");
});
Isolate.$lazy($, "_DART_CLOSURE_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", "get$_DART_CLOSURE_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartClosure");
});
Isolate.$lazy($, "_dartProxyCtor", "_dartProxyCtor", "get$_dartProxyCtor", function() {
  return function DartObject(o) {
    this.o = o;
  };
});
Isolate.$lazy($, "game", "game", "get$game", function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16;
  t1 = new M.Point(null, null);
  t1.x = 0;
  t1.y = 0;
  t2 = M.TextStyle$("left", "black", "bold 20pt Arial", "black", 0, 16777215);
  t2.font = "bold 35px Arial";
  t2.fill = "white";
  t2 = M.Text$("This Game is unfinished\n\n Click or touch to start!", t2);
  t3 = new M.Point(null, null);
  t3.x = 0;
  t3.y = 0;
  t4 = new M.Point(null, null);
  t4.x = 1;
  t4.y = 1;
  t5 = new M.Point(null, null);
  t5.x = 0;
  t5.y = 0;
  t6 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
  t7 = new Float32Array(9);
  t8 = new M.Point(null, null);
  t8.x = 0;
  t8.y = 0;
  t9 = new M.Point(null, null);
  t9.x = 1;
  t9.y = 1;
  t10 = new M.Point(null, null);
  t10.x = 0;
  t10.y = 0;
  t11 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
  t12 = new Float32Array(9);
  t13 = new M.Point(null, null);
  t13.x = 0;
  t13.y = 0;
  t14 = new M.Point(null, null);
  t14.x = 1;
  t14.y = 1;
  t15 = new M.Point(null, null);
  t15.x = 0;
  t15.y = 0;
  t16 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
  t1 = new M.Game(null, null, null, null, null, null, null, t1, t2, new M.DisplayObjectContainer([], false, 0, 0, t3, t4, t5, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t6, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, t7), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0), new M.DisplayObjectContainer([], false, 0, 0, t8, t9, t10, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, t12), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0), new M.DisplayObjectContainer([], false, 0, 0, t13, t14, t15, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t16, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, new Float32Array(9)), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0), 0.098);
  t1.Game$0();
  return t1;
});
Isolate.$lazy($, "worldColl", "worldColl", "get$worldColl", function() {
  return W.ImageElement_ImageElement(null, "assets/world-collision.png", null);
});
Isolate.$lazy($, "loader", "loader", "get$loader", function() {
  return new M.AssetLoader(["assets/sprites.json"], false, 0, null, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
});
Isolate.$lazy($, "stage", "stage", "get$stage", function() {
  var t1, t2, t3, t4, t5;
  t1 = new Float32Array(9);
  t2 = new M.Point(null, null);
  t2.x = 0;
  t2.y = 0;
  t3 = new M.Point(null, null);
  t3.x = 1;
  t3.y = 1;
  t4 = new M.Point(null, null);
  t4.x = 0;
  t4.y = 0;
  t5 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
  t1 = new M.Stage(null, false, new M.Rectangle(0, 0, 100000, 100000), 0, [], null, new M.Matrix(1, 0, 0, 1, 0, 0, t1), null, [], false, 0, 0, t2, t3, t4, 0, 1, true, null, false, false, null, false, false, false, false, false, null, null, null, null, null, null, null, null, null, null, null, null, t5, null, 1, false, "pointer", new M.Matrix(1, 0, 0, 1, 0, 0, new Float32Array(9)), 0, 1, null, new M.Rectangle(0, 0, 1, 1), null, null, false, null, false, new M.FilterBlock(true, true, null, null, null, [], null), null, 0);
  t1.Stage$2(255, true);
  return t1;
});
Isolate.$lazy($, "renderer", "renderer", "get$renderer", function() {
  return M.autoDetectRenderer(600, 800, null, false, false);
});
Isolate.$lazy($, "states", "states", "get$states", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal(["playing", 1, "dead", 2, "end", 3, "paused", 4], null, null);
});
// Native classes

init.functionAliases = {};
;
init.metadata = [{func: "dynamic__Texture_int_CanvasElement", args: [M.Texture, P.$int, W.CanvasElement]},
{func: "args3", args: [null, null, null]},
"sender",
"e",
"event",
"uri",
"onError",
{func: "dynamic__String", args: [P.String]},
"closure",
"isolate",
"numberOfArguments",
"arg1",
"arg2",
"arg3",
"arg4",
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
{func: "void_", void: true},
{func: "void__dynamic", void: true, args: [null]},
"value",
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
,
"error",
"stackTrace",
{func: "bool__dynamic_dynamic", ret: P.bool, args: [null, null]},
{func: "int__dynamic", ret: P.$int, args: [null]},
"a",
{func: "int__Comparable_Comparable", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: P.bool, args: [P.Object, P.Object]},
{func: "int__Object", ret: P.$int, args: [P.Object]},
"callback",
"captureThis",
"self",
"arguments",
{func: "args1", args: [null]},
"o",
{func: "Object__dynamic", ret: P.Object, args: [null]},
{func: "void__num", void: true, args: [P.num]},
"time",
{func: "void___dynamic", void: true, opt: [null]},
"_",
{func: "int__RequestAnimationFrameCallback", ret: P.$int, args: [{func: "void__num", void: true, args: [P.num]}]},
"width",
{func: "void__UniformLocation_num", void: true, args: [P.UniformLocation, P.num]},
"location",
"x",
{func: "void__UniformLocation_int", void: true, args: [P.UniformLocation, P.$int]},
{func: "void__UniformLocation_num_num", void: true, args: [P.UniformLocation, P.num, P.num]},
"y",
{func: "void__UniformLocation_Float32List", void: true, args: [P.UniformLocation, P.Float32List]},
"v",
{func: "void__UniformLocation_int_int", void: true, args: [P.UniformLocation, P.$int, P.$int]},
{func: "void__UniformLocation_num_num_num", void: true, args: [P.UniformLocation, P.num, P.num, P.num]},
"z",
{func: "void__UniformLocation_int_int_int", void: true, args: [P.UniformLocation, P.$int, P.$int, P.$int]},
{func: "void__UniformLocation_num_num_num_num", void: true, args: [P.UniformLocation, P.num, P.num, P.num, P.num]},
"w",
{func: "void__UniformLocation_int_int_int_int", void: true, args: [P.UniformLocation, P.$int, P.$int, P.$int, P.$int]},
{func: "bool__num_num", ret: P.bool, args: [P.num, P.num]},
{func: "dynamic__PixiEvent", args: [M.PixiEvent]},
{func: "dynamic__MouseEvent", args: [W.MouseEvent]},
{func: "void__MouseEvent", void: true, args: [W.MouseEvent]},
"evt",
{func: "args0"},
"invocation",
{func: "String_", ret: P.String},
"msg",
"errorMessage",
"message",
{func: "args2", args: [null, null]},
{func: "dynamic__String_dynamic", args: [P.String, null]},
{func: "dynamic__dynamic_String", args: [null, P.String]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: P.bool},
"ignored",
"element",
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
"data",
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
"arg",
"each",
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: P.String, args: [P.$int]},
{func: "dynamic__String_String", args: [P.String, P.String]},
{func: "dynamic__KeyboardEvent", args: [W.KeyboardEvent]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function(a) {
      H.startRootIsolate(M.main$closure(), a);
    }, []);
  } else {
    (function(a) {
      H.startRootIsolate(M.main$closure(), a);
    })([]);
  }
});
;
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              if ($[fieldName] === sentinelInProgress)
                $[fieldName] = null;
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=main.dart.js.map
//@ sourceMappingURL=main.dart.js.map
